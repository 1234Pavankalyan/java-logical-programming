Java Design Patterns: https://github.com/iluwatar/java-design-patterns
Java Algorithms and Data Structures: https://github.com/TheAlgorithms/Java
Java Concurrency: https://github.com/codefollower/MyCode/blob/master/java-concurrency/src/main/java/com/mrwang/JavaConcurrencyInPractice.java
JavaFX Samples: https://github.com/javafxports/samples
Java Collections: https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-collections
Java 8 Features: https://github.com/winterbe/java8-tutorial
Java Spring Framework: https://github.com/spring-projects/spring-framework
I hope you find these repositories helpful in your Java learning journey!


                                                                                    



Regenerate response


In Java, there are eight primitive data types. These are:

byte: This data type represents a byte-sized integer, which can store values between -128 and 127.

short: This data type represents a short integer, which can store values between -32,768 and 32,767.

int: This data type represents an integer, which can store values between -2^31 and 2^31 - 1.

long: This data type represents a long integer, which can store values between -2^63 and 2^63 - 1.

float: This data type represents a single-precision floating-point number, which can store values with up to seven significant digits.

double: This data type represents a double-precision floating-point number, which can store values with up to 15 significant digits.

boolean: This data type represents a boolean value, which can be either true or false.

char: This data type represents a character, which can store a single Unicode character.


byte byteValue = 127;
short shortValue = 32767;
int intValue = 2147483647;
long longValue = 9223372036854775807L; // Note the "L" suffix to indicate a long value
float floatValue = 3.14159f; // Note the "f" suffix to indicate a float value
double doubleValue = 3.141592653589793;
boolean booleanValue = true;
char charValue = 'a';



===================================================================================================================================================

// Write a program that takes an age as input and checks if the person is a teenager (between 13 and 19 inclusive)
//   or an adult (20 and above) using nested if statements.
import java.util.Scanner;

class age {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter age");
    int age = sc.nextInt();
    if (age >= 13)
    {
      if (age <= 19) 
      {
        System.out.println("person is teenager");
      } 
      else
      {
        System.out.println("person is adult");
      }
    } 
    else
    {
       System.out.println("person is not adult or teenager");
    }
  }
}
=======================================================================================================================================================

//Q. Write a Java Program to Enter Student Number, Student Name, Any 3 Subject of Marks, Calculate Total and Average of the Student, and print the report?
import java.util.Scanner;
class average{
  public static void main(String args[]){
    float snum,m,p,c,total,avg;
    String sname;
    Scanner sc=new Scanner (System.in);
    System.out.println("enter name");
    sname=sc.next();
    System.out.println("enter number");
    snum=sc.nextFloat();
    System.out.println("enter maths");
    m=sc.nextFloat();
    System.out.println("enter physics");
    p=sc.nextFloat();
    System.out.println("enter chemistry");
    c=sc.nextFloat();
    total=m+p+c;
    avg=(total)/3;
    System.out.println("the student report");
    System.out.println("the name" +sname);
    System.out.println("the number" +snum);
    System.out.println("the maths subjects" +m);
    System.out.println("the physics subjects" +p);
    System.out.println("the chemistry subjects" +c);
    System.out.println("the total" +total);
    System.out.println("the average" +avg);                   
  }
}


==========================================================================================================================================================

/*Create a class that represents a bank account, including the account holder's name, account number, and current balance. Write methods to deposit and withdraw money, and to display the account balance.*/

import java.util.Scanner;
class account{
  String aname;
  double bnumber;
  double caccount;
  double n1amount;
  double n2amount;
  double wamount;
  double damount;
  Scanner sc=new Scanner(System.in);
  void bank(){
    System.out.println("enter accountant name");
    aname=sc.next();
    System.out.println("enter accountant number");
    bnumber=sc.nextDouble();
    System.out.println("enter accountant balance");
    caccount=sc.nextDouble();   
  }
    void withdraw(){
       System.out.println("enter withdraw amount");
     double wamount=sc.nextDouble();
    double n2amount=caccount-wamount;
    System.out.println("the withdraw amount" +n2amount);  
    }
  void deposit(){
    System.out.println("enter deposit amount");
     double damount=sc.nextDouble();
   double n1amount=caccount+damount;
    System.out.println("the deposit amount" +n1amount);
  }
    void report(){
       System.out.println("enter deposit amount");
      double damount=sc.nextDouble();
      System.out.println("enter withdraw amount");
      double wamount=sc.nextDouble();
     double n1amount=caccount+damount;
     double n2amount=caccount-wamount;
      System.out.println("the account name" +aname);
      System.out.println("the account number" +bnumber);
      System.out.println("the account balance" +caccount);
      System.out.println("the account withdraw" +wamount);
      System.out.println("the account deposit" +damount);
      System.out.println("the enter new account after deposit" +n1amount);
       System.out.println("the enter new account after withdraw amount" +n2amount);
      
    }
  }
class bank{
  public static void main(String args[]){
    account a=new account();
    a.bank();
    a.deposit();
    a.withdraw();
    a.report();
  }
}



// Create a class that represents a bank account, including the account holder's name, account number, and current balance. Write methods to deposit and 
withdraw money, 
// and to display the account balance.

import java.util.*;
class Account{
  String acc_nam;
  long acc_num;
  double acc_bal;
  double de_acc;
  double w_bal;
  Scanner sc=new Scanner(System.in);
  void bank(){
    System.out.println("enter your account name:");
    acc_nam=sc.next();
    System.out.println("enter your account number:");
    acc_num=sc.nextLong();
    System.out.println("enter your account balance:");
    acc_bal=sc.nextDouble();
  }
    
    
  
  void deposit(){
    System.out.println("enter ur deposite balance:");
    de_acc=sc.nextDouble();
    acc_bal+=de_acc;
     System.out.println(" ur deposite balance is "+de_acc);
    System.out.println("you  total account  amount is"+acc_bal);
  }
  void withDraw(){
    System.out.println("enter ur withdraw amount :");
    w_bal=sc.nextDouble();
    if(w_bal<acc_bal){
      System.out.println("you have withdraw amount of"+w_bal);
      acc_bal-=w_bal;
      System.out.println("you remaining  amount is"+acc_bal);
      
    }
    else{
      System.out.println("insufficient funds");
    }
  }
}

 


class Bankaccount{
  public static void main(String args[]){
    Account b1=new Account();
    b1.bank();
    b1.deposit();
    b1.withDraw();
  }
}


import java.util.Scanner;
class big
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter a");
      int a=sc.nextInt();
      System.out.println("enter b");
      int b=sc.nextInt();
      if(a>b)
      {
       System.out.println(" a is big"); 
      }
      else 
      {
       System.out.println(" b is big");  
      }
    }
  }
====================================================================================================================================================

//Q. Write a Program to Enter Product Number, Product Name, Product Cost, Product Quantity, calculate Bill Amout and print the report?
import java.util.Scanner;
class bill{
  public static void main(String args[]){
    float pnumber,pcost,pquantity,pbill;
    String pname;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter pnumber");
    pnumber=sc.nextFloat();
    System.out.println("enter pcost");
    pcost=sc.nextFloat();
    System.out.println("enter pquantity");
    pquantity=sc.nextFloat();
    System.out.println("enter pname");
    pname=sc.next();
    pbill=pcost*pquantity;
     System.out.println("the report");
   System.out.println("the bill" +pbill);
    System.out.println("th pname" +pname);
  System.out.println("the pnumber" +pnumber);
  System.out.println("the pquantity" +pquantity);
    System.out.println("the pcost" +pcost);
  }
}
===========================================================================================================================================================
import java.util.Scanner;
class calculator{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("1.addition-2.subraction-3.multiplication-4.division-5.remainder"); 
    System.out.println("enter number one");
    int num1=sc.nextInt();
    System.out.println("enter number two");
    int num2=sc.nextInt();
    System.out.println("enter calulator");
    int cal=sc.nextInt();
    switch(cal){
      case 1:
        int add=num1+num2;
        System.out.println("the addition" +add);
        break;
        case 2:
        int sub=num1-num2;
        System.out.println("the subraction" +sub);
        break;
        case 3:
        int mul=num1*num2;
        System.out.println("the multiplication" +mul);
        break;
        case 4:
        int div=num1/num2;
        System.out.println("the division" +div);
        break;
        case 5:
        int rem=num1%num2;
        System.out.println("the remainder" +rem);
        break;
        default :
        System.out.println("Invalid input");
    }
  }
}

===========================================================================================================================================================



//Create a class that simulates a simple calculator, with methods for addition, subtraction, multiplication, and division.
import java.util.*;
class simplecalculator{
  Scanner sc=new Scanner(System.in);
 int add;
  int sub;
  int mul;
  float div;
  float remainder;
  void display(){
  System.out.println("enter number one");
    int num1=sc.nextInt();
    System.out.println("enter number two");
    int num2=sc.nextInt();
  }
    void add(int num1,int num2)
  {
      int add=num1+num2;
    System.out.println("the addition" +add);
    }
   void sub(int num1,int num2)
  {
      int sub=num1+num2;
    System.out.println("the subraction" +sub);
    }
  void mul(int num1,int num2)
  {
      int mul=num1*num2;
    System.out.println("the multiplication" +mul);
    }
  void rem(int num1,int num2)
  {
      float rem=num1%num2;
    System.out.println("the remainder" +rem);
    }
  void div(int num1,int num2)
  {
      float div=num1/num2;
    System.out.println("the division" +div);
    }
}
class calculator1{
  public static void main(String args[]){
    simplecalculator s=new simplecalculator();
      s.add(10,20);
      s.sub(20,10);
       s.mul(2,3);
      s.div(6,2);
       s.rem(9,3);
  }
}

===========================================================================================================================================================
import java.util.Scanner;
class char1{
  public static void main(String args[]){
    char ch;
    Scanner sc=new Scanner(System.in);
    System.out.println("the value of character");
    ch=sc.next().charAt(3);
    System.out.println("the value of character is " +ch);
  }
}



import java.util.*;
class circlescan{
  public static void main(String args[]){
    float r;
    double area ;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter the radius");
    r=sc.nextFloat();
    area=(3.14*r*r);
    System.out.println("the radius of circle is " +area);
  }
}
____________________________________________________________________________________________________________________________________________________

//Q, Write a Java Program to enter Consumer Number , Consumer Name , Present Month Reading, Last Month Reading,
//Calculate Total units & Electricity bill and print the report. cost per unit is 3.8.
  import java.util.Scanner;
   class current{
     public static void main(String args[]){
       float num,pmr,lmr,cost,ebill,total;
       String name;
       Scanner sc=new Scanner (System.in);
       System.out.println("enter name");
       name=sc.next();
       System.out.println("enter number");
       num=sc.nextFloat();
       System.out.println("enter present month bill");
       pmr=sc.nextFloat();
       System.out.println("enter last month bill");
       lmr=sc.nextFloat();
        System.out.println("enter cost");
      cost=sc.nextFloat();
       total=pmr-lmr;
       ebill=total*cost;
       System.out.println("the name"  +name);
       System.out.println("the number"  +num);
       System.out.println("the present month bill"  +pmr);
       System.out.println("the last month bill"  +lmr);
       System.out.println("the total units"  +total);
       System.out.println("the electricity bill"  +ebill);
       System.out.println("the charge of cost units "  +cost);
     }
   }


//Q, Write a Java Program to enter Consumer Number , Consumer Name , Present Month Reading, Last Month Reading,
//Calculate Total units & Electricity bill and print the report. 

//    1-50          ------->   1.45
//    51-100      ------>     2.56
//    100-200    ------->    3.50
//    200-300   -------->   4.67
//    above 300 -------->  5.67
 
  import java.util.Scanner;
   class current1{
     public static void main(String args[]){
       float num,pmr,lmr,total;
       String name;
       double ebill;
       Scanner sc=new Scanner (System.in);
       System.out.println("enter name");
       name=sc.next();
       System.out.println("enter number");
       num=sc.nextFloat();
       System.out.println("enter present month bill");
       pmr=sc.nextFloat();
       System.out.println("enter last month bill");
       lmr=sc.nextFloat();
       total=pmr-lmr;
       if(total<=50){
      ebill=(total*1.45);
      System.out.println("the electricity bill is :"+ebill);
    }
     else if(total<=100){
      ebill=((50*1.45)+((total-50)*2.56));
      System.out.println("the electricity bill is :"+ebill);
     }
     else if(total<=200)
     {
      ebill=((50*1.45)+(100*2.56)+(total-100)*3.50);
     System.out.println("the electricity bill is :"+ebill);
     }
       else if(total<=300)
     {
      ebill=(50*1.45)+(100*2.56)+(200*3.50)+(total-200)*4.67;
     System.out.println("the electricity bill is :"+ebill);
     }
    else{
      ebill=(50*1.45)+(100*2.56)+(200*3.50)+(300*4.67)+(total-300)*5.67;
      System.out.println("the electricity bill is :"+ebill);
    } 
       System.out.println("the name"  +name);
       System.out.println("the number"  +num);
       System.out.println("the present month bill"  +pmr);
       System.out.println("the last month bill"  +lmr);
       System.out.println("the total units"  +total);
       System.out.println("the electricity bill"  +ebill);
     }
   }
                       
====================================================================================================_______________

import java.util.Scanner;
class employe{
  public static void main(String args[]){
    int a;
    String s;
    double d;
    Scanner sc= new Scanner(System.in);
    System.out.println("enter employee name");
     System.out.println("enter employee salary");
     System.out.println("enter employee id");
    s=sc.next();
    d=sc.nextDouble();
    a=sc.nextInt();
     System.out.println("enter employee name is " +s);
     System.out.println("enter employee salary is " +d);
     System.out.println("enter employee id is " +a);
    System.out.println("the employee name is " + s  + " " +"salary is" +d +" " +"id is" +a);
  }
}


import java.util.Scanner;
class EQUAL {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter a");
    int a = sc.nextInt();
    System.out.println("enter b");
    int b = sc.nextInt();
    System.out.println("enter c");
    int c = sc.nextInt();
    if (a==b) {
      if (a==c)
      {
        System.out.println("all are equal;");
      } else
      {
        System.out.println("not equal to c");
      }
    }
    else
    {
      System.out.println("invalid input");  
    }
  }
}





import java.util.Scanner;
class equal
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter a");
     int  a=sc.nextInt();
      System.out.println("enter b");
     int b=sc.nextInt();
      System.out.println("enter c");
     int c=sc.nextInt();
      if(a==b&&b==c&&c==a)
      {
       System.out.println("all variables are equal");  
      }
      else
      {
       System.out.println("all variables are not equal"); 
      }
    }
  }


import java.util.Scanner;
class even
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter number");
      int num=sc.nextInt();
      if (num%2==0)
      {
       System.out.println("number is even"); 
      }
      else
      {
       System.out.println("number is odd");  
      }
    }
  }


import java.util.Scanner;
class even1
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter number");
      int num=sc.nextInt();
      if (num%2!=0)
      {
       System.out.println("number is odd"); 
      }
      else
      {
       System.out.println("number is even");  
      }
    }
  }

import java.util.Scanner;
class even2
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter number");
      int num=sc.nextInt();
      System.out.println("enter case");
       int case1=sc.nextInt();
      switch(case1){
        case 1:
          if (num%2==0){
            System.out.println("it is even");
          }
          else {
            System.out.println("it is odd");
          }
          break;
        default:
          System.out.println("it is invalid");
          
      }
    }
  }


import java.util.Scanner;
class even3
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter number");
      int num=sc.nextInt();
      System.out.println("enter case");
       int case1=sc.nextInt();
      switch(case1){
        case 1:
          if (num%2==0){
            System.out.println("it is even");
          }
        case 2:
          if (num%2!=0)
        {
            System.out.println("it is odd");
          }
          break;
        default:
          System.out.println("it is invalid");
          
      }
    }
  }
=======================================================================================================================================================
import java.util.Scanner;
class float2{
  public static void main(String args[]){
    Float c;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter float");
    c=sc.nextFloat();
    System.out.println("the enter float  is" +c);
  }
}



// Take 3 subjects as input
 
// find total & average
 
// if  every subject above 40 marks print student pass otherwise fail
 
// if student is pass then allot the grade based on the average
 
//            if  average  below 50 ----> allot C Grade
 
//            if  average  between 51-70  ----> allot B Grade        
 
//            if  average  between 71-80  ----> allot A Grade        
 
//           above 80 you need to print " Student Pass in Distension"
import java.util.Scanner;
class grade
{
  public static void main(String args[])
  {
  float m,p,c,total,avg;
    Scanner sc=new Scanner (System.in);
    System.out.println("enter maths");
    m=sc.nextFloat();
    System.out.println("enter physics");
    p=sc.nextFloat();
    System.out.println("enter chemistry");
    c=sc.nextFloat();
    total=m+p+c;
    avg=(total)/3;
    if (m>=40&&p>=40&&c>=40){
      System.out.println("Student is pass");
     if (avg<50){
        System.out.println("Grade c");
     }
      else if(avg<=51&&avg>=70){
        System.out.println("grade b");
      }
      else if(avg<=71&&avg<=80)
      {
         System.out.println("grade A");
      }
      else
      {
        System.out.println("Student passed in distinction"); 
      }
    }
    else {
      System.out.println("Student is fail");
    }
  }
}


import java.util.Scanner;

class great {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter a");
    int a = sc.nextInt();
    System.out.println("enter b");
    int b = sc.nextInt();
    System.out.println("enter c");
    int c = sc.nextInt();
    if (a > b) {
      if (a > c) {
        System.out.println(" a is big");
      } else {
        System.out.println(" c is big");
      }
    } else {
      if (b > c) {
        System.out.println(" b is big");
      } else {
        System.out.println(" c is big");
      }
    }
  }
}
===========================================================================================================================================================
import java.util.Scanner;
class if1
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter a");
      int a=sc.nextInt();
      System.out.println("enter b");
      int b=sc.nextInt();
      if(a>b)
      {
       System.out.println(" a is big"); 
      }
    }
  }

===========================================================================================================================================================
import java.util.Scanner;
class leap
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter year");
      int year=sc.nextInt();
      if ((year%4==0)&&(year%100!=0)||(year%400==0))
      {
        System.out.println("it is a leap year");
      }
      else
      {
        System.out.println("it is not a leap year");
      }
    }
  }

===========================================================================================================================================================
// This program takes the day of the week and the current time as input and uses nested if statements to check if the library is open. If the day is not Saturday or Sunday and the current time is between 9:00 AM and 8:00 PM, it will print "The library is open." Otherwise, it will print "The library is closed."
// inputs:
//         ----> day: Monday
//        ----> Time: 11:00
// output:
//            Library is open 
          
// inputs:
//         ----> day: Sunday
//        ----> Time: 11:00AM
 
// output:
//            Library is Closed

import java.util.Scanner;
class library{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter week day");
    int day=sc.nextInt();
     System.out.println("enter TIME");
    int time=sc.nextInt();
   if(time>=9&&time<=21){
    if(day==1){
      System.out.println("it is sunday");
       System.out.println("library is closed");
    }
   else if(day==2){
      System.out.println("it is monday");
      System.out.println("library is open from 9.00am to 8.00pm");
    }
     else if(day==3){
      System.out.println("it is tuesday");
        System.out.println("library is open from 9.00am to 8.00pm");
    }
     else if(day==4){
      System.out.println("it is wednesday");
        System.out.println("library is open from 9.00am to 8.00pm");
    }
     else if(day==5){
      System.out.println("it is thursday");
        System.out.println("library is open from 9.00am to 8.00pm");
    }
     else if(day==6){
      System.out.println("it is friday");
        System.out.println("library is open from 9.00am to 8.00pm");
    }
     else if(day==7){
      System.out.println("it is saturday");
        System.out.println("library is closed");
    }
    else{
       System.out.println("It is not the right time & day to enter in library");
    }
  }
}
}
=================================================================================
import java.util.Scanner;

public class GreatestValue {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter three numbers: ");
        double a = scanner.nextDouble();
        double b = scanner.nextDouble();
        double c = scanner.nextDouble();

        double greatestValue = a;

        if (b > greatestValue) {
            greatestValue = b;
        }

        if (c > greatestValue) {
            greatestValue = c;
        }

        System.out.println("The greatest value is: " + greatestValue);
    }
}

====================================================================================================


import java.util.Scanner;
class max{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a,b,c");
    int a=sc.nextInt();
    int b=sc.nextInt();
    int c=sc.nextInt();
    if (a>b){
      System.out.println("a is big");
    }
    if(b>c){
     System.out.println("b is big"); 
    }
    if(c>a){
     System.out.println("c is big"); 
    }
  }
}


//Create a program that uses a switch case statement to determine the number of days in a month based on the month number.


import java.util.Scanner;
class month{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter day number");
    int day=sc.nextInt();
    System.out.println("enter choice");
    int choice=sc.nextInt();
    switch(choice){
      case 1:
        if (day==31){
        System.out.println("it is january");
           System.out.println("it is march");
           System.out.println("it is may");
         System.out.println("it is july");
          System.out.println("it is august");
           System.out.println("it is october");
           System.out.println("it is december");  
        }
        break;
        case 2:
        if (day==28){
        System.out.println("it is february");
        }
        break;
        case 3:
         if (day==30){
        System.out.println("it is april");
        System.out.println("it is june");
        System.out.println("it is september");
         System.out.println("it is november ");
        }
        break;
        default :
          System.out.println("invalid month");
    }
  }
}

import java.util.*;
class periscan{
  public static void main(String args[]){
    float r;
    double peri ;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter the radius");
    r=sc.nextFloat();
    peri=(3.14*2*r);
    System.out.println("the perimeter of circle is " +peri);
  }
}


import java.util.*;
class positive
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter number");
      int num=sc.nextInt();
      if (num>0)
      {
       System.out.println("number is positive"); 
      }
      else
      {
       System.out.println("number is negative");  
      }
    }
  }


import java.util.Scanner;
class scan{
  public static void main(String args[]){
    int a,b;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter the integer a");
    a=sc.nextInt();
      System.out.println("enter the integer b");
    b=sc.nextInt();
    System.out.println("the integer value1 " +a);
    System.out.println("the integer value2 " +b);
    System.out.println("the addition integer values " +a+ "and" +b+ "is" +"  " +(a+b));
  }
}


import java.util.Scanner;
class seasons{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter season");
    int season=sc.nextInt();
    switch(season){
      case 3:
      case 4:
      case 5:
      case 6:
        System.out.println("it is summer season");
        break;
        case 7:
      case 8:
      case 9:
      case 10:
        System.out.println("it is rainy season");
        break;
        case 11:
      case 12:
      case 1:
      case 2:
        System.out.println("it is winter season");
        break;

      default :
       System.out.println("it is default season"); 
    }
  }
}





//Create a program that uses a switch case statement to determine the area of a shape based on the shape's name in JAVA.
import java.util.*;
class area1{
void shape1(){
  int l,b;
  double area;
  Scanner sc=new Scanner(System.in);
  System.out.println("enter shape");
  String shape=sc.next();
   System.out.println("enter length");
   l=sc.nextInt();
   System.out.println("enter  breadth");
   b=sc.nextInt();
  System.out.println("enter radius");
  float r=sc.nextFloat();
  System.out.println("enter  side");
  int  s=sc.nextInt();
  
switch(shape){
  case "rectangle":  
   area=(l*b);
    System.out.println("the rectangle area is" +area);
   break;
  case "square":
   area=(s*s);
    System.out.println("the square area is" +area);
   break ;
  case "triangle":
   area=(0.5*l*b);
    System.out.println("the triangle area is" +area);
   break;
  case "circle":
   area=(3.14*r*r);
    System.out.println("the circle area is" +area);
   break;
  default:
    System.out.println("invalid input");
}
}
}
class shape{
  public static void main(String args[]){
    area1 a=new area1();
    a.shape1();
  }
}


import java.util.Scanner;
class si{
  public static void main(String args[]){
    float p,t,r,si,totalamount,ci;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter p");
    p=sc.nextFloat();
    System.out.println("enter t");
    t=sc.nextFloat();
    System.out.println("enter r");
    r=sc.nextFloat();
    si=(p*t*r)/(100);
    totalamount=p+si;
    ci=p-si;
     System.out.println(si);
     System.out.println(totalamount);
    System.out.println(ci);
  }
}


import java.util.Scanner;
class simple{
  public static void main(String args[]){
    int a=101;
    String s="karun";
    float f=465.45f;
    System.out.println("The given employee number is  " +a);
    System.out.println("The given employee name is   " +s);
    System.out.println("The given employee salary is   " +f);
  }
}


import java.util.*;
class special{
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter the character");
   char ch=sc.next().charAt(0);
     if((ch>='a')&&(ch<='z'))
       System.out.println("enter it is a alphabet");
    else if((ch>='0')&&(ch<='9'))
       System.out.println("enter it is a number");
    else
      System.out.println("enter it is a special character");
  }
}
     

import java.util.Scanner;
class string1{
  public static void main(String args[]){
    String c;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter string");
    c=sc.next();
    System.out.println("the enter string is" +c);
  }
}


//Q. Write a Java Program to Enter Student Number, Student Name, Any 3 Subject of Marks, Calculate Total and Average of the Student, and print the report?
import java.util.Scanner;
class average{
  public static void main(String args[]){
    float snum,m,p,c,total,avg;
    String sname;
    Scanner sc=new Scanner (System.in);
    System.out.println("enter name");
    sname=sc.next();
    System.out.println("enter number");
    snum=sc.nextFloat();
    System.out.println("enter maths");
    m=sc.nextFloat();
    System.out.println("enter physics");
    p=sc.nextFloat();
    System.out.println("enter chemistry");
    c=sc.nextFloat();
    total=m+p+c;
    avg=(total)/3;
    System.out.println("the student report");
    System.out.println("the name" +sname);
    System.out.println("the number" +snum);
    System.out.println("the maths subjects" +m);
    System.out.println("the physics subjects" +p);
    System.out.println("the chemistry subjects" +c);
    System.out.println("the total" +total);
    System.out.println("the average" +avg); 
     if (m>=40&&p>=40&&c>=40){
      System.out.println("Student is pass");
     if (avg<50){
        System.out.println("Grade c");
     }
      else if(avg<=51&&avg>=70){
        System.out.println("grade b");
      }
      else if(avg<=71&&avg<=80)
      {
         System.out.println("grade A");
      }
      else
      {
        System.out.println("Student passed in distinction"); 
      }
    }
    else {
      System.out.println("Student is fail");
    }
  }
}


import java.util.Scanner;
class swap1{
  public static void main(String args[]){
    int a,b,temp;
      Scanner sc=new Scanner(System.in);
      System.out.println("Enters the value a");
     a=sc.nextInt();
     System.out.println("Enters the value b");
     b=sc.nextInt();
          System.out.println(" the value a before swapping" +a);
          System.out.println("the value b before swapping " +b);
           temp=a;
           a=b;
           b=temp;
     System.out.println(" the value a after swapping" +a);
          System.out.println("the value b after swapping " +b);
  }
}


import java.util.Scanner;
class swap2{
  public static void main(String args[]){
    int a,b;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a");
    a=sc.nextInt();
    System.out.println("enter b");
    b=sc.nextInt();
    System.out.println("the value  a before swaping" +a);
    System.out.println("the value of b before swaping" +b);
    a=a+b;
    b=a-b;
    a=a-b;
     System.out.println("the value  a after swaping" +a);
    System.out.println("the value of b after swaping" +b);
  }
}


//Create a program that converts Fahrenheit to Celsius using the formula (C = (F - 32) * 5/9).
 
// Ask the user to input a temperature in Fahrenheit.
// Declare a double variable to store the Fahrenheit value.
// Use the variable to calculate the equivalent temperature in Celsius and store the result in a double variable.
// Print the result.
import java.util.Scanner;
class temp{
  public static void main(String args[]){
    double f,C;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter fahrenheit temperature");
    f=sc.nextDouble();
    C = (f - 32) * 5/9;
    System.out.println("the celcius is" +C);
     System.out.println("the result temperatures");
     System.out.println("the celcius temperature is" +C);
     System.out.println("the fahrenheit temperature is " +f);
  }
}



// Write a program that takes a temperature as input and prints out whether it is above or below freezing, as well as whether it is above or below boiling,
// using nested if statements.

import java.util.Scanner;
class arrayu{
  public static void main(String args[]){
    Scanner sc=new Scanner (System.in); 
    System.out.println("enter temperature");
   float t=sc.nextFloat();
    if(t>=100){
      System.out.println("it is boiling");
    }
    else if(t<=0){
      System.out.println("it is cooling");
    }
    else if((t<=100)&&(t>=0)){
      System.out.println("it is moderate");
    }
    else{
    System.out.println("it is invalid");
    }
     }
     }

============================================================================================================================================================

import java.util.Scanner;
class vote
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter age");
      int age=sc.nextInt();
      if (age>18)
      {
       System.out.println("he/she is eligible"); 
      }
      else
      {
       System.out.println("he/she is not eligible");  
      }
    }
  }

import java.util.Scanner;
class vowels
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter any character");
      char ch=sc.next().charAt(0);
      if (ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U')
      {
       System.out.println("IT IS VOWEL"); 
      }
      else
      {
       System.out.println("IT IS CONSONANT");  
      }
    }
  }




import java.util.Scanner;
class vowels1{
  public static void main(String args[]){
   char ch;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a character");
    ch=sc.next().charAt(0);
    if(ch=='a'||ch=='A')
    {
      System.out.println("it is Vowels");
    }
    else if(ch=='e'||ch=='E')
    {
      System.out.println("it is Vowels");
    }
     else if(ch=='i'||ch=='I')
    {
      System.out.println("it is Vowels");
    }
     else if(ch=='o'||ch=='O')
    {
      System.out.println("it is Vowels");
    }
      else if(ch=='u'||ch=='U')
    {
      System.out.println("it is Vowels");
    }
    else
    {
      System.out.println("it is a consonant "); 
    }
  }
}




import java.util.Scanner;
class vowels2{
  public static void main(String args[]){
   char ch;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a character");
    ch=sc.next().charAt(0);
    switch(ch){
      case 'a': case 'A':
       case 'e': case 'E':
     case 'i': case 'I':
     case 'o': case 'O':
     case 'u': case 'U':
        System.out.println("it is an vowels");
        break;
        default :
        System.out.println("it is an consonant");
    }
  }
}





import java.util.Scanner;
class week{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter week day");
    int day=sc.nextInt();
    if(day==1){
      System.out.println("it is sunday");
    }
   else if(day==2){
      System.out.println("it is monday");
    }
     else if(day==3){
      System.out.println("it is tuesday");
    }
     else if(day==4){
      System.out.println("it is wednesday");
    }
     else if(day==5){
      System.out.println("it is thursday");
    }
     else if(day==6){
      System.out.println("it is friday");
    }
     else if(day==7){
      System.out.println("it is saturday");
    }
    else{
       System.out.println("it is invalid input");
    }
  }
}




import java.util.Scanner;
class week1{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter day number");
    int day=sc.nextInt();
    switch(day){
      case 1:
        System.out.println("it is sunday");
        break;
        case 2:
        System.out.println("it is monday");
        break;
        case 4:
        System.out.println("it is tuesday");
        break;
        case 5:
        System.out.println("it is wednesday");
        break;
        case 6:
        System.out.println("it is thursday");
        break;
        case 7:
        System.out.println("it is friday");
        break;
        case 8:
        System.out.println("it is saturday");
        break;
        default :
          System.out.println("invalid day");
    }
  }
}





// Create a program that prompts the user for a day of the week, and then prints out whether it is a weekday or a weekend using conditional statements.
import java.util.Scanner;
class days{
  String day;
  Scanner sc=new Scanner(System.in);
  void mon(String day){
   day=sc.next();
    System.out.println("it is week day" +" "+day);
  }
  void tues(String day){
   day=sc.next();
    System.out.println("it is week day"  +" "+day);
  }
  void wed(String day){
   day=sc.next();
    System.out.println("it is week day" +" "+day);
  }
  void thur(String day){
   day=sc.next();
    System.out.println("it is week day" +" " +day);
  }
  void fri(String day){
   day=sc.next();
    System.out.println("it is week day" +" "+day);
  }
  void sat(String day){
   day=sc.next();
    System.out.println("it is weekend day" +" "+day);
  }
  void sun(String day){
   day=sc.next();
    System.out.println("it is weekend day" +" "+day);
  }
}
class week2{
  public static void main(String args[]){
    days d=new days();
    
    d.mon("monday");
    d.tues("tuesday");
    d.wed("wednesday");
    d.thur("thursday");
    d.fri("friday");
    d.sat("saturday");
    d.sun("sunday");  
  }
}


import java.util.Scanner;
class week1{
    Scanner sc=new Scanner(System.in);
    void day(){
    System.out.println("enter day number");
    int day=sc.nextInt();
    switch(day){
      case 1:
         System.out.println("the weekend day is sunday");
        System.out.println("the weekend day is saturday");
        break;
        case 2:
        System.out.println("it is weekday monday");
         System.out.println("it is weekday tuesday");
        System.out.println("it is weekday wednesday");
         System.out.println("it is weekday thursday");
         System.out.println("it is weekday friday");
        break;
        default :
          System.out.println("invalid day");
    }
  }
}
  class week3{
    public static void main(String args[])
    {
      week1 w=new week1();
      w.day();
    }
  }
____________________________________________________________________________________________________________________________________________________________






// Create a program that prompts the user for a day of the week, and then prints out whether it is a weekday or a weekend using conditional statements.
import java.util.Scanner;
class days{
  String day;
  Scanner sc=new Scanner(System.in);
  void display(){
     System.out.println("enter week day");
  day=sc.next();
     switch(day){
      case "monday":
        System.out.println("weekday it is monday");
        break;
        case "tuesday":
        System.out.println("weeekday it is tuesday");
        break;
        case "wednesday":
        System.out.println("weeekdayit is wednesday");
        break;
        case "thursday":
        System.out.println("weeekdayit is thursday");
        break;
        case "friday":
        System.out.println("weeekday it is friday");
        break;
        case "saturday":
        System.out.println("week end it is saturday");
        break;
        case "sunday":
        System.out.println("week end it is sunday");
        break;
        default :
          System.out.println("invalid day");
    }
  }
}
class week4{
  public static void main(String args[])
  {
    days d=new days();
    d.display();
   
  }
}





import java.util.Scanner;
class add{
  int a,b,c;
  void addition()
  {
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a");
    a=sc.nextInt();
     System.out.println("enter b");
    b=sc.nextInt();
    c=a+b;
     System.out.println("the addition is" +c);
  }
}
class calculate{
  public static void main(String args[]){
    sum s=new sum();
    s.addition();
  }
}



// Create a program that calculates the area of a circle using the formula (pi * radius^2).
 
// Declare a constant double variable for pi with the value of 3.14.
// Ask the user to input the radius of the circle.
// Declare a double variable to store the radius value.
// Use the variable and the constant to calculate the area of the circle and store the result in a double variable.
// Print the result.
import java.util.Scanner;
class Sphere{
  double area;
  void area12(double r)
  {
    area =3.14*r*r;
    System.out.println(area);
  }
}                     
class circle{
  public static void main(String args[]){
    double r;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter radius r");
    r=sc.nextDouble();
   Sphere s=new Sphere();
    s.area12(r);
  }
}

____________________________________________________________________________________________________________________________________________________________


//with no parameter with no arguments
import java.util.Scanner;
class Sphere{
  double area,r;
  void area12()
  {
    Scanner sc=new Scanner(System.in);
    System.out.println("enter radius r");
    r=sc.nextDouble();
    area =3.14*r*r;
    System.out.println(area);
  }
}
class circle1{
  public static void main(String args[]){
   Sphere s=new Sphere();
    s.area12();
  }
}

oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo

// Q, Write a Java Program to enter Consumer Number , Consumer Name , Present Month Reading, Last Month Reading,
// Calculate Total units & Electricity bill and print the report.
// Note: Cost per unit is 3.80
 
// int cno,pmr,lmr,tu;
// String cname;
// float cbill;
 
 
// tu=pmr-lmr;
// cbill=tu*3.80;
 
// cno
// cname
// pmr
// lmr
// tu
// cbill


 import java.util.Scanner;
   class current1{
       float num,pmr,lmr,cost,ebill,total;
       String name;
      Scanner sc=new Scanner (System.in);
     void display(){
       System.out.println("enter name");
       name=sc.next();
       System.out.println("enter number");
       num=sc.nextFloat();
       System.out.println("enter present month bill");
       pmr=sc.nextFloat();
       System.out.println("enter last month bill");
       lmr=sc.nextFloat();
        System.out.println("enter cost");
      cost=sc.nextFloat();
       total=pmr-lmr;
       ebill=total*cost;
       System.out.println("the name"  +name);
       System.out.println("the number"  +num);
       System.out.println("the present month bill"  +pmr);
       System.out.println("the last month bill"  +lmr);
       System.out.println("the total units"  +total);
       System.out.println("the electricity bill"  +ebill);
       System.out.println("the charge of cost units "  +cost);
     }
   }
class current{
public static void main(String args[]){
  current1 c=new current1();
    c.display();
}
}


____________________________________________________________________________________________________________________________________________________________

//with  arguments and with no parameter

// Q, Write a Java Program to enter Consumer Number , Consumer Name , Present Month Reading, Last Month Reading,
// Calculate Total units & Electricity bill and print the report.
// Note: Cost per unit is 3.80
 
// int cno,pmr,lmr,tu;
// String cname;
// float cbill;
 
 
// tu=pmr-lmr;
// cbill=tu*3.80;
 
// cno
// cname
// pmr
// lmr
// tu
// cbill


 import java.util.Scanner;
   class current{
       float total,ebill;
       String name;
     void display(String name,float num,float pmr,float lmr,float cost,float ebill,float total)
     {
       total=pmr-lmr;
       ebill=total*cost;
       System.out.println("the name"  +name);
       System.out.println("the number"  +num);
       System.out.println("the present month bill"  +pmr);
       System.out.println("the last month bill"  +lmr);
       System.out.println("the total units"  +total);
       System.out.println("the electricity bill"  +ebill);
       System.out.println("the charge of cost units "  +cost);
     }
   }

class current1{
public static void main(String args[]){
  float num,pmr,lmr,cost,ebill,total;
       String name;
   Scanner sc=new Scanner (System.in);
   System.out.println("enter name");
       name=sc.next();
       System.out.println("enter number");
       num=sc.nextFloat();
       System.out.println("enter present month bill");
       pmr=sc.nextFloat();
       System.out.println("enter last month bill");
       lmr=sc.nextFloat();
        System.out.println("enter cost");
      cost=sc.nextFloat();

       ebill=sc.nextFloat();
  
       total=sc.nextFloat();
  current c=new current();
    c.display(name,num,pmr,lmr,cost,ebill,total);
}
}


// with  arguments and with no parameter
//write employee name and employee detaills,salary
import java.util.Scanner;
class employe{
   int a;
    String s;
    double d;
   
  void display(int a,String s,double d){
     System.out.println("enter employee name is " +s);
     System.out.println("enter employee salary is " +d);
     System.out.println("enter employee id is " +a);
    System.out.println("the employee name is " +s  +" " +"salary is" +d +" " +"id is" +a);
  }
  }
class employe1{
  public static void main(String args[]){
    int a;
    String s;
    double d;
     Scanner sc= new Scanner(System.in);
     System.out.println("enter employee name");
     System.out.println("enter employee salary");
     System.out.println("enter employee id");
    s=sc.next();
    d=sc.nextDouble();
    a=sc.nextInt();
    employe e=new employe();
    e.display(a,s,d);
  }
}





// with no arguments and with no parameter
//write employee name and employee detaills,salary
import java.util.Scanner;
class employe{
   int a;
    String s;
    double d;
    Scanner sc= new Scanner(System.in);
  void display(){
    System.out.println("enter employee name");
     System.out.println("enter employee salary");
     System.out.println("enter employee id");
    s=sc.next();
    d=sc.nextDouble();
    a=sc.nextInt();
     System.out.println("enter employee name is " +s);
     System.out.println("enter employee salary is " +d);
     System.out.println("enter employee id is " +a);
    System.out.println("the employee name is " +s  +" " +"salary is" +d +" " +"id is" +a);
  }
}
class employee{
  public static void main(String args[]){
    employe e=new employe();
    e.display();
  }
}






//sum  of a,b with arguments and no parameters
import java.util.Scanner;
class practice12{
  int c;
  void display(int a,int b){
    c=a+b;
    System.out.println(c);
  }
}
class practice{
  public static void main(String args[]){
    int a,b;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a,b");
    a=sc.nextInt();
    b=sc.nextInt();
    practice12 p=new practice12();
    p.display(a,b);
  }
}




import java.util.Scanner;
class peri{
  double peri;
  void display(double pi,double r){
    peri =2*pi*r;
    System.out.println("the perimeter of circle " +peri);
  }
}
class pericir{
  public static void main(String args[]){
    double peri,pi,r;
    Scanner sc=new Scanner(System.in);
    System.out.println("the pi value of circle");
    pi=sc.nextDouble();
        System.out.println("the r value of circle");
    r=sc.nextDouble();
    peri p=new peri();
    p.display(pi,r);
  }
}




 // with no arguements and with no parameter find the perimeter of circle
import java.util.Scanner;
class peri1{
  double pi,r,peri;
   Scanner sc=new Scanner(System.in);
  void display()
  {
   System.out.println("enter pi");
    pi=sc.nextDouble();
    System.out.println("enter r");
    r=sc.nextDouble();
    peri=2*pi*r;
    System.out.println(peri);
  }
}
class pericir{
  public static void main(String args[]){
    peri1 p=new peri1();
    p.display();
  }
}






// with no arguments and no parameter
// Q. Write a Program to Enter Product Number, Product Name, Product Cost, Product Quantity, calculate Bill Amout and print the report?

import java.util.Scanner;
class bill{
    float pnumber,pcost,pquantity,pbill;
    String pname;
    Scanner sc=new Scanner(System.in);
  void display(){
   System.out.println("enter pnumber");
    pnumber=sc.nextFloat();
    System.out.println("enter pcost");
    pcost=sc.nextFloat();
    System.out.println("enter pquantity");
    pquantity=sc.nextFloat();
    System.out.println("enter pname");
    pname=sc.next(); 
    pbill=pcost*pquantity;
     System.out.println("the report");
   System.out.println("the bill" +pbill);
    System.out.println("th pname" +pname);
  System.out.println("the pnumber" +pnumber);
  System.out.println("the pquantity" +pquantity);
    System.out.println("the pcost" +pcost);
  }
}
class product{
  public static void main(String args[]){
  bill b=new bill();
    b.display();
  
}
}


// with  arguments and no parameter
// Q. Write a Program to Enter Product Number, Product Name, Product Cost, Product Quantity, calculate Bill Amout and print the report?

import java.util.Scanner;
class bill{
    float pnumber,pcost,pquantity,pbill;
    String pname; 
  void display(float pcost,float pquantity)
  {
    pbill=pcost*pquantity;
     System.out.println("the report");
   System.out.println("the bill" +pbill);
    System.out.println("th pname" +pname);
  System.out.println("the pnumber" +pnumber);
  System.out.println("the pquantity" +pquantity);
    System.out.println("the pcost" +pcost);
  }
}
class product1{
  public static void main(String args[]){
    float pnumber,pcost,pquantity,pbill;
    String pname;
     Scanner sc=new Scanner(System.in);
    System.out.println("enter pnumber");
    pnumber=sc.nextFloat();
    System.out.println("enter pcost");
    pcost=sc.nextFloat();
    System.out.println("enter pquantity");
    pquantity=sc.nextFloat();
    System.out.println("enter pname");
    pname=sc.next();
  bill b=new bill();
    b.display(pcost,pquantity);
}
}




//with no arguements and with no parameter
import java.util.Scanner;
class rec{
  double l,b,area,peri;
   Scanner sc=new Scanner(System.in);
  void display()
  {
    System.out.println("enter l and b");
    l=sc.nextDouble();
    b=sc.nextDouble();
    area =l*b;
    System.out.println(area);
  }
   void display1()
  {
    System.out.println("enter l and b");
    l=sc.nextDouble();
    b=sc.nextDouble();
    peri =2*(l+b);
    System.out.println(peri);
  }
}
class rect1{
  public static void main(String args[]){
    rec r=new rec();
    r.display();
    r.display1();
  }
}




import java.util.Scanner;
class rect{
  double area;
  double peri;
  void area12(double l,double b)
  {
    area=l*b;
    System.out.println("the area of rectangle" +area);
  }
   void peri12(double l,double b)
  {
    peri=2*(l+b);
    System.out.println("the perimeter of rectangle" +peri);
  }
}
class rectangle{
  public static void main(String args[]){
    double l,b;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter l,b");
    l=sc.nextDouble();
    b=sc.nextDouble();
    rect r=new rect();
    r.area12(l,b);
    r.peri12(l,b);
  }
}




//write the si,total amount,ci
// with  argumuments and with no parameter 
import java.util.Scanner;
class si1{
  float si,p,t,r,totalamount,ci;
  Scanner sc=new Scanner(System.in);
  void display(){
   System.out.println("enter p");
    p=sc.nextFloat();
    System.out.println("enter t");
    t=sc.nextFloat();
    System.out.println("enter r");
    r=sc.nextFloat();
    si=(p*t*r)/(100);
    totalamount=p+si;
    ci=p-si;
     System.out.println(si);
     System.out.println(totalamount);
    System.out.println(ci); 
  }
}
class si{
  public static void main(String args[]){
    si1 s=new si1();
    s.display();
  }
}




//write the si,total amount,ci
// with  argumuments and with no parameter 
import java.util.Scanner;
class si6{
  float si,totalamount,ci;
  
  void display(float p,float t,float r){
    si=(p*t*r)/(100);
    totalamount=p+si;
    ci=p-si;
     System.out.println(si);
     System.out.println(totalamount);
    System.out.println(ci); 
  }
}
class si1{
  public static void main(String args[]){
     float si,p,t,r,totalamount,ci;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter p");
    p=sc.nextFloat();
    System.out.println("enter t");
    t=sc.nextFloat();
    System.out.println("enter r");
    r=sc.nextFloat();
    si6 s=new si6();
    s.display(p,t,r);
  }
}



    /* write  a prgram to print student number and student names and 3 subject marks and calculate total and average print an report*/
    //with no arguments and no return type


import java.util.Scanner;
class Student1{

      Scanner sc=new Scanner(System.in);
    String name;
    Double num,m,p,c,avg,total;
    void display(){
      System.out.println("enter stucent name,number,m,p,c");
      name=sc.next();
      num =sc.nextDouble();
      m=sc.nextDouble();
      p=sc.nextDouble();
      c=sc.nextDouble();
      total=m+p+c;
      avg=(total)/3;
      System.out.println("the student report");
    System.out.println("the name" +name);
    System.out.println("the number" +num);
    System.out.println("the maths subjects" +m);
    System.out.println("the physics subjects" +p);
    System.out.println("the chemistry subjects" +c);
    System.out.println("the total" +total);
    System.out.println("the average" +avg);      
    }
}

class student{
  public static void main(String args[]){
    Student1 s=new Student1();
    s.display();
  }
}




/* write  a prgram to print student number and student names and 3 subject marks and calculate total and average print an report*/
    //with  arguments and no return type


import java.util.Scanner;
class Student1{
    Double avg,total;
    void display(String name, Double num,Double m,Double p,Double c){
      total=m+p+c;
      avg=(total)/3;
      System.out.println("the student report");
    System.out.println("the name" +name);
    System.out.println("the number" +num);
    System.out.println("the maths subjects" +m);
    System.out.println("the physics subjects" +p);
    System.out.println("the chemistry subjects" +c);
    System.out.println("the total" +total);
    System.out.println("the average" +avg);      
    }
}

class student1{
  public static void main(String args[]){
     String name;
    Double num,m,p,c,avg,total;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter student name,number,m,p,c");
      name=sc.next();
      num =sc.nextDouble();
      m=sc.nextDouble();
      p=sc.nextDouble();
      c=sc.nextDouble();
    Student1 s=new Student1();
    s.display(name,num,m,p,c);
  }
}





// with no arguments and with no parameters
// Q.  Write a Program for Swapping of Two number?
 
//        int a=10,b=20,t;
 
//            t=a;
//            a=b; 
//            b=t;
 
  
// Before Swapping:
// a=10
// b=20
// After Swapping:
// a=20
// b=10
  

import java.util.Scanner;
class swap1{
    int a,b,temp;
      Scanner sc=new Scanner(System.in);
  void display()
  {
      System.out.println("Enters the value a");
     a=sc.nextInt();
     System.out.println("Enters the value b");
     b=sc.nextInt();
          System.out.println(" the value a before swapping" +a);
          System.out.println("the value b before swapping " +b);
           temp=a;
           a=b;
           b=temp;
     System.out.println(" the value a after swapping" +a);
          System.out.println("the value b after swapping " +b);
  }
}   
class swap{
  public static void main(String args[]){
    swap1 s=new swap1();
    s.display();
  }
}





// with  arguments and with no parameters
// Q.  Write a Program for Swapping of Two number?
 
//        int a=10,b=20,t;
 
//            t=a;
//            a=b; 
//            b=t;
 
  
// Before Swapping:
// a=10
// b=20
// After Swapping:
// a=20
// b=10
  

import java.util.Scanner;
class swap{
    int a,b,temp;    
  void display(int a,int b)
  {
      
          System.out.println(" the value a before swapping" +a);
          System.out.println("the value b before swapping " +b);
           temp=a;
           a=b;
           b=temp;
     System.out.println(" the value a after swapping" +a);
          System.out.println("the value b after swapping " +b);
  }
}   
class swap1{
  public static void main(String args[])
  {
     int a,b,temp;
      Scanner sc=new Scanner(System.in);
    System.out.println("Enters the value a");
     a=sc.nextInt();
     System.out.println("Enters the value b");
     b=sc.nextInt();
    swap s=new swap();
    s.display(a,b);
  }
}





// with no arguments and with no parameters
// Q.  Write a Program for Swapping of Two number?
 
//        int a=10,b=20,t;
 
//            t=a;
//            a=b; 
//            b=t;
 
  
// Before Swapping:
// a=10
// b=20
// After Swapping:
// a=20
// b=10
  

import java.util.Scanner;
class swap1{
    int a,b,temp;
      Scanner sc=new Scanner(System.in);
  void display()
  {
      System.out.println("Enters the value a");
     a=sc.nextInt();
     System.out.println("Enters the value b");
     b=sc.nextInt();
          System.out.println(" the value a before swapping" +a);
          System.out.println("the value b before swapping " +b);
          a=a+b;
          b=a-b;
           a=a-b;
     System.out.println(" the value a after swapping " +a);
          System.out.println("the value b after swapping " +b);
  }
}   
class swap2{
  public static void main(String args[]){
    swap1 s=new swap1();
    s.display();
  }
}




// with  arguments and with no parameters
// Q.  Write a Program for Swapping of Two number?
 
//        int a=10,b=20,t;
 
//            t=a;
//            a=b; 
//            b=t;
 
  
// Before Swapping:
// a=10
// b=20
// After Swapping:
// a=20
// b=10
  

import java.util.Scanner;
class swap{
    int a,b,temp;    
  void display(int a,int b)
  {
      
          System.out.println(" the value a before swapping" +a);
          System.out.println("the value b before swapping " +b);
          a=a+b;
          b=a-b;
           a=a-b;
     System.out.println(" the value a after swapping" +a);
          System.out.println("the value b after swapping " +b);
  }
}   
class swap3{
  public static void main(String args[])
  {
     int a,b,temp;
      Scanner sc=new Scanner(System.in);
    System.out.println("Enters the value a");
     a=sc.nextInt();
     System.out.println("Enters the value b");
     b=sc.nextInt();
    swap s=new swap();
    s.display(a,b);
  }
}



//with no argument and with no parameter 
// Create a program that converts Fahrenheit to Celsius using the formula (C = (F - 32) * 5/9).
 
// Ask the user to input a temperature in Fahrenheit.
// Declare a double variable to store the Fahrenheit value.
// Use the variable to calculate the equivalent temperature in Celsius and store the result in a double variable.
// Print the result.


import java.util.Scanner;
class temp1{
    double f,C;
    Scanner sc=new Scanner(System.in);
    void display(){
    System.out.println("enter fahrenheit temperature");
    f=sc.nextDouble();
    C = (f - 32) * 5/9;
    System.out.println("the celcius is" +C);
     System.out.println("the result temperatures");
     System.out.println("the celcius temperature is" +C);
     System.out.println("the fahrenheit temperature is " +f);
  }
}
class temp{
   public static void main(String args[]){
     temp1 t=new temp1();
     t.display();
   }
}





//with  argument and with no parameter 
// Create a program that converts Fahrenheit to Celsius using the formula (C = (F - 32) * 5/9).
 
// Ask the user to input a temperature in Fahrenheit.
// Declare a double variable to store the Fahrenheit value.
// Use the variable to calculate the equivalent temperature in Celsius and store the result in a double variable.
// Print the result.


import java.util.Scanner;
class temp{
     double f,C;
    void display(double f){
    C = (f - 32) * 5/9;
    System.out.println("the celcius is" +C);
     System.out.println("the result temperatures");
     System.out.println("the celcius temperature is" +C);
     System.out.println("the fahrenheit temperature is " +f);
  }
}
class temp1{
   public static void main(String args[]){
     double f,C;
    Scanner sc=new Scanner(System.in);
      System.out.println("enter fahrenheit temperature");
    f=sc.nextDouble();
     temp t=new temp();
     t.display(f);
   }
}

====================================================================================================================


Method Defintion or Called Method
---------------------------------------------
syntax: 
int int a,int b
return_type method_name(args_list)
{

// method_body
return 10;
}
---------> Its Accepts the only Data
---------> It Returns the data
Calling Method
-------------------
syntax:
int x=23,y=54,z;
x,y
z=obj_name.method_name(args_list);
System.out.print(obj_name.method_name(args_list));


import java.util.Scanner;
class Addition 
{
int a,b,c;
Scanner sc=new Scanner(System.in);
void add()
{
System.out.println("Enter a,b values:");
a=sc.nextInt();
b=sc.nextInt();
c=a+b;
System.out.println("The Adddition value is:"+c);
}
}
class Calcualte
{
public static void main(String args[]) 
{
Addition a1=new Addition();
a1.add();

}
}

______________________________________________________________________________________________________________________________________________
import java.util.Scanner;
class Addition 
{
int c;
void add(int a,int b)
{
c=a+b;
System.out.println("The Adddition value is:"+c);
}
}
class Calcualte
{
public static void main(String args[]) 
{
int x,y;
Scanner sc=new Scanner(System.in);
System.out.println("Enter a,b values:");
x=sc.nextInt();
y=sc.nextInt();
Addition a1=new Addition();
a1.add(x,y);

}
}

______________________________________________________________________________________________________________________________________________





import java.util.Scanner;
class Addition 
{
int c;
int add(int a,int b)
{
c=a+b;
return c;
}
}
class Calcualte
{
public static void main(String args[]) 
{
int x,y,z;
Scanner sc=new Scanner(System.in);
System.out.println("Enter a,b values:");
x=sc.nextInt();
y=sc.nextInt();
Addition a1=new Addition();
z=a1.add(x,y);
System.out.println("The Adddition value is:"+z);

}
}

____________________________________________________________________________________________________________________________________________________________


import java.util.Scanner;
class Addition 
{
int a, b, c;
Scanner sc = new Scanner(System.in);
int add() {
System.out.println("Enter a,b values:");
a = sc.nextInt();
b = sc.nextInt();
c = a + b;
return c;
}
}
class Calcualte {
public static void main(String args[]) {
int z;
Addition a1 = new Addition();
z = a1.add();
System.out.println("The Adddition value is:" + z);
}
}

______________________________________________________________________________________________________________________________________________



======================================================================================================================

//Write a program to find the roots of a quadratic equation.
import java.util.Scanner;
class equa{
  int res;
  int resu(int a,int b,int c)
  {
    res=(b*b-4*a*c);
    return res;
  }
}
class equation{
  public static void main(String args[]){
    int a,b,c,q;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter a,b,c");
    a=sc.nextInt();
     b=sc.nextInt();
     c=sc.nextInt();
    equa e=new equa();
    q=e.resu(a,b,c);
    System.out.println("the result is" +q);
  }
}


===============================================================================
import java.util.Scanner;
class Main{
  public static void main(String args[]){
    Scanner sc=new Scanner (System.in); 
double a,b,c,res,res1,x1,x2,y1,y2;
a=sc.nextDouble();
b=sc.nextDouble();
c=sc.nextDouble();
res=Math.sqrt(b*b-4*a*c);
x1=sc.nextDouble();
x2=sc.nextDouble();
y1=sc.nextDouble();
y2=sc.nextDouble();
res1=Math.sqrt((x2-x1)*(x2-x1)-(y2-y1)*(y2-y1));
System.out.println(res);
System.out.println(res1);


     }
     }
      
====================================================================================================================
Write a program to determine the type of a triangle based on its side lengths.
Write a program to find the largest number among three given numbers.
Write a program to determine the grade of a student based on their marks
Write a program to convert a given number into its binary equivalent.
Write a program to convert a given number into its Roman numeral equivalent.
Write a program to calculate the area and volume of a cylinder given its radius and height.
Swamy:Write a program to calculate the area and volume of a sphere using conditional statements.
==========================================================================================================
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = sc.nextInt();
        String roman = "";

        int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
        String[] numerals = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };

        for (int i = 0; i < values.length; i++) {
            while (number >= values[i]) {
                number -= values[i];
                roman +=numerals[i];
            }
        }
        System.out.println("Roman numeral equivalent: " + roman);     
    }
}   
__________________________________________________________________________________________________________________________________________________________

//without return and without parameter
//Write a program to determine the type of a triangle based on its side lengths.

import java.util.Scanner;
class tri1{
  int a,b,c;
  Scanner sc=new Scanner(System.in);
  void display(){
    System.out.println("enter a");
    int a=sc.nextInt();
    System.out.println("enter ter b");
    int b=sc.nextInt();
    System.out.println("enter c");
    int c=sc.nextInt();
    if((a==b)&&(b==c)&&(c==a)){
      System.out.println("it is equilateral angle triangle");
    }
    else if((a==b)||(b==c)||(c==a))
    {
      System.out.println("it is isosceles angle triangle");
    }
    else{
       System.out.println("it is right angle triangle");
    }
  }
}

class tri{
  public static void main(String args[]){
    tri1 t=new tri1();
    t.display();
  }
}

=========================================================================================================================================================
 //with parameter and with return
//Write a program to determine the type of a triangle based on its side lengths.
import java.util.Scanner;
class tri{
  int j;
  int display(int a,int b,int c)
  { 
    
    if((a==b)&&(b==c)&&(c==a)){
    System.out.println("it is equilateral angle triangle");
    }
    else if((a==b)||(b==c)||(c==a))
    {
      System.out.println("it is isosceles angle triangle");
    }
    else
      System.out.println("it is right angle triangle");
    j=a;
    j=b;
    j=c;
    return j;
  
  }
}
class tri1{
  public static void main(String args[]){
    int a,b,c,k;
    Scanner sc=new Scanner(System.in);
   System.out.println("enter a");
   a=sc.nextInt();
    System.out.println("enter ter b");
     b=sc.nextInt();
    System.out.println("enter c");
    c=sc.nextInt();
    tri t=new tri();
   k= t.display(a,b,c);
   System.out.println(k); 
}
}

============================================================================================================================================================


[20:54, 1/31/2023] Aryan Kumar: //without return and without parameter
//Write a program to find the largest number among three given numbers.
import java.util.Scanner;
class lar{
  int a,b,c;
  Scanner sc=new Scanner(System.in);
  void display(){
    System.out.println("enter a");
    int a=sc.nextInt();
    System.out.println("enter ter b");
    int b=sc.nextInt();
    System.out.println("enter c");
    int c=sc.nextInt();
     if (a > b) {
      if (a > c) {
        System.out.println(" a is big");
      } else {
        System.out.println(" c is big");
      }
    } else {
      if (b > c) {
        System.out.println(" b is big");
      } else {
        System.out.println(" c is big");
      }
    }
  }
}
class large{
  public static void main(String args[]){
    lar t=new lar();
    t.display();
  }
}
==========================================================================================================

[21:15, 1/31/2023] Aryan Kumar: // with  arguments and with  return
//Write a program to find the largest number among three given numbers.
import java.util.Scanner;
class lar{
  int display(int a,int b,int c){
    int t;
     if (a > b) {
      
      if (a > c) {
       
        System.out.println(" a is big");
      } else {
        System.out.println(" c is big");
      }
    } else {
      if (b > c) {
       
        System.out.println(" b is big");
      } else {
        System.out.println(" c is big");
      }
    }
   t=a;
    t=b;
    t=c;
    return t;
    
  }
}
class large1{
  public static void main(String args[]){
    int k;
     Scanner sc=new Scanner(System.in);
    System.out.println("enter a");
    int a=sc.nextInt();
    System.out.println("enter  b");
    int b=sc.nextInt();
    System.out.println("enter c");
    int c=sc.nextInt();
    lar t=new lar();
   k= t.display(a,b,c);
   
  }
}
==========================================================================================================

//with return & with parameter
//Write a program to determine the grade of a student based on their marks

import java.util.Scanner;
class st{
   float display(float m,float p,float c){
   float total=m+p+c;
   float avg=(total)/3;
    if (m>=40&&p>=40&&c>=40){
      System.out.println("Student is pass");
     if (avg<50){
        System.out.println("Grade c");
     }
      else if(avg<=51&&avg>=70){
        System.out.println("grade b");
      }
      else if(avg<=71&&avg<=80)
      {
         System.out.println("grade A");
      }
      else
     {
      System.out.println("Student passed in distinction"); 
      }
    }
    else {
      System.out.println("Student is fail");
    }
return avg;
}
}
class student2{
  public static void main(String args[]){
    float k;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter maths");
    float m=sc.nextFloat();
    System.out.println("enter physics");
    float p=sc.nextFloat();
    System.out.println("enter chemistry");
    float c=sc.nextFloat();
    st s=new st();
    k=s.display(m,p,c);
    System.out.println(k); 
  }
}
==========================================================================================================

[22:23, 1/31/2023] Aryan Kumar: //with no return & with no parameter
//Write a program to determine the grade of a student based on their marks

import java.util.Scanner;
class st{
   void display(){
      Scanner sc=new Scanner(System.in);
    System.out.println("enter maths");
   float m=sc.nextFloat();
    System.out.println("enter physics");
   float p=sc.nextFloat();
    System.out.println("enter chemistry");
   float c=sc.nextFloat();
     
   float total=m+p+c;
   float avg=(total)/3;
    if (m>=40&&p>=40&&c>=40){
      System.out.println("Student is pass");
     if (avg<50){
        System.out.println("Grade c");
     }
      else if(avg<=51&&avg>=70){
        System.out.println("grade b");
      }
      else if(avg<=71&&avg<=80)
      {
         System.out.println("grade A");
      }
      else
      {
        System.out.println("Student passed in distinction"); 
      }
    }
    else {
      System.out.println("Student is fail");
    }
}
}
class student3{
  public static void main(String args[]){
    st s=new st();
    s.display(); 
  }
}
==========================================================================================================

[22:49, 1/31/2023] Aryan Kumar: //Write a program to convert a given number into its roman equivalent.
//with no return with no parameter
import java.util.Scanner;
class bin{
  void display(){
    Scanner sc=new Scanner(System.in);
    System .out.println("enter number");
    int num=sc.nextInt();
    switch(num){
      case 1:
        System.out.println("roman is  I");
        break;
      case 2:
        System.out.println("roman is  II");
        break;
        case 3:
        System.out.println("roman is  III");
        break;
        case 4:
        System.out.println("roman is  IV");
        break;
        case 5:
        System.out.println("roman is  V");
        break;
        case 6:
        System.out.println("roman is  VI");
        break;
        case 7:
        System.out.println("roman is  VII");
        break;
        case 8:
        System.out.println("roman is  VIII");
        break;
        case 9:
        System.out.println("roman is  IX");
        break;
        default :
        System.out.println("invalid");
        break;
    }
  }
}
class binary{
  public static void main(String args[]){
    bin b=new bin();
    b.display();
  }
}
==========================================================================================================

[22:54, 1/31/2023] Aryan Kumar: //Write a program to convert a given number into its roman equivalent.
//with  return with  parameter
import java.util.Scanner;
class bin{
  int display(int num){
    int t=num;
    switch(num){
      case 1:
        System.out.println("roman is  I");
        break;
      case 2:
        System.out.println("roman is  II");
        break;
        case 3:
        System.out.println("roman is  III");
        break;
        case 4:
        System.out.println("roman is  IV");
        break;
        case 5:
        System.out.println("roman is  V");
        break;
        case 6:
        System.out.println("roman is  VI");
        break;
        case 7:
        System.out.println("roman is  VII");
        break;
        case 8:
        System.out.println("roman is  VIII");
        break;
        case 9:
        System.out.println("roman is  IX");
        break;
        default :
        System.out.println("invalid");
        break;
    }
    return t;
  }
}
class roman{
  public static void main(String args[]){
    int k;
     Scanner sc=new Scanner(System.in);
    System .out.println("enter number");
    int num=sc.nextInt();
    bin b=new bin();
   k= b.display(num);
     System.out.println(k);
  }
}
==========================================================================================================

 //with  arguments and with no return
//Write a program to calculate the area and volume of a cylinder given its radius and height.
import java.util.Scanner;
class Sphere{
  double area,v;
  void area12(double r,double h)
  {
    area =(3.14*r*r*h);
    System.out.println(area);
  }
  void volume12(double r,double h)
  {
    v =(0.942*r*r*h);
    System.out.println(v);
  }
  
}
class cylinder{
  public static void main(String args[]){
    double r,h;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter radius r");
    r=sc.nextDouble();
    System.out.println("enter height h");
    h=sc.nextDouble();
   Sphere s=new Sphere();
    s.area12(r,h);
    s.volume12(r,h);
  }
}
==========================================================================================================

 //with  arguments and with  return
//Write a program to calculate the area and volume of a cylinder given its radius and height.
import java.util.Scanner;
class kim{
 
  double area12(double r,double h)
  {
     double a;
    a =(3.14*r*r*h);
    System.out.println(a);
  // double v =(0.942*r*r*h);
   // System.out.println(v);
  } 
 return "a"; 
}
class cylinder1{
  public static void main(String args[]){
    double r,h,o,p;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter radius r");
    r=sc.nextDouble();
    System.out.println("enter height h");
    h=sc.nextDouble();
   kim s=new kim();
    o=s.area12(r,h);
   
    System.out.println(o);
   
  }
}
============================================================================================================================================
//with no parameter and no return
//Write a program to check if a given number is a perfect square or not.
import java.util.Scanner;
class per{
  double res;
  Scanner sc=new Scanner(System.in);
 
  void resu()
  {
     System.out.println("enter a");
    int a=sc.nextInt();
   double res=Math.sqrt(a) ;
    if (res*res==a){
      System.out.println("it is a perect number");
     
    }
    else
      System.out.println("it is not a perect number");
    
  }
}
class perfect{
  public static void main(String args[]){
    per e=new per();
    e.resu(); 
  }
}

===========================================================================================================================================================
//with parameter and with return
//Write a program to check if a given number is a perfect square or not.
import java.util.Scanner;
class perf{
  double res;
  Scanner sc=new Scanner(System.in);
 
  double resu(double a)
  {
     
   double res=Math.sqrt(a) ;
     if (res*res==a){
      System.out.println("it is a perect number");
    }
    else
      System.out.println("it is not a perect number");
    return res;   
  }
}
class perfect1{
  public static void main(String args[]){
    double q;
    double res;
    Scanner sc=new Scanner(System.in);
         System.out.println("enter a");
    double a=sc.nextDouble();
    res=Math.sqrt(a) ;
    perf e=new perf();
   q= e.resu(a);
   System.out.println("the square root of"  +q); 
  }
}
=================================================================================================================================================
what is casting in java? explain by program in java

In Java, casting refers to the process of converting a variable of one data type to another data type. There are two types of casting in Java: implicit casting (also known as widening) and explicit casting (also known as narrowing).

Implicit casting is done automatically by the compiler when a variable of a smaller data type is assigned to a variable of a larger data type. For example, assigning an int to a long or a float to a double is an example of implicit casting.

Explicit casting, on the other hand, is done manually by the programmer when a variable of a larger data type is assigned to a variable of a smaller data type. This can result in data loss and can potentially cause runtime errors if the value being casted is outside the range of the smaller data type.

public class CastingExample {
  public static void main(String[] args) {
    // Implicit casting
    int myInt = 10;
    long myLong = myInt;
    float myFloat = myLong;

    System.out.println("myInt: " + myInt); // Output: 10
    System.out.println("myLong: " + myLong); // Output: 10
    System.out.println("myFloat: " + myFloat); // Output: 10.0

    // Explicit casting
    double myDouble = 3.14;
    int myInt2 = (int) myDouble;
    byte myByte = (byte) myInt2;

    System.out.println("myDouble: " + myDouble); // Output: 3.14
    System.out.println("myInt2: " + myInt2); // Output: 3 (data loss)
    System.out.println("myByte: " + myByte); // Output: 3 (data loss)
  }
}

import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int a;
        double b;
       a=sc.nextInt();
        b=a;
        System.out.println(b);
        double c=sc.nextDouble();
        int d=(int)c;
        System.out.println(d);
    }
}
_____________________________________________________________________________________________________________________________________________
Upcasting and downcasting are concepts in object-oriented programming, including Java.

Upcasting is when a reference variable of a subclass type is assigned to a superclass reference variable. This is safe and done implicitly because a subclass is always a superclass, and it has all the properties of the superclass. For example:

about upcasting and downcasting and write their programs

In Java, upcasting and downcasting are types of type conversions used when dealing with inheritance and polymorphism.

Upcasting is the process of converting a reference of a subclass type to a reference of its superclass type. This is done implicitly by the Java compiler, as a subclass object is also an instance of its superclass. Upcasting is used to treat a subclass object as a superclass object, allowing the use of the superclass methods and fields, while still having access to the subclass-specific methods and fields.

Downcasting, on the other hand, is the process of converting a reference of a superclass type to a reference of its subclass type. This is done explicitly by the programmer, as a superclass object may not be an instance of its subclass. Downcasting is used to access the subclass-specific methods and fields of an object that is currently being treated as a superclass object.


upcasting 
public class Animal {
  public void speak() {
    System.out.println("I am an animal");
  }
}

public class Dog extends Animal {
  public void speak() {
    System.out.println("I am a dog");
  }

  public void bark() {
    System.out.println("Woof!");
  }
}

public class UpcastingExample {
  public static void main(String[] args) {
    Animal animal = new Dog();
    animal.speak(); // Output: "I am a dog"
    // animal.bark(); // Won't compile because animal is of type Animal, which doesn't have a bark() method
  }
}

In this example, we have two classes, Animal and Dog. Dog extends Animal and overrides its speak() method with its own implementation. The UpcastingExample class demonstrates upcasting by creating a Dog object and assigning it to an Animal reference. When the speak() method is called on the animal reference, the Dog implementation is used, because the object is still a Dog. However, trying to call the bark() method won't compile, because the animal reference is still of type Animal, which doesn't have a bark() method.


downcasting :-

public class Animal {
  public void speak() {
    System.out.println("I am an animal");
  }
}

public class Dog extends Animal {
  public void speak() {
    System.out.println("I am a dog");
  }

  public void bark() {
    System.out.println("Woof!");
  }
}

public class DowncastingExample {
  public static void main(String[] args) {
    Animal animal = new Dog();
    animal.speak(); // Output: "I am a dog"
    if (animal instanceof Dog) {
      Dog dog = (Dog) animal;
      dog.bark(); // Output: "Woof!"
    }
  }
}



In this example, we have the same Animal and Dog classes as before. The DowncastingExample class demonstrates downcasting by creating a Dog object and assigning it to an Animal reference. When the speak() method is called on the animal reference, the Dog implementation is used, because the object is still a Dog. However, we also check if the animal reference is an instance of Dog, and if so, we explicitly downcast it to a Dog reference and call its bark() method. This is possible because the object is still a Dog, even though the reference is of type Animal.


import java.util.*;
class animal{
    void speak(){
       System.out.println("i am animal"); 
    }
}
class dog extends animal{
    void speak(){
         System.out.println("i am dog");  
    }
    void bark(){
         System.out.println("i am bark");  
    }
}
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
      animal a=new dog();
      a.speak();
     dog d=(dog)a;
     d.bark();
    }
}
========================
=error in down casting ||
======================
class Animal {
  public void makeSound() {
    System.out.println("The animal makes a sound");
  }
}

class Dog extends Animal {
  public void makeSound() {
    System.out.println("The dog barks");
  }

  public void fetch() {
    System.out.println("The dog fetches the ball");
  }
}

public class DowncastingExample {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();
    // Dog myDog = myAnimal; // This would give a compile error because Animal cannot be cast to Dog

    if (myAnimal instanceof Dog) {
      Dog myDog = (Dog) myAnimal; // downcasting
      myDog.fetch(); // This is not executed because myAnimal is not a Dog object
    }
  }
}



==============================================================================================================================================
31-01=2023
================================================================================================================================================
print 1-10 in a while loop
import java.util.Scanner;
class sim{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    int i1=sc.nextInt();
     i1=1;
    while (i1<=10){
      System.out.println(i1);
      i1++;
    }
  }
}
============================================================================
print square of a number by using for loop
import java.util.Scanner;
class practice{
  public static void main(String args[]){
    int num;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    num=sc.nextInt();
    int i=1;
    while(i<=num){
      System.out.println(i*i);
        i++;
    }
  }
}

import java.util.*;
class Main{
    public static void main(String args[]){
        int i=1;
      Scanner sc=new Scanner(System.in);
      int num=sc.nextInt();
        while(i<=num){
            System.out.println(""+i+" square is =>" +i*i);
            i++;
        }
    }
}

===========================================================================
print 1-10 by using while loop
import java.util.Scanner;
class sim{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    int i1=sc.nextInt();
     i1=1;
    while (i1<=10){
      System.out.println(i1);
      i1++;
    }
  }
}
====================================================================================

import java.util.Scanner;
class sim2{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    int i=sc.nextInt();
    int n=sc.nextInt();
   i=1;
    while(i<=n){
      System.out.print("\t"+i);
      i++;
    }
  }
}
==========================================================================================
print sum of n natural numbers
import java.util.Scanner;
class sim3{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    int sum=0;
    int i1=sc.nextInt();
    int n=sc.nextInt();
    while (i1<=n){
       sum=sum+i1;
     
      i1++;
    }
     System.out.println(sum);
  }
}
=================================================================================
print sum of n in every line

import java.util.Scanner;
class sim3{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    int sum=0;
    int i1=sc.nextInt();
    int n=sc.nextInt();
    while (i1<=n){
       sum=sum+i1;
      System.out.println(sum);
      i1++;
    }  
   
  }
}

===========================================================================================
factorial of given num
1*2*3*4*5
import java.util.Scanner;
class sim6{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    int fact=1;
    int i1=sc.nextInt();
    int n=sc.nextInt();
    while (i1<=n){
       fact=fact*i1;
     
      i1++;
    }  
    System.out.println(fact);
  }
}
======================================================================================
factorial of given num
5*4*3*2*1
import java.util.Scanner;
class sim7{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter the number1");
    int n1=sc.nextInt();
    int fact=1;
    int i=sc.nextInt();
    while (i>=n1){
      fact=fact*i;
    
      i--;
    }
      System.out.println(fact);
  }
}

===========================================================================
prime number by using for loop

import java.util.Scanner;
class prime{
  public static void main(String args[])
  {
    int i=1,count=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number1");
     i=sc.nextInt();
     System.out.println("enter number2");
    int num=sc.nextInt();
   
    while (i<=num){
      if(num%i==0){
      count++;  
         }
      i++;
        }
    if(count==2){
      System.out.println("it is a prime number");
    }
    else{
       System.out.println("it is not a prime number");
    }
  }
}

==========================================================================================================ooooooooooooooooooooooooooooooooo
import java.util.Scanner;
class even{
  public static void main(String args[]){
   
    Scanner sc=new Scanner(System.in);
    System.out.println("enter any number");
    int num=sc.nextInt();
    int i=sc.nextInt();
    while(i<=num){
      if(i%2==0){
         System.out.println("it is even" +i);
      }
       if(i%2!=0){
         System.out.println("it is odd" +i);
      }
      i++;
    }
  }
}


=======================================================================================================
//perfect number 

import java.util.Scanner;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter number");
        int n=sc.nextInt();
        int sum=0;
        for(int i=1;i<=n/2;i++)
        {
            if(n%i==0)
            {
                sum=sum+i;
            }
        }
        if(sum==n){
            System.out.println(n+" is a perfect number");
        }
        else{
            System.out.println(n+" not a perfect number");
        }
    }
}
=======================================================================================================================
//perfect number 1-n

import java.util.*;
public class Main
{
public static void main(String arg[])
{
int sum=0;
  Scanner sc=new Scanner(System.in);
  System.out.println("enter value:");
  int n=sc.nextInt();
for(int i=0;i<n;i++)
{
sum=0;
for(int j=1;j<i;j++)
{
if(i%j==0)
{
sum=sum+j;
}
}
if(sum==i && sum!=0)
System.out.print(i);
}
}
}
=======================================================================================================================
//perfect number 1 to n

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a positive integer: ");
        int n = scanner.nextInt();
        for (int i = 1; i <= n; i++) {
            if (isPerfect(i)) {
                System.out.println(i + " is a perfect number.");
            }
        }
    }

    public static boolean isPerfect(int num) {
        int divisorSum = 0;
        for (int i = 1; i < num; i++) {
            if (num % i == 0) {
                divisorSum += i;
            }
        }
        return divisorSum == num;
    }
}

=======================================================================================================================
87.write a java program to print prime numbers.
import java.util.Scanner;
public class Prime
{
    public static void main(String args[])
    {
        int count=0;
        Scanner sc=new Scanner(System.in);
        System.out.println("enter n value");
        int n=sc.nextInt();
        for(int i=1;i<=n/2;i++)
        {
            if(n%i==0)
            {
                count++;
            }
        }
        if(count==1){
            System.out.println("prime number");
        }
        else{
            System.out.println("not a prime nmuber");
        }

    }
}
========================================================================================================
88.write a java program to print 1 to n.
import java.util.*;
class PrimeNumber{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
int count;
System.out.println("Enter range");
int n=sc.nextInt();
for(int i=1;i<=n;i++){
count=0;
for(int j=1;j<=i;j++)
{
if(i%j==0)
{
count++;
}
}
if(count==2){
System.out.println(i);
}
}
}
}

==================================================================================================================
import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int count=0,sum=0;
        System.out.println("enter range");
        int n=sc.nextInt();
        for(int i=1;i<=n;i++){
            count=0;
            for(int j=1;j<=i;j++){
                if(i%j==0){
                count++;    
                }
            }
            if(count==2){
                sum=sum+i;
                System.out.println(i +"   ->   prime numbers");
            }
        }
        System.out.println(sum);
    }
}
======================================================================================================================

tables

import java.util.Scanner;
class sim5{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number1");
    int i1=sc.nextInt();
     System.out.println("enter number2");
    int n=sc.nextInt();
    while (i1<=10){
 System.out.println((+i1+"*"+n +"=" +(i1*n)) +"    "  +(+n+"*"+i1 +"=" +(i1*n)));
      i1++;
    }  s 
  }
}
================================================================

import java.util.Scanner;
class alp{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter any character");
    char c=sc.next().charAt(0);
    while(c<='z'){
      System.out.println(c);
      c++;
    }
  }
}
==========================================================================================================================================================
==========================================================================================================================================================

sum of odd in the given number

public class Main
{
    public static void main(String[] args) {
        
        int n=12345678;
        int sum=0;
        int rem=0;
        
        while(n > 0){    
            rem=n%10;    
            if(rem%2!=0){
          sum=sum+rem;
            }
          n=n/10;     
        }
        
        System.out.println("the sum of odd numbers is :"+sum);
    }
}

===========================================================================

reverse of a given number

public class Main
{
    public static void main(String[] args) {
        
        int n=123;
        int rev=0;
        int rem=0;
        
        while(n > 0){     // 7<=10
            rem=n%10;    // 12345%10 =5    1234%10 =4
            rev=rev*10+rem;
            n=n/10;     //12345/10 =1234.5  1234/10 =123.4
        }
        
        System.out.println("The rev number is :"+rev);
    }
}
============================================================================
the sum of even numbers  

public class Main
{
    public static void main(String[] args) {
        
        int n=12345678;
        int sum=0;
        int rem=0;
        
        while(n > 0){     // 7<=10
            rem=n%10;    // 12345%10 =5    1234%10 =4
            if(rem%2==0){
          sum=sum+rem;
            }
          n=n/10;     //12345/10 =1234.5  1234/10 =123.4
        }
        
        System.out.println("the sum of even numbers is :"+sum);
    }
}


==========================================================================================================
//perfect number 

import java.util.Scanner;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter number");
        int n=sc.nextInt();
        int sum=0;
        for(int i=1;i<=n/2;i++)
        {
            if(n%i==0)
            {
                sum=sum+i;
            }
        }
        if(sum==n){
            System.out.println(n+" is a perfect number");
        }
        else{
            System.out.println(n+" not a perfect number");
        }
    }
}
=======================================================================================================================
//perfect number 1-n

import java.util.*;
public class Main
{
public static void main(String arg[])
{
int sum=0;
  Scanner sc=new Scanner(System.in);
  System.out.println("enter value:");
  int n=sc.nextInt();
for(int i=0;i<n;i++)
{
sum=0;
for(int j=1;j<i;j++)
{
if(i%j==0)
{
sum=sum+j;
}
}
if(sum==i && sum!=0)
System.out.print(i);
}
}
}
=======================================================================================================================
//perfect number 1 to n

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a positive integer: ");
        int n = scanner.nextInt();
        for (int i = 1; i <= n; i++) {
            if (isPerfect(i)) {
                System.out.println(i + " is a perfect number.");
            }
        }
    }

    public static boolean isPerfect(int num) {
        int divisorSum = 0;
        for (int i = 1; i < num; i++) {
            if (num % i == 0) {
                divisorSum += i;
            }
        }
        return divisorSum == num;
    }
}

=======================================================================================================================
//find The number is  paliondrome

public class Main
{
    public static void main(String[] args) {
        
        int n=121;
        int orginal=n;
        int rev=0;
        int rem=0;
        System.out.println("The value of n before loop "+n);
        while(n > 0){     
            rem=n%10;    
            rev=rev*10+rem;
            n=n/10;     
        }
        System.out.println("The value of n after while loop "+n);
        if(orginal==rev)
        {
            System.out.println("The number is palindrom ");
        }
        else
        {
            System.out.println("The number is not paliondrome");
        }
        }
        }

=========================================================================================
//find the palinrome from 1 to n
import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter number");
        int num=sc.nextInt();
      for(int i=1;i<=num;i++){
        int temp=i,sum=0;
        while(temp>0){
            int d=temp%10;
             sum=sum*10+d;
             temp=temp/10;
        }
        if(i==sum){
            System.out.println(i +"is palindrome");
        }
       
    }
    }
}


===========================================================================================
    
       public class Main
                {
    public static void main(String[] args) {
        
        int n=121;
        int orginal=n;
        int sum=0;
        int rem=0;
        int fact=0;
    
        while(n > 0)
         {     
            rem=n%10;  
            fact=1;
            for(int i=1;i<=rem;i++)
            {
                fact=fact*i;
            }
            sum=sum+fact;
            n=n/10;     
        }
        
    
            System.out.println("The factorial of given number is"+sum);  
        
           }
         }
 

============================================================================================================================
strong number

    public class Main
{
    public static void main(String[] args) {
        
        int n=145;
        int orginal=n;
        int sum=0;
        int rem=0;
        int fact=0;
    
        while(n > 0){     
            rem=n%10;  
            fact=1;
            for(int i=1;i<=rem;i++){
                fact=fact*i;
            }
            sum=sum+fact;
            n=n/10;     
        }
        
    if(orginal==sum){
            System.out.println("The given number is strong number");
    }
    else{
        System.out.println("The given number is not strong number");
    }
        
        
        
    }
}
 

================================================================================================================
strong num 1 to n

public class Main
{
    public static void main(String[] args) {
        
    
    
    for(int j=1;j<=1000;j++){
           int n=j;
        int orginal=n;
        int sum=0;
        int rem=0;
        int fact=1;
    
    
        while(n > 0){     
            rem=n%10;  
            fact=1;
            for(int i=1;i<=rem;i++){
                fact=fact*i;
            }
            sum=sum+fact;
            n=n/10;     
        }
        
    if(orginal==sum){
            System.out.println("The given number is strong number"+orginal);
    }
    
        
    }
        
    }
}




import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number 2");
   int size=sc.nextInt();
    for(int j=1;j<=size;j++){
    int  num=j;
     int orig=num;
      int fact=1;
      int rem=0;
      int sum=0;
      while(num>0){
        fact=1;
        rem=num%10;
        for(int i=1;i<=rem;i++){
          fact=fact*i;
        }
       sum=sum+fact;
        num=num/10;
      }
      if(orig==sum){
        System.out.println("strong " +orig);
      }
       else
      System.out.println("not strong " +orig);
    }
  }
}
    


====================================================================================================================================================



public class Main{
 
    public static void main(String[] args) {
 
        int n = 371, original, rem, result = 0;
 
        original = n;
 
        while (n>0)
        {
           rem=n%10;
           result+=Math.pow(rem,3);
           n=n/10;
        }
 
        if(result == original)
            System.out.println(original+"is Armstrong number");
        else
            System.out.println( " is not an Armstrong number.");
    }
}








===========================================================================
public class Main{
 
    public static void main(String[] args) {
 
        int n = 8208, original, rem, result = 0;
 
        original = n;
        String str=n+"";
        int length=str.length();
 
        while (n>0)
        {
           rem=n%10;
           result+=Math.pow(rem,length);
           n=n/10;
        }
 
        if(result == original)
            System.out.println(original+"is Armstrong number");
        else
            System.out.println( " is not an Armstrong number.");
    }
}



import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter any number");
   int num=sc.nextInt();
   int count=0,t,sum=0,rem;
    t=num;
   while(t>0){
    
    t=t/10;
     count++;
   }
    t=num;
    while(t>0){
      rem=t%10;
    sum=sum+(int)(Math.pow(rem,count));
    t=t/10;
    }
    if(num==sum){
      System.out.println("amstrong ");
    }
    else
       System.out.println("not amstrong ");
   
  }
}
===========================================================================================================
//find the amstrong numbers 1 to n
import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter number");
        int num=sc.nextInt();
        int temp=0,count=0,rem=0;
        double sum=0;
        for(int i=0;i<=num;i++){
            temp=i;
            count=0;
            while(temp>0){
                temp=temp/10;
                count++;
            }
            temp=i;
            sum=0;
            while(temp>0){
                rem=temp%10;
                sum=sum+(Math.pow(rem,count));
                temp=temp/10;
            }
            if(sum==i){
                System.out.println("amstrong numbers => " +i);
            }
        }
    }
}




=============================================================================================================

public class Main{
 
    public static void main(String[] args) {
 
       String str="madar saheb dudekula";
       char ch;
       int i=0;
       while(i<str.length()){
           ch=str.charAt(i);
           if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u'){
               System.out.println(ch);
           }
           i++;
       }
    }
}


import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        int i=0;
        char ch;
        while(i<s.length()){
            ch = Character.toLowerCase(s.charAt(i));
            if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'){
                System.out.println("vowels  => "+(i+1)+"  => " +ch);
            }
         i++;   
        }
        
    }
}


==========================================================================================================
1-02-2023
============================================================================================================
do-while loops 
 factorial of a number

import java.util.Scanner;
class fact{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int num=sc.nextInt();
     int i=1;
     int fact=1;
    do{
      fact=fact*i;
       i++;
    }
     while(i<=num);
    System.out.println(fact);
  }
}


===============================================================================================================================================


    import java.util.Scanner;
class Calculator
  {​​
     public static void main(String args[])
    {​​
       int a=0,b=0,c,ch;
      Scanner sc=new Scanner(System.in);
      do 
      {​​ 
       System.out.println(" CALCULATOR ");
       System.out.println(" ---------- ");
       System.out.println("[1].ADDITION ");
       System.out.println("[2].SUBRACTION");
       System.out.println("[3].MULTIPLICATION ");
       System.out.println("[4].DIVISION ");
       System.out.println("[5].REMAINDER ") ;
       System.out.println("[6].EXIT ") ;
        
      System.out.println("Enter your Choice:");
      ch=sc.nextInt();
     if(ch<6)
     {​​  
      System.out.println("Enter a,b values:");
      a=sc.nextInt();
      b=sc.nextInt();
     }​​  
      switch(ch)
        {​​
          case 1:
            c=a+b;
            System.out.println("The Addition value is:"+c);
            break;
          case 2: 
            c=a-b;
            System.out.println("The Subtraction value is:"+c);
            break;
          case 3:
            c=a*b;
            System.out.println("The Multiplication value is:"+c);
            break;
          case 4:  
            c=a/b;
            System.out.println("The Division value is:"+c);
            break;
          case 5:  
            c=a%b;
            System.out.println("The Remainder value is:"+c);
            break;  
          default:
            System.out.println("Wrong Choice");
        }​​
    }​​while(ch<6);
  }​​    
  }​​
=========================================================================================================
[11:01] Mallela Vinay Kumar (Guest)
    import java.util.*;
class Factorialdowhile{​​​​​​​
  public static void main(String args[]){​​​​​​​
    int n;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter your number :");
    n=sc.nextInt();
    int temp=n,fact=1;
    do
      {​​​​​​​
        fact=fact*n;
       
        n--;
      }​​​​​​​while(n>2);
    System.out.println("the factorial of "+ temp+" is: "+fact);
  }​​​​​​​
}​​​​​​​
​
===================================================================================
      M.Ramyasri (Guest) no longer has access to the chat.
    ​[11:15] Karunakar Eeede
    import java.util.Scanner;
class Calculator
  {​​
     public static void main(String args[])
    {​​
       int a=0,b=0,c,ch;
      Scanner sc=new Scanner(System.in);
      do 
      {​​ 
       System.out.println(" CALCULATOR ");
       System.out.println(" ---------- ");
       System.out.println("[1].ADDITION ");
       System.out.println("[2].SUBRACTION");
       System.out.println("[3].MULTIPLICATION ");
       System.out.println("[4].DIVISION ");
       System.out.println("[5].REMAINDER ") ;
       System.out.println("[6].EXIT ") ;
        
      System.out.println("Enter your Choice:");
      ch=sc.nextInt();
     if(ch<6)
     {​​  
      System.out.println("Enter a,b values:");
      a=sc.nextInt();
      b=sc.nextInt();
     }​​  
      switch(ch)
        {​​
          case 1:
            c=a+b;
            System.out.println("The Addition value is:"+c);
            break;
          case 2: 
            c=a-b;
            System.out.println("The Subtraction value is:"+c);
            break;
          case 3:
            c=a*b;
            System.out.println("The Multiplication value is:"+c);
            break;
          case 4:  
            c=a/b;
            System.out.println("The Division value is:"+c);
            break;
          case 5:  
            c=a%b;
            System.out.println("The Remainder value is:"+c);
            break;  
          default:
            System.out.println("Wrong Choice");
        }​​
    }​​while(ch<6);
  }​​    
  }​​
===========================================================================================================================================================
​[11:19] Karunakar Eeede
    import java.util.Scanner;
class Calculator
  {​​
     public static void main(String args[])
    {​​
       int a=0,b=0,c,ch;
      Scanner sc=new Scanner(System.in);
      do 
      {​​ 
       System.out.println(" CALCULATOR ");
       System.out.println(" ---------- ");
       System.out.println("[1].ADDITION ");
       System.out.println("[2].SUBRACTION");
       System.out.println("[3].MULTIPLICATION ");
       System.out.println("[4].DIVISION ");
       System.out.println("[5].REMAINDER ") ;
       System.out.println("[6].EXIT ") ;
        
      System.out.println("Enter your Choice:");
      ch=sc.nextInt();
     if(ch<6)
     {​​  
      System.out.println("Enter a,b values:");
      a=sc.nextInt();
      b=sc.nextInt();
     }​​  
      switch(ch)
        {​​
          case 1:
            c=a+b;
            System.out.println("The Addition value is:"+c);
            break;
          case 2: 
            c=a-b;
            System.out.println("The Subtraction value is:"+c);
            break;
          case 3:
            c=a*b;
            System.out.println("The Multiplication value is:"+c);
            break;
          case 4:  
            c=a/b;
            System.out.println("The Division value is:"+c);
            break;
          case 5:  
            c=a%b;
            System.out.println("The Remainder value is:"+c);
            break; 
          case 6:
             System.exit(0);
          default:
            System.out.println("Wrong Choice");
        }​​
    }​​while(true);
  }​​    
  }​​

==========================================================================================================================================================
import java.util.Scanner;
class gor{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter num");
    int num=sc.nextInt();
    int fact=1;
    for(int i=1;i<=num;i++){
      
      fact =fact*i;
    }
    System.out.println(fact);
  }
}
================================================================================================================
fibbanci

import java.util.Scanner;
class fib{
public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
  System.out.println("enter number");
  int num=sc.nextInt();
  int sum=0,sum2=0;
  
  for (int i=1;i<=num;i++){
     sum=num;
     num=sum1;
 int sum1=sum+num; 
    System.out.println(sum1); 
  }  
 
}
}



import java.util.Scanner ;
class practice{
  public static void main(String args[]){
  
    Scanner sc=new Scanner(System.in);
     System.out.println("enter any size number");//enter 0
    int size=sc.nextInt();
    System.out.println("enter any num1");//enter 1
    int n1=sc.nextInt();
     System.out.println("enter any num2");//enter 0
    int n2=sc.nextInt();
     System.out.println("enter any num3");//enter 0
    int n3=sc.nextInt();
    for(int i=1;i<=size;i++){
       n2=n3;
    n3=n1;
    n1=n2+n3;
    System.out.println(n1);   
  }  
}
}
=============================================================================================================================================================
=============================================================================================================================================================


import java.util.Scanner;
public class Fibonacci
{
    public static void main(String[] args) 
    {
        int n, a = 0, b = 0, c = 1;
        System.out.print("Fibonacci Series:");
        for(int i = 1; i <= 100; i++)
        {
            a = b;
            b = c;
            c = a + b;
            System.out.print(a+" ");
        }
    }
}



import java.util.*;
class Main{
    public static void main(String args[]){
       Scanner sc=new Scanner(System.in);
       System.out.println("enter number range ");
       int n=sc.nextInt();
       int a=0,b=0,c=1;
       for(int i=0;i<n;i++){
           a=b;
           b=c;
           c=a+b;
           System.out.print(a +" ");
       }
    }
}
=================================================================================================================
import java.util.*;
class Palindrome
  {
     boolean palin(int n)
    {
      int d,r=0,t;
      t=n;
      while(n>0)
       {
         d=n%10;
         r=r*10+d;
         n=n/10;
       }
      if(t==r)
        return true;
      else 
        return false;
    }
    
  }
 
class Loops
  {
    public static void main(String args[])
    {
       int i,num;
      boolean res;
       Scanner sc=new Scanner(System.in);
    System.out.println("Enter Any Number:");
      num=sc.nextInt();
      Palindrome p1=new Palindrome();
      res=p1.palin(num);
      if(res==true)
      System.out.println("Its Palindrome Number");
      else
     System.out.println("Its Not Palindrome Number");   
    }
  }
=============================================================================================================================================

//number of digits in a number
import java.util.Scanner;
class digits{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter any number");
    int num=sc.nextInt();
    int i=1;
    int count=0;
      while(i<=num){
      num=num/10;
      count++;
      }
     System.out.println("the count is"  +count);
  }
}
=================================================================================================================================================
//product of a given number
import java.util.Scanner;  
public class product 
{  
public static void main(String args[])  
{  
int number, digit, product = 1;  
Scanner sc = new Scanner(System.in);  
System.out.print("Enter the number: ");  
number = sc.nextInt();  
while(number > 0)  
   {      
digit = number % 10;   
product= product * digit;    
number = number / 10;  
  }  
System.out.println("products of Digits: "+product);  
}  
}
oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
//sum of a given number
import java.util.Scanner;  
public class sum1 
{  
public static void main(String args[])  
{  
int number, digit, sum = 0;  
Scanner sc = new Scanner(System.in);  
System.out.print("Enter the number: ");  
number = sc.nextInt();  
while(number > 0)  
   {      
digit = number % 10;   
sum = sum + digit;    
number = number / 10;  
  }  
System.out.println("Sum of Digits: "+sum);  
}  
}
oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
//94.write a java program to print sum of first and last digit.
import java.util.*;
class sum2{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter num");
    int num=sc.nextInt();
   int rem=num%10;
    int sum=0,n1,first;
    while(num>=9)
    {
       num=num/10;
    }
   first=num;
     sum=first+rem;
    System.out.println(sum);
  }
}
oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
//amstrong num
import java.util.Scanner;
class amstrong{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter number");
    int n=sc.nextInt();
    int temp=n;
    int count=0,rem,sum=0;
    while(temp>0){
       temp=temp/10;
      count++;
    }
    temp=n;
    while(temp>0){
      rem=temp%10;
     sum=sum+(int)(Math.pow(rem,count));
      temp=temp/10;
    }
    if (n==sum)
    {
      System.out.println("amstrong number"); 
    }
    else
      System.out.println("not a amstrong number"); 
  }
}
============================================================================================================================================================
/ Nested Loops:
// -----------------
//   1,1 1,2
//    *   *   *  *  *        
//    *   *   *  *  *
//    *   *   *  *  *
//    *   *   *  *  *
//    *   *   *  *  *
 
import java.util.Scanner;
class nest{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      for(int j=1;j<=5;j++){
        System.out.print("*");
      }
      System.out.println();
    }
}
}
 ======================================================================================================================================
//   *   
//   *   
// ***** 
//   *   
//   *   




class loop25{
  public static void main(String args[]){
    
    for(int i=1;i<=5;i++){
      for(int j=1;j<=5;j++){
       if (i==3||j==3){
        System.out.print("*"); 
       }
        else 
        System.out.print(" ");
          }
       System.out.println(" ");
      }
     
    }
  }
====================================================================================================================

 // 1         1
 //    2    2
 //      3     
 //    4     4
 //5            5

import java.util.Scanner;
class loop17{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      for(int j=1;j<=5;j++){
        if(i==j||i+j==6){
        System.out.print(i);
        }
        else
          System.out.print(" ");
      }
      System.out.println();
    }
     
}
}
========================================================================================================================================
1   5 
 2 4  
  3   
 2 4  
1   5 

import java.util.*;
class Main{
    public static void main(String args[]){
        for(int i=1;i<6;i++){
            for(int j=1;j<6;j++){
                if(i==j||j+i==6){
                    System.out.print(j);
                }
                else{
                    System.out.print(" ");
                }
            }
        System.out.println(" ");
        }
    }
}


==========================================================================================================

*   *
 * * 
  *  
 * * 
*   *



import java.util.Scanner;
class loop14{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=0;i<5;i++){
      for(int j=0;j<5;j++){
        if(i==j||i+j==4){
        System.out.print("*");
        }
        else
          System.out.print(" ");
      }
      System.out.println();
    }
}
}
======================================================================================

*   *
 * * 
  *  
 * * 
*   *
*   *
 * * 
  *  
 * * 
*   *

import java.util.Scanner;
class loop14{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=0;i<5;i++){
      for(int j=0;j<5;j++){
        if(i==j||i+j==4){
        System.out.print("*");
        }
        else
          System.out.print(" ");
      }
      System.out.println();
    }

    for(int i=0;i<5;i++){
      for(int j=0;j<5;j++){
        if(i==j||i+j==4){
        System.out.print("*");
        }
        else
          System.out.print(" ");
      }
      System.out.println();
    }
}
}


=========================================================================================================

   // *   
  //  *   *   
  //  *   *   *  
  //  *   *   *  *  
  //  *   *   *  *  *

    import java.util.Scanner;
class nest1{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      for(int j=1;j<=i;j++){
        System.out.print("*");
      }
      System.out.println();
    }
}
}
================================================================================================================================
2 
34 
456 
5678 
678910 

class Main{
    public static void main(String args[]){
        for(int i=1;i<=5;i++){
            for(int j=1;j<=i;j++){
                System.out.print(i+j);
            }
            System.out.println(" ");
        }
    }
}

===========================================================================
//    1  2   3   4   5   
//    1  2   3   4   5
//    1  2   3   4   5
//    1  2   3   4   5
//    1  2   3   4   5

import java.util.Scanner;
class nest2{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      for(int j=1;j<=5;j++){
        System.out.print(j);
      }
      System.out.println();
    }
}
}
===============================================================================================================

 //    1  1  1  1  1 
//    2  2  2  2  2
//    3  3  3  3  3
//    4  4  4  4  4
//    5  5  5  5  5
import java.util.Scanner;
class nest3{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      for(int j=1;j<=5;j++){
        System.out.print(i);
      }
     System.out.println();  
    }
}
}
=========================================================================================

  // *  *  *  *  $
  //  *  *  *  $  *
  //  *  *  $  *  *
  //  *  $  *  *  *    
  //  $  *  *  *  *
import java.util.Scanner;
class nest5{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      
      for(int j=1;j<=5;j++){
        if(i+j==6){
       System.out.print("$"); 
        }
        else
          System.out.print("*"); 
      }
     System.out.println();  
    }
}
}
==============================================================================================
// $  *  *  *  *
 //   *  $  *  *  *
 //   *  *  $  *  *
 //   *  *  *  $  *    
 //  *  *  *  *  $
import java.util.Scanner;
class nest4{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      
      for(int j=1;j<=5;j++){
        if(i==j){
       System.out.print("$"); 
        }
        else
          System.out.print("*"); 
      }
     System.out.println();  
    }
}
}
====================================================================================



//    $  *  *  *  $
//    *  $  *  $  *
//    *  *  $  *  *
//    *  $  *  $  *    
//    $  *  *  *  $
import java.util.Scanner;
class nest6{
  public static void main(String args[]){
  Scanner sc=new Scanner (System.in);
    for(int i=1;i<=5;i++){
      
      for(int j=1;j<=5;j++){
        if((i+j==6)||(i==j))
        {
       System.out.print("$"); 
        }
        else
          System.out.print("*"); 
      }
     System.out.println();  
    }
}
}
  

================================================================================================================================================
 $$$  
$ $ $ 
$$ $$ 
$ $ $ 
 $$$  

class Main{
    public static void main(String args[]){
        for(int i=1;i<=5;i++){
            for(int j=1;j<=5;j++){
                if(i+j==6||i==j){
                    System.out.print(" ");
                }
                else{
                    System.out.print("$");
                }
            }
           System.out.println(" ");
        }
    }
}









=================================================
101.write a java program to print using nested for loop stars.
import java.util.*;
class Sample{
  public static void main(String args[])
  { 
     int a=1;
     for(int i=0;i<5;i++)//1<=5
       {
         for(int j=0;j<5;j++){//0<=5
           System.out.print("*" +" ");    
         }
         System.out.println();
       }
    
    }
  }
========================================================================================================
102.write a java to print 
                                     0
                                     1 1
                                     2 2 2
                                     3 3 3 3
                                     4 4 4 4 4
import java.util.*;
class Sample1{
  public static void main(String args[])
  { 
     int a=1;
     for(int i=0;i<5;i++)
       {
         for(int j=0;j<=i;j++){
           System.out.print(i);    
         }
         System.out.println();
       }
    
    }
  }
===============================================================================================================
103.write a java program to print given pattern 
                 *
                 * *
                 * * * 
                 * * * *
                 * * * * *
import java.util.*;
class Sample{
  public static void main(String args[])
  { 
     int a=1;
     for(int i=0;i<5;i++)
       {
         for(int j=0;j<=i;j++){
           System.out.print("*" +" ");    
         }
         System.out.println();
       }
    
    }
  }
===================================================================
104.write a java program to print given pattern
                 * * * * *
                 * * * *
                 * * *
                 * *
                 *
import java.util.*;
class Sample{
  public static void main(String args[])
  { 
     int a=1;
     for(int i=0;i<5;i++)
       {
         for(int j=i;j<5;j++){
           System.out.print("*" +" ");    
         }
         System.out.println();
       }
    
    }
  }



class loop13{
  public static void main(String args[]){
   for(int i = 5; i>=1; i--)
        {
            for(int j = 1; j<=i; j++)
            {
                if(j!=j)
                {
                    System.out.print(" ");
                }
                else
                {
                    System.out.print("*");
                }
            }
            System.out.println();
        }


  }
}


class Main{
    public static void main(String args[]){
        for(int i=5;i>=1;i--){
            for(int j=1;j<=i;j++){
                System.out.print("*");
            }
          System.out.println(" ");   
        }
    }
}
=======================================================================================================
105
*  
*  *  
*  *  *  
*  *  *  *  
*  *  *  *  *  
*  *  *  *  
*  *  *  
*  *  
*  



class loop3{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for(int j=1;j<=i;j++){
        System.out.print("*  ");
      }
      System.out.println("");
    }
    for(int k=1;k<=4;k++){
      for(int l=4;l>=k;l--){
       System.out.print("*  "); 
      }
      System.out.println("");
    }
  }
}
'

==================================================================================
    //        *    
   //       * *
   //     * * *
 //   * * * * *
 //  * *  * * *
class loop4{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for (int j=4;j>=i;j--){
        System.out.print(" ");
      }
      for(int k=1;k<=i;k++){
        System.out.print("*");
      }
     System.out.println(" "); 
    }
  }
}


==================================================================================
// * * * * *
//   * * * * 
//     * * *
//       * *
//         *
class loop5{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for (int j=1;j<=i;j++){
        System.out.print(" ");
      }
      for(int k=5;k>=i;k--){
       System.out.print("*"); 
      }
     System.out.println(" "); 
    }
  }
}

=====================================================================================


//         *    
//       * *
//     * * *
//  * * *  *
// * * * * *
//   * * * * 
//     * * *
//       * *
//         *
class  loop6{
  public static void main(String args[]){
      for (int i=1;i<=5;i++){
      for(int j=4;j>=i;j--){
        System.out.print(" ");
      }
      for(int k=1;k<=i;k++){
         System.out.print("*");
      }
       System.out.println(" ");
    }
    for(int l=1;l<=4;l++){
      for(int m=1;m<=l;m++){
        System.out.print(" ");
      }
      for(int n=4;n>=l;n--){
       System.out.print("*");
      }
      System.out.println(" ");
    }
    
  }
}
=========================================================================
105.write a java program to print given pattern
                           * * * * 
                             * * *
                               * *
                                 *
   
import java.util.*;
class Sample{
  public static void main(String args[])
  { 
     for(int i=0;i<5;i++)
       {
         for(int j=0;j<=i;j++){
           System.out.print("  ");
         }
         for(int j=i;j<5;j++){
           System.out.print("* ");
         }

         
        System.out.println();
       }
    
    }
  }

// * * * * *
//   * * * * 
//     * * *
//       * *
//         *
class loop5{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for (int j=1;j<=i;j++){
        System.out.print(" ");
      }
      for(int k=5;k>=i;k--){
       System.out.print("*"); 
      }
     System.out.println(" "); 
    }
  }
}

=====================================================================================
106.write a java progrm to print given pattern
                                  *
                                * * 
                              * * *
                            * * * * 
 
import java.util.*;
class Sample{
  public static void main(String args[])
  { 
     int a=1;
     for(int i=0;i<5;i++)
       {
         for(int j=i;j<5;j++){
           System.out.print(" ");
         }
         for(int j=0;j<=i;j++){
           System.out.print("*");
         }

         
        System.out.println();
       }
    
    }
  }


    //        *    
   //       * *
   //     * * *
 //   * * * * *
 //  * *  * * *
class loop4{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for (int j=4;j>=i;j--){
        System.out.print(" ");
      }
      for(int k=1;k<=i;k++){
        System.out.print("*");
      }
     System.out.println(" "); 
    }
  }
}

=================================================================================
107.write a java program to print given pattern
                     *
                    * *
                   * * *
                  * * * * 
    import java.util.*;
class Sample{​​
public static void main(String args[])
{​​ 
for(int i=0;i<5;i++)
{​​
for(int j=5-i;j>1;j--){​​
System.out.print(" ");
}​​
for(int j=0;j<=i;j++){​​
System.out.print("* ");
}​​

System.out.println();
}​​
}​​
}​​
=======================================================================================

//     *    
//    * *
//   * * *
//  * * * *
// * * * * *
class loop7{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for (int j=4;j>=i;j--){
        System.out.print(" ");
      }
      for(int k=1;k<=i;k++){
        System.out.print(" *");
      }
     System.out.println(" "); 
    }
  }
}

=================================================================================
//  * * * * *
//   * * * * 
//    * * *
//     * *
//      *
class loop8{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for (int j=1;j<=i;j++){
        System.out.print(" ");
      }
      for(int k=5;k>=i;k--){
       System.out.print(" *"); 
      }
     System.out.println(" "); 
    }   
  }
}
===========================================================================================
 //          *
//         *   *
//        *      *
//      *          *
//     *            *

class loops16{
  public static void main(String args[]){
    for(int i=0;i<=4;i++){
      for(int j=0;j<=8;j++){
         if(i+j==4||j-i==4){
           System.out.print("*");
         }
        else{
           System.out.print(" ");
          }
      }
      System.out.println(" ");
    }
  }
}

================================================================================================================================================

 //     * 
 //    * * 
 //   *   * 
 //  *     *   
 // *       * 
class loop19
  {
    public static void main(String args[]){
      for(int i=1;i<=5;i++){
        for(int j=5;j>=i;j--){
          System.out.print(" ");
        }
        for(int k=1;k<(2*i);k++){
          if(k>1&&k<(2*i)-1) 
          {
             System.out.print(" ");
          }
          else
            System.out.print("*"); 
        }
         System.out.println(" ");
      }
    }
  }

=====================================================================================================================

    *
   * *
  *   *
 *     *
*       *
 *     *
  *   *
   * *
    *

public class Main {
	public static void main(String[] args) {
		int i, j, k,n=5;
		
		
		for (i = 1 ; i <= n; i++ ) 
		{
			for (j = 1 ; j <= n - i; j++ ) 
			{
				System.out.print(" ");	
			}
			for (k = 1 ; k <= i * 2 - 1; k++ ) 
			{
				if (k == 1 || k == i * 2 - 1) {
					System.out.print("*");
				}
				else {
					System.out.print(" ");
				}
			}
			System.out.println();
		}
		
		for (i = n - 1 ; i > 0; i-- ) 
		{
			for (j = 1 ; j <= n - i; j++ ) 
			{
				System.out.print(" ");
			}
			for (k = 1 ; k <= i * 2 - 1; k++ ) 
			{
				if (k == 1 || k == i * 2 - 1) {
					System.out.print("*");
				}
				else {
					System.out.print(" ");
				}
			}
			System.out.println();
		}
	}

=======================================================================================================================
 //      * 
 //     *  * 
 //    *    * 
 //   *      * 
 //  *        * 
 // *        * 
 //  *      * 
 //   *    * 
 //    *  * 
 //     * 





class loop21
  {
    public static void main(String args[]){
      for(int i=1;i<=5;i++){
        for(int j=5;j>=i;j--){
          System.out.print(" ");
        }
        for(int k=1;k<(2*i);k++){
          if(k>1&&k<(2*i)-1){
             System.out.print(" ");
          }
          else
            System.out.print(" *"); 
        }
         System.out.println(" ");
         }
      for(int n=5;n>=1;n--){
        for(int l=5;l>n;l--){
          System.out.print(" ");
        }
        for( int m=1;m<(2*n);m++){
          if(m>1&&m<(2*n)-1){
             System.out.print(" ");
          }
          else
            System.out.print(" *"); 
        }
         System.out.println(" ");
      }
    }
  }


==========================================================================================================================================

//     * 
//    ** 
//   **** 
//  ****** 
// ********  
class loop9{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for(int j=4;j>=i;j--){
        System.out.print(" ");
      }
      for(int k=1;k<=i;k++){
         System.out.print("*");
      }
      for(int m=3;m<=i;m++){
        System.out.print("*"); 
      }
      System.out.println(" ");
    }
  }
}
===========================================================================================
// ********  
//  ****** 
//   **** 
//    ** 
//     * 
class loop10{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
      for(int j=1;j<=i;j++){
        System.out.print(" ");
      }
      for(int k=5;k>=i;k--){
        System.out.print("*");
      }
      for(int l=3;l>=i;l--){
        System.out.print("*"); 
      }
      System.out.println(" ");
    }
  }
}

​============================================================================================

 //     * 
 //    * * 
 //   * * * 
 //  * * * * 
 // * * * * * 
 //  * * * * 
 //   * * * 
 //    * * 
 //     * 


class  loop11{
  public static void main(String args[]){
    for (int i=1;i<=5;i++){
      for(int j=4;j>=i;j--){
        System.out.print(" ");
      }
      for(int k=1;k<=i;k++){
        
         System.out.print(" *");
        
      }
       System.out.println(" ");
    }
    for(int l=1;l<=4;l++){
      for(int m=1;m<=l;m++){
        System.out.print(" ");
      }
      for(int n=4;n>=l;n--){
       System.out.print(" *");
      }
      System.out.println(" ");
    }
    
  }
}


===========================================================================================
//    *    
//  *  *   
// *    *  
//  *  *   
//   *    
class loop18{
  public static void main(String args[]){
    for(int i=0;i<=4;i++){
      for(int j=0;j<=4;j++){
        if((i-j==2)||(i+j==2)||(j-i==2)||(i+j==6)){
          System.out.print("*");
        }
        else
         System.out.print(" ") ;
      }
      System.out.println(" ") ; 
    }
  }
}
======================================================================================================

108.write a java program to print given pattern
                a
               b c
              d e f
             g h i j
            k l m n o
import java.util.*;
class Sample{
  public static void main(String args[])
  { 
   char ch='a';
     
     for(int i=0;i<5;i++)
       {
         for(int j=5-i;j>1;j--){
           System.out.print(" ");
         }
         for(int j=0;j<=i;j++){
           System.out.print(ch++ +" ");
         }

         
        System.out.println();
       }
    
    }
  }


=====================================================================================
// *
//  *
//   *
//    *
//     *
class loop12{
  public static void main(String args[]){
    int i,j;
 for(i=1;i<=5;i++)
 {
  for(j=1;j<=i;j++)
  {
   System.out.print(" ");
  }
  System.out.println("*");
 }
  }
}



class loop13{
  public static void main(String args[]){
   for(int i = 1; i<=5; i++)
        {
            for(int j = 1; j<=i; j++)
            {
                if(j!=i)
                {
                    System.out.print(" ");
                }
                else
                {
                    System.out.print("*");
                }
            }
            System.out.println();
        }


  }
}





class Main{
    public static void main(String args[]){
       for(int i=1;i<=5;i++){
           for(int j=1;j<=i;j++){
               if(i==j){
               System.out.print("*");
           }
           else{
         System.out.print(" ");  
           }
           }
           System.out.println(" ");
       }
    }
}
=====================================================================================================
//        *
//      *
//    * 
//  *
// *




 
class loop13{
  public static void main(String args[]){
   for(int i = 5; i>=1; i--)
        {
            for(int j = 1; j<=i; j++)
            {
                if(j!=i)
                {
                    System.out.print(" ");
                }
                else
                {
                    System.out.print("*");
                }
            }
            System.out.println();
        }


  }
}

class Main{
    public static void main(String args[]){
      for(int i=1;i<=5;i++){
          for(int j=1;j<=5;j++){
              if(i+j==6){
                  System.out.print("*");
              }
              else{
                System.out.print(" ");  
              }
          }
          System.out.println(" ");
      }
    }
}
==================================================================================================
1  
2 3  
4 5 6  
7 8 9 10  
11 12 13 14 15  



class loop23{
  public static void main(String args[]){
    int a=1;
    for(int i=1;i<=5;i++){
      for(int j=1;j<=i;j++){
        System.out.print(a +" ");
        a++;
      }
      System.out.println(" ");
    }
  }
}   
====================================================================================================
// ***** 
// *   * 
// *   * 
// *   * 
// ***** 
import java.util.*;
class loop22{
  public static void main(String args[]){
    int n=4;
    for(int i=0;i<=n;i++){
      for(int j=0;j<=n;j++){
        if(i==0||j==0||i==n||j==n){
          System.out.print("*");
        }
        else
          System.out.print(" ");
      }
       System.out.println(" ");
    }
  }
}
===================================================================================================================================
A  
B C  
D E F  
G H I J  
K L M N O
  
class loop24{
  public static void main(String args[]){
    char a='A';
    for(int i=1;i<=5;i++){
      for(int j=1;j<=i;j++){
        System.out.print(a +" ");
        ++a;
      }
      System.out.println(" ");
    }
  }
}
===============================================================================================================================

// * 
// * *
// *   *
// *     *
// * * * * *
 class practice{
   public static void main(String[] args){
      int   i, j;
      for( i=1;i<=5;i++){
         if(i==1||i==5)
         for( j=1;j<=i;j++){
            System.out.print("*");
         } else {
             for( j=1;j<=i;j++){
                if(j==1 || j==i)
                   System.out.print("*");
                else
                   System.out.print(" ");
            }
         }
      System.out.println();
      }
   }
}


=======================================================================================================================
// * 
// * *
// *   *
// *     *
// * * * * *
class frequency{
  public static void main(String args[]){
    for(int i=1;i<=5;i++){
       for(int j=1;j<=5;j++){
         if(j==1||i==5||i==j)  {
           System.out.print("*");
         }
         else
           System.out.print(" ");
       }
      System.out.println(" ");
    }
  }
}
oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
2-2-2023
oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
print 1-6 in a loop use of break in a loop
class Loops
  {
    public static void main(String args[])
    {
       int i;
     
      for(i=1;i<=10;i++)
        {
          if(i==6)
          {
            break;
          }
           System.out.println(i);
        }  
          
    }
  }

====================================================================================
class Loops
  {
    public static void main(String args[])
    {
       int i;
     
      for(i=1;i<=10;i++)
        {
          if(i==6)
          {
             continue;
          }
           System.out.println(i);
        }  
          
    }
  }
=====================================================================================

class nest8{
  public static void main(String args[]){
    int i;
    for( i=1;i<=10;i++){
      if((i==6)||(i==7))
         {
        continue;
      }
     System.out.println(i); 
    }
    
  }
}
===========================================================================================

                                    
ARRAYS:IT IS A COLLECTION OF SIMILAR collection of similar data types and variable
                     datatype ary_name[]=new datatype[size];
 
         int a[]=new int[5];
              n=10;
 
         int a=new int[n];
 ============================================================================================

class Array1
  {
    public static void main(String args[])
    {
       int a[]={10,20,30,40,50};
 
      System.out.println("The a[0] value is:"+a[0]);
      System.out.println("The a[1] value is:"+a[1]);
      System.out.println("The a[2] value is:"+a[2]);
      System.out.println("The a[3] value is:"+a[3]);
      System.out.println("The a[4] value is:"+a[4]);
      
    }
  }
===============================================================================================

class array1
  {
    public static void main(String args[])
    {
      int i;
             int a[]={10,20,30,40,50};

      for (i=0;i<5;i++){
 
      System.out.println("The elements value is:"+a[i]);
     
    }
  
    }
  }
===============================================================================================================

import java.util.Scanner;
class array2{
  public static void main(String args[]){
    int i,size;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    size=sc.nextInt();
     System.out.println("enter array ");
    int a[]=new int[size];
    System.out.println("enter array elements ");
    for(i=0;i<size;i++){
      a[i]=sc.nextInt();
    }
    System.out.println("the array elements are"); 
    for(i=0;i<size;i++){
      System.out.println(a[i]); 
  }
}
}
=================================================================================================================


  //sum of arrays
import java.util.Scanner;
class array3{
  public static void main(String args[]){
    int i,size,sum=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    size=sc.nextInt();
     System.out.println("enter array ");
    int a[]=new int[size];
    System.out.println("enter array elements ");
    for(i=0;i<size;i++){
      a[i]=sc.nextInt();
     
    }
    System.out.println("the sum of array elements are"); 
    for(i=0;i<size;i++)
    {
       sum=sum+a[i];
     
  }
     System.out.println(a[i]);
     System.out.println(sum);
  }
}
=======================================================================================================


//max&min of arrays
import java.util.Scanner;
class array4{
  public static void main(String args[]){
    int i,size,sum=0,max,min;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    size=sc.nextInt();
     System.out.println("enter array ");
    int a[]=new int[size];
    System.out.println("enter array elements ");
    for(i=0;i<size;i++){
      a[i]=sc.nextInt();
     
    }
     min=max=a[0];
    for(i=0;i<size;i++){
   if (a[i]>max){
     max=a[i];
   }
  if (a[i]<min){
    min=a[i];
    }
    }
    System.out.println(max);
   System.out.println(min);
  }
}
================================================================================================================

//max&min of arrays

import java.util.Scanner;
class array4{
  public static void main(String args[]){
    int i,size,sum=0,max,min;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    size=sc.nextInt();
     System.out.println("enter array ");
    int a[]=new int[size];
    System.out.println("enter array elements ");
    for(i=0;i<size;i++){
      a[i]=sc.nextInt();
     
    }
     min=max=a[0];
    for(i=0;i<size;i++){
   if (a[i]>max){
     max=a[i];
   }
  if (a[i]<min){
    min=a[i];
    }
    }
    System.out.println(max);
   System.out.println(min);
  }
}
===================================================================================================================


//max-min of arrays
import java.util.Scanner;
class array5{
  public static void main(String args[]){
    int i,size,sum=0,max,min;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    size=sc.nextInt();
     System.out.println("enter array ");
    int a[]=new int[size];
    System.out.println("enter array elements ");
    for(i=0;i<size;i++){
      a[i]=sc.nextInt();
     
    }
     min=max=a[0];
    for(i=0;i<size;i++){
   if (a[i]>max){
     max=a[i];
   }
  if (a[i]<min){
    min=a[i];
    }
    }
    sum=max-min;
    System.out.println(max);
   System.out.println(min);
    System.out.println(sum);
  }
}
==================================================================================================================




Linear Search or Sequential Search:
-------------------------------------------
 
             -----> n=5
             ------> read the elements to array                    i=0  i=1 i=2  i=3  i=4  i=5 
            -------> display array elements         --------->   10   20   30  40   50
            ------> enter search value                ----------> ser=80
 
         for(i=0;i<n;i++)
          {       30==30
              if(ser==a[i])
               {
                    System.out.println(ser+"is Found");
                    break;
                 
               }
           }
          if(i==n)
                {
                  System.out.println(ser+"is Not Found");
                }
==========================================================================================================================================================
//linear search

import java.util.Scanner;
class array6{
  public static void main(String args[]){
    int i,size,sum=0,max,min;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    size=sc.nextInt();
     System.out.println("enter array ");
    int a[]=new int[size];
    System.out.println("enter array elements ");
    for(i=0;i<size;i++){
      a[i]=sc.nextInt();
    }
     System.out.println("enter array element to search");
   int search=sc.nextInt();
    for(i=0;i<size;i++){
      if(search==a[i]){
        System.out.println("element found");
      }
      else{
         System.out.println("element not found");
      }
    }
  }
}
===============================================================================================================================================================
    
even in the array



    public class Main
{​​
  public static void main(String[] args) {​​
    
    int[] arr={​​10,5,30,40}​​;
    
    for(int i=0;i<4;i++){​​
        
        if(arr[i]%2==0){​​
        
         System.out.println(arr[i]);
        }​​
   
    }​​
===============================================================================================================================================================
    even positions in array
​
    public class Main
{​​
  public static void main(String[] args) {​​
    
    int[] arr={​​10,5,30,40}​​;
    
    for(int i=0;i<4;i++){​​
        
        if(i%2==0){​​
        
         System.out.println(arr[i]);
        }​​
   
    }​​
 ===============================================================================================================================================================
odd elements in the array​
 
public class Main
{​​
  public static void main(String[] args) {​​
    
    int[] arr={​​10,5,30,40}​​;
    
    for(int i=0;i<4;i++){​​
        
        if(arr[i]%2!=0){​​
        
         System.out.println(arr[i]);
        }​​
   
    }​​

===============================================================================================================================================================
 copy of elements in the array

class array1
  {
    public static void main(String args[])
    {
      int i;
        int[] arr1=new int[3];
        int a[]={10,20,30,40};
      
 
     
         // a[3]=0;
      
    
      for(int j=0;j<arr1.length;j++){
        arr1[j]=a[j];
      }
  for (i=0;i<a.length;i++){
        System.out.println(a[i]);
       
    }
    }
  }
======================================================================================
declaring an array by static method so no need of assigning object

public class array1{
 
  public static void solution(int [] arr){
   //write your solution here
    int[] ar=new int[3];
    for(int i=1;i<arr.length;i++){
      ar[i-1]=arr[i];
    }
     for(int i=0;i<ar.length;i++){
      System.out.println(ar[i]);
    }
 
    
  }
 
  public static void main(String [] args){
 
    int[] arr1=new int[3];
 
    int [] a={10,20,30,40};
 
    solution(a);
 
   
  }
  
}
================================================================
deleting an array

public class array1{
 
  public void solution(int [] arr){
   //write your solution here
    int[] ar=new int[3];
    for(int i=1;i<arr.length;i++){
      ar[i-1]=arr[i];
    }
     for(int i=0;i<ar.length;i++){
      System.out.println(ar[i]);
    }
  }
 
 method to array

 public static void main(String [] args){
 
    int[] arr1=new int[3];
 
    int [] a={10,20,30,40};
    array1 obj=new array1();
 
    obj.solution(a);
 
   
  }
  
}
=================================================================
[15:22] Madar Saheb
    class array1
  {​​
    public static void main(String args[])
    {​​
      int i;
        int[] arr1=new int[3];
        int a[]={​​10,20,30,40}​​;
      
     
         // a[3]=0;
      
    
      for(int j=0;j<arr1.length;j++){​​
        arr1[j]=a[j];
      }​​
  for (i=0;i<a.length;i++){​​
        System.out.println(a[i]);
       
    }​​
    }​​
  }​​
​=====================================================================================================================
  deleting first element in the array 
 class array1
  {​​
    public static void main(String args[])
    {​​
      int i;
        int[] arr1=new int[3];
        int a[]={​​10,20,30,40}​​;
      a[0]=0;
  for(int j=1;j<a.length;j++){​​
        arr1[j-1]=a[j];
      }​​
  for (i=0;i<arr1.length;i++)
    {​​
        System.out.println(arr1[i]);
      }​​
    }​​
  }​​

=====================================================================================================================
//deleting the element in the array in the specific position

import java .util.*;
class arrays18{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t=0;
    System.out.println("enter array size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
   System.out.println( "enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
    System.out.println("enter deleting elemrnt position");
    int s=sc.nextInt();
    for(int i=0;i<n;i++){
     if(i==s){
       continue;
     }
      
       System.out.println(a[i]);
     }
    }
  }


============================================================================================================================================================
//inserting a element at specific position
import java.util.*;
class arrays18{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
System.out.println("enter size");
int n=sc.nextInt();
int a[]=new int[n+1];
System.out.println("Enter array elements");
for(int i=0;i<n;i++){
a[i]=sc.nextInt();
}
System.out.println("enter index position");
int index_pos=sc.nextInt();
System.out.println("enter new element");
int ele=sc.nextInt();
for(int i=n-1;i>=index_pos;i--){
a[i+1]=a[i];
}
a[index_pos]=ele;
System.out.println("after insertion");
for(int i=0;i<a.length;i++){
System.out.println(a[i]);
}
}
}

=
=============================================================================================================================================================


prriniting the array  elements

import java.util.*;
public class test {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
    int[] arr=new int[10];
    for(int i=0;i<arr.length;i++){
    System.out.println("Enter the element");
      arr[i]=sc.nextInt();
    }
    for(int a: arr){
      System.out.println(a);
    }
}
}
==================================================================
//sum of the arrayy

import java.util.*;
public class Main {
  public static void main(String[] args) {
      int sum=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("Enter the size of array");
    int size=sc.nextInt();
    int[] arr=new int[size];
    for(int i=0;i<arr.length;i++){
    System.out.println("Enter the element");
      arr[i]=sc.nextInt();
      sum=sum+arr[i];
    }
    for(int a: arr){
      System.out.println(a);
    }
    System.out.println("sum of the array is "+sum);
}
}
======================================================================================
//with no return with no parameters
import java.util.*;
class enti{
  void oye(){
    int sum=0;
     Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int s=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[s];
    for(int i=0;i<a.length;i++){
       a[i]=sc.nextInt();
    }
    for(int i=0;i<a.length;i++){
     sum=sum+a[i];
    }
    System.out.println(sum);
  }
}                                                                                        

class array3{
  public static void main(String args[]){
   enti aha=new enti();
    aha.oye(); 
  }
}
====================================================================================
//with no return with  parameters
import java.util.*;
class enti{
  void oye(int x[]){
    int sum=0;
    for(int i=0;i<x.length;i++){
     sum=sum+x[i];
    }
    System.out.println(sum);
  }
}
class array3{
  public static void main(String args[]){
    int sum=0;
     Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int s=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[s];
    for(int i=0;i<a.length;i++){
       a[i]=sc.nextInt();
    }
   enti aha=new enti();
    aha.oye(a); 
  }
}                                                       
===========================================================================================
//with  return with  parameters
import java.util.*;
class enti{
  int []oye(int x[],int sum)
    {
     sum=0;
      int m[]=new int[x.length];
    for(int i=0;i<x.length;i++){
     
     sum=sum+x[i];
       m[i]=x[i];
   
    }
     
     System.out.println("the sum " +sum); 
      return m;
  }
}
class array3{
  public static void main(String args[]){
    int sum=0;
     Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int s=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[s];
    for(int i=0;i<a.length;i++){
       a[i]=sc.nextInt();
    }
   enti aha=new enti();
  int  k[]=aha.oye(a,sum); 
    System.out.println("the enter array are ");
   for(int i=0;i<s;i++){
       System.out.println(k[i]);
    }
       
  }
}

=======================================================================================
import java.util.*;
class kill{
   int [] sol()
   {
    Scanner sc=new Scanner(System.in);
     int k=sc.nextInt();
    int sum=0;
    int a[]=new int[k];
    for(int i=0;i<a.length;i++){
        a[i]=sc.nextInt();
    }
    
     for(int i=0;i<a.length;i++){
        sum=sum+a[i];
        
    }
    System.out.println(sum);
  return a;
}

}
class Main{
    
    public static void main(String args[]){
         Scanner sc=new Scanner(System.in);
     kill k1=new kill();
    int y[]=k1.sol();
    for(int i=0;i<y.length;i++){
        System.out.println(y[i]);
}
}
}
==============================================================================================================================
for(datatype variableName: arrayName){
        System.out.println(variableName);
    }

==================================================================================================
//find the elements

[11:53] Madar Saheb

import java.util.*;
public class Main {
  public static void main(String[] args) {
      int sum=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("Enter the size of array");
    int size=sc.nextInt();
    int[] arr=new int[size];
    for(int i=0;i<arr.length;i++){
    System.out.println("Enter the element");
      arr[i]=sc.nextInt();
    }
    int count=0;
    for(int a: arr){
        if(a==30){
            System.out.println("Element is found");
            count++;
      }
    }
    if(count==0)
    {
        System.out.println("Element is not found");
    }
}
}

====================================================================================================================
[11:58] Madar Saheb
import java.util.*;
public class Main 
   {
  public static void main(String[] args) 
        {
           
      int sum=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("Enter the size of array");
    int size=sc.nextInt();
    int[] arr=new int[size];
    for(int i=0;i<arr.length;i++){
    System.out.println("Enter the element");
      arr[i]=sc.nextInt();
    
    }
     
    int count=0;
    int index=0;

    for(int j=0;j<arr.length;j++){
        if(arr[j]==30){
            System.out.println("Element is found at index "+j);
            count++;
            index=j;
        }
    }

    if(count==0)
    {

        System.out.println("Element is not found");
    }
}

}
=====================================================================================================
import java.util.*;
class array4{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int s=sc.nextInt();
    System.out.println("enter search");
    int n=sc.nextInt();
    
    System.out.println("enter array elements");
    int a[]=new int[s];
    for(int i=0;i<a.length;i++){
       a[i]=sc.nextInt();
    }
        System.out.println("the entered array elements");

    for(int i=0;i<a.length;i++){
     System.out.println(a[i]);
    }
    int index=0;
    int count=0;
    for(int i=0;i<a.length;i++){
    if(a[i]==n){
      index=i;
      System.out.println("element is found at" +i    +"position"    +a[i]);
    }
      else
      if(count==0){
        System.out.println("element is not found at" +i    +"position"   +a[i]);
    
      }
    
    
}
}
}
==========================================================================================================================================
//enter the string names

import java.util.Scanner;
class practice {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter size");
    int s = sc.nextInt();
    System.out.println("enter array");
    String a[] = new String[s];
    for (int i = 0; i < a.length; i++) {
      a[i] = sc.next();
    }
    System.out.println("the enter array elements are");
    for (int i = 0; i < a.length; i++) {
      System.out.println(a[i]);
    }
  }
}
===========================================================================
//check wheter the element are at even or odd ,its  position even or odd   ,its count of even or odd element// ,
import java.util.Scanner;
class array5{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int s=sc.nextInt();
    System.out.println("enter array");
    int  a[]=new int[s];
    for(int i=0;i<a.length;i++){
       a[i]=sc.nextInt();
    }
    int count=0;
    int count1=0;
    int index=0;
   // int index1=0;
    for(int i=0;i<a.length;i++){
      if(a[i]%2==0){
        count++;
    System.out.println(a[i] +"is even");
   }
       
    if(a[i]%2==1){
      count1++;
    System.out.println(a[i] +"is odd");
      
    }
     if(i%2==0){
      index=i;
      System.out.println(a[i] +" at even position" +i); 
     }
      
      if(i%2==1){
      index=i;
      System.out.println(a[i] +" at odd position" +i); 
     }
            System.out.println("==================================================");

    }
   System.out.println("even" +count);
     System.out.println("odd" +count1);
  }
  }
=================================================================================================================
import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int k=sc.nextInt();
        int a[]=new int[k];
        int count =0,index=0;
        for(int i=0;i<a.length;i++){
            a[i]=sc.nextInt();
            
        }
          for(int i=0;i<a.length;i++){
           System.out.println(a[i]);
            
        }
        System.out.println("enter element to search");
        int s=sc.nextInt();
        
        for(int i=0;i<a.length;i++){
          if(a[i]==s) {
              count++;
              index=i;
              System.out.println("element found at " +(i+1));
          } 
        }
        if(count==0){
           System.out.println("element not found");  
        }
    }
}
============================================================================================================
//print the even elements in the array

import java.util.Scanner;
class practice 
     {
  public static void main(String args[])
        {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter size");
    int s = sc.nextInt();
    System.out.println("enter array");
    int a[] = new int[s];
    for (int i = 0; i < a.length; i++)
    {
      a[i] = sc.nextInt();
    }
    System.out.println("the enter array elements are");
    for (int i = 0; i < a.length; i++) {
      if(a[i]%2==0){
      System.out.println(a[i]);
      }
    }
  }
}

===================================================================================================================================


//print the odd elements in the array

import java.util.Scanner;
class practice {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter size");
    int s = sc.nextInt();
    System.out.println("enter array");
    int a[] = new int[s];
    for (int i = 0; i < a.length; i++) {
      a[i] = sc.nextInt();
    }
    System.out.println("the enter array elements are");
    for (int i = 0; i < a.length; i++) {
      if(a[i]%2==1){
      System.out.println(a[i]);
      }
    }
  }
}

====================================================================================================================================
//print the odd elements in the array

import java.util.Scanner;
class practice {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter size");
    int s = sc.nextInt();
    System.out.println("enter array");
    int a[] = new int[s];
    for (int i = 0; i < a.length; i++) {
      a[i] = sc.nextInt();
    }
    System.out.println("the enter array elements are");
    for (int i = 0; i < a.length; i++) {
      if(a[i]%2!=0){
      System.out.println(a[i]);
      }
    }
  }
}
===========================ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
//print the even positions elements  in the array

import java.util.Scanner;
class practice {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter size");
    int s = sc.nextInt();
    System.out.println("enter array");
    int a[] = new int[s];
    for (int i = 0; i < a.length; i++) {
      a[i] = sc.nextInt();
    }
    System.out.println("the enter array elements are");
    for (int i = 0; i < a.length; i++) {
      if(i%2==0){
      System.out.println( "the positions are " +i + "     elements   is    "   +a[i]);
      }
    }
  }
}
================================================================================================================

//print the odd positions elements  in the array

import java.util.Scanner;
class practice {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    System.out.println("enter size");
    int s = sc.nextInt();
    System.out.println("enter array");
    int a[] = new int[s];
    for (int i = 0; i < a.length; i++) {
      a[i] = sc.nextInt();
    }
    System.out.println("the enter array elements are");
    for (int i = 0; i < a.length; i++) {
      if(i%2==1){
      System.out.println( "the positions are " +i + "     elements   is    "   +a[i]);
      }
    }
  }
}
=================================================================================================================


Syntax:               Datatype Ary_name[][]={{val1,val2},{val3,val4}.............}; Ex:         
                             int a[][]={{10,20,30},{40,50,60},{70,80,90}};
                        |
                 00   01  02               10    20    30 
                 10   11  12   ==>         40    50    60
                 20   21  22               70    80    90  
====================================================================================================================

//print array values 
import java.util.Scanner;
  class array7{
    public static void main(String args[]){
      ‭Scanner sc=new Scanner(System.in);
      int a[][]={{10,20,30},{40,50,60},{70,80,90}};
       System.out.println("assign the array numbers");
      for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
          a[i][j]=sc.nextInt();
        }
           }
      System.out.println("the array values are");
      for(int i=0;i<3;i++)
       {
        for(int j=0;j<3;j++)
        {
          System.out.println(a[i][j]);
        }
        System.out.println();
     }   
  }
}
===========================================================================================================================


//print array values

import java.util.Scanner;
  class array8{
    public static void main(String args[]){
      Scanner sc=new Scanner(System.in);
      int a[][]=new int[3][3];
       System.out.println("assign the array numbers");
      for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
          a[i][j]=sc.nextInt();
        }
           }
      System.out.println("the array values are");
      for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
          System.out.println(a[i][j]);
        }
        System.out.println();
     }   
  }
}
============================================================================================================================


//print array values by rows and colums
import java.util.Scanner;
  class array9{
    public static void main(String args[]){
      Scanner sc=new Scanner(System.in);
      System.out.println("enter row size");
      int row=sc.nextInt();
      System.out.println("enter column size");
      int col=sc.nextInt();
      System.out.println("the arrays are");
      int a[][]=new int[row][col];
       System.out.println("assign the array numbers");
      for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
          a[i][j]=sc.nextInt();
           }
           }
      System.out.println("the array values are");
      for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
          System.out.println(a[i][j]);
        }
        System.out.println();
        }   
        }
        }

===================================================================================================================================

     1 
    1 1 
   1 2 1 
  1 3 3 1 
 1 4 6 4 1 


import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=1;i<=n;i++){
            for(int j=0;j<=n-i;j++){
                System.out.print(" ");
            }
            
            int c=1;
            for(int k=1;k<=i;k++){
                System.out.print(c +" ");
                c=c*(i-k)/k;
            }
           System.out.println(); 
        }
    }
}




import java.util.Scanner;
 class Main {
 public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter the number of rows: ");
int rows = sc.nextInt();
     for (int i = 0; i < rows; i++) {
int number = 1;
System.out.format("%" + (rows - i) * 2 + "s", "");
 for (int j = 0; j <= i; j++) {
     System.out.format("%4d", number);
 number = number * (i - j) / (j + 1);
}
 System.out.println();
 }
}
}

=======================================================================================================================================

//sorting of an array
import java .util.*;
class array10{
  public static void main(String args[]){
    int t;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
   System.out.println( "enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
     System.out.println("the elements before sorting are ");
    for(int i=0;i<n;i++){
     
      System.out.println("\t" +a[i]);
    }
    for(int i=0;i<n;i++){
      for(int j=0;j<n-1;j++){
        if(a[j]>a[j+1]){
          t=a[j];
          a[j]=a[j+1];
          a[j+1]=t;
        }
      }
    }
    System.out.println("the elements after sorting are ");
    for(int i=0;i<n;i++){
      
      System.out.println("\t"   +a[i]);
    }
    
  }
}
========================================================================================================================================
To Remove Dublicate Elements in an Array:
public class RemoveDuplicates {
    public static void main(String[] args) {
        int[] arr = {1, 2, 2, 3, 4, 4, 5, 5, 6};
        int n = arr.length;
        int j = 0;
        for (int i = 0; i < n; i++)   
          {
            if (arr[i] != arr[j])           
              {
                arr[++j] = arr[i];
            }
        }
        for (int i = 0; i <= j; i++)         {
            System.out.print(arr[i] + " ");
        }
        }
        }
===========================================================================================================================================

// removing duplicate elements in the array elements

import java .util.*;
class array11{
  public static void main(String args[]){
    int j=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
   System.out.println( "enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
     System.out.println( "the  array elements are");
    for(int i=0;i<n;i++){
     
      System.out.println("\t" +a[i]);
    }
    for(int i=0;i<n;i++){
     
       if(a[j]!=a[i]){
         a[++j]=a[i];
       }
        }
      
    
   System.out.println( "after removing duplicate elements in the array elements are");
    for(int i=0;i<=j;i++){
      
      System.out.println (a[i]);
    }
    
  }
}
=========================================================================================================================
//to print duplicate elements in the array

import java .util.*;
class arrays18{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);

    System.out.println("enter array size");
    int n=sc.nextInt();
    
    
    System.out.println("enter array");
    int a[]=new int[n];
   System.out.println( "enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
    System.out.println("enter array duplicates are ");
    int j=0;
    for(int i=0;i<n;i++){
      for( j=i+1;j<n;j++){
        if(a[i]==a[j]){
          System.out.println(a[i]);
        }
      
      }
    }
  }
}
==================================================================================================================    
Find the frequencies of all duplicates elements in the array
 Input: arr[] = {2, 3, 4, 5, 4, 6, 4, 7, 4, 5, 6, 6} 
Output: Below is the frequency of repeated elements – 
4 –> 4 
5 –> 2 
6 –> 3
Input: arr[] = {4, 4, 5, 5, 6} 
Output: Below is the frequency of repeated elements – 
4 –> 2 
5 –> 2
=======================================================================================================================
[14:41] Karunakar Eeede

import java.util.*;
class MethodArray1
{
  void arrayMethod()
  {
    int n,i;
     Scanner sc=new Scanner(System.in);  
    System.out.println("Enter Array Size:");
    n=sc.nextInt();
    int a[]=new int[n];   System.out.println("Enter Elements to Array:");
   for(i=0;i<a.length;i++)
     {
       a[i]=sc.nextInt();
     }
  System.out.println("The Elements in an Array is:");
   for(i=0;i<a.length;i++)
     {
      System.out.print("  "+a[i]);
     }  
  }
}
class MethodArray
{
  public static void main(String args[])
  {
     MethodArray1 ma1=new MethodArray1();  
    ma1.arrayMethod();
  }
}                                                      

=====================================================================

//no return & no arguement
import java.util.Scanner;
class array{
  Scanner sc=new Scanner(System.in);
  void arr(){
    System.out.println("enter size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
    System.out.println("enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
     System.out.println("the  array elements are");
    for(int i=0;i<n;i++){
       System.out.println(a[i]);
    }
  }
}
class array13{
  public static void main(String args[]){
    array a=new array();
    a.arr();
  }
}
==========================================================================
55. Remove the dublicate elements in an array
56. Write a JAVAprogram to delete an element from an array at specified position.
57. Write a JAVAprogram to count frequency of each element in an array.
58. Write a JAVAprogram to print all unique elements in the array.
59. Write a JAVAprogram to count total number of duplicate elements in an array.

===================================================================================
//find the second largest number and first largest number
import java.util.Scanner;
class kalyan
{
  public static void main(String args[])
  {
    Scanner sc=new Scanner(System.in);
    int max1,max2,i,n;
    System.out.println("Enter the array size: ");
    n=sc.nextInt();
    int a[]=new int[n];
    System.out.println("Enter the array elements: ");
    for(i=0;i<n;i++)
    {
    a[i]=sc.nextInt();
  }
     max1=max2=0;
    for(i=0;i<n;i++)
      {
        if(a[i]>max1)
        {
          max2=max1;
          max1=a[i];
        }
        if(a[i]>max2 && a[i]!=max1)
          {
          max2=a[i];
      }
      }
System.out.println("The first largest value is:"+max1);
System.out.println("The second largest value is:"+max2);    
  }
}
==================================================================================================

//1 2   2 3  4 4  
//find the largest duplicate element and delete it;
import java.util.Scanner;
class practice1{
  public static void main (String args[]){
    
    int a[]={1, 2  , 2 ,3 , 4, 4  };
    int j=0;
    
    for(int i=0;i<a.length;i++){
     
       for( j=i+1;j<a.length;j++)  {
        if(a[i]==a[j]){
         
         System.out.println("duplicate" +a[i]);
         int max=0;
          if(a[i]>max){
            max=a[i];
          System.out.println("max" +max); 
          if(max==a[i]){
                continue;
                  }
            else{
            System.out.println(a[i]);
            }
       System.out.println("after removing largest duplicate" +a[i]);
          }
          
        }     
  
  }      
    
 }
    }
  }




=====================================================================================
import java.util.*;
class Array2
   {
   public static void main(String args[])
  {
    Scanner sc=new Scanner(System.in);
    int r1,c1,i,j;
    System.out.println("Enter Row Size:");
    r1=sc.nextInt();
    System.out.println("Enter Col Size:");
    c1=sc.nextInt();
     int a[][]=new int[r1][c1];
     int b[][]=new int[r1][c1];
     int c[][]=new int[r1][c1];
  System.out.println("Enter Elements to 1st Matrix:");
  for(i=0;i<r1;i++)
    {
      for(j=0;j<c1;j++)
        { 
          a[i][j]=sc.nextInt();
        }
    }  
System.out.println("Enter Elements to 2nd Matrix:");
  for(i=0;i<r1;i++)
    {
      for(j=0;j<c1;j++)
        { 
          b[i][j]=sc.nextInt();
        }
    }  
  for(i=0;i<r1;i++)
    {
      for(j=0;j<c1;j++)
        { 
          c[i][j]=a[i][j]+b[i][j];
        }
    }  
    System.out.println("The Addition of Two Matricies is:");
    for(i=0;i<r1;i++)
      {
      for(j=0;j<c1;j++)
      {
         System.out.print("  "+c[i][j]);
      }
        System.out.println();
      }       
  }
}
=============================================================================================================



[16:07] Karunakar Eeede
       A                    B
    2    2              2    2
    3    3              3    3      for(i=0;        
     {
           for(j=0;
           {
               c[i][j]=0;
                for(k=0;
                 {
                       c[i][j]=c[i][j]+a[][]*b[][];
                 }
            }
        } 
      00X00+01X10         00X01+01X11




import java.util.*;
class array12{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    
  System.out.println("enter rows");
  int r=sc.nextInt();
    System.out.println("enter 2rows");
  int r1=sc.nextInt();
 System.out.println("enter columns");
  int c=sc.nextInt();
     System.out.println("enter 2columns");
  int c1=sc.nextInt();
     
    if((r==c1)&&(r1==c))
    { 
      System.out.println("enter 1arrays");
    int a[][]=new int[r][c];
    System.out.println("enter 2arrays");
    int b[][]=new int[r1][c1];
    System.out.println("enter 3arrays");
    int d[][]=new int[r][c];
      System.out.println("matrix is possibe");
     System.out.println("enter 1arrays");
    for(int i=0;i<a.length;i++){
       for(int j=0;j<a.length;j++){
         a[i][j]=sc.nextInt();
    }
    }
     System.out.println("enter 2arrays");
    for(int i=0;i<a.length;i++){
       for(int j=0;j<a.length;j++){
         b[i][j]=sc.nextInt();
    }
    }
     System.out.println(" 3arrays multiplication of 1&2 arrays");
    for(int i=0;i<a.length;i++){
       for(int j=0;j<a.length;j++){
         d[i][j]=a[i][j]*b[i][j];
    }
    }
    for(int i=0;i<a.length;i++){
       for(int j=0;j<a.length;j++){
    System.out.println(d[i][j]);
       }
      System.out.println("");
    }
    }
       else
    {
   System.out.println("matrix is not possible");
    }

}
}

===================================================================================================================================
RemoveDuplicates elements in the array

public class RemoveDuplicates {
    public static void main(String[] args) {
        int[] arr = {1, 2, 2, 3, 4, 4, 5, 5, 6};
        int n = arr.length;
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] != arr[j]) {
                arr[++j] = arr[i];
            }
        }
        for (int i = 0; i <= j; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}
=========================================================================================
// Find the frequencies of all duplicates elements in the array
// Input: arr[] = {2, 3, 4, 5, 4, 6, 4, 7, 4, 5, 6, 6} 
// Output: Below is the frequency of repeated elements – 
// 4 –> 4 
// 5 –> 2 
// 6 –> 3
// Input: arr[] = {4, 4, 5, 5, 6} 
// Output: Below is the frequency of repeated elements – 
// 4 –> 2 
// 5 –> 2
import java.util.*;
class frequency{
   public static void main(String[] args) {
      int[] array = { 2, 3, 5, 4, 3, 1, 3, 2, 1, };
       Arrays.sort(array);
      int i,j,frequency;
      System.out.println("These elements are repeated  frequency-");
      for(i=0; i<array.length; i++){
         frequency = 1;
         for(j=i+1; j<array.length; j++){
            if(array[j] == array[i]){
               frequency++;
            } else {
               break;
            }
         }
         i=j-1;
         if(frequency > 1){
            System.out.println(array[i] + " = " + frequency);
         }
      }
   }
}

=============================================================================================================================
//find the second largest and first largest number;

import java .util.*;
class arrays18{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t=0;
    System.out.println("enter array size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
   System.out.println( "enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
    System.out.println("the array elements are");
    for(int i=0;i<n;i++){
     System.out.println(a[i]); 
    }
    int max1=a[0];
    int index=0;
    for(int i=0;i<n;i++){
      index=i;
      if(a[i]>max1){
        max1=a[i];
      }
    }
    
    for(int i=0;i<n;i++){
   
    max1=0;
    max2=max1;
    max1=a[i];
    
    if((a[i]<max2)&&(a[i]>max1))
    {
      max1=a[i];
    }
    }
    System.out.println(max1 +index);
    System.out.println(max2);
  }
}
=====================================================================================================================================================


// Find the frequencies of all duplicates elements in the array
import java .util.*;
class arrays18{
  public static void main(String args[]){
    int j=0;
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
   System.out.println( "enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
     System.out.println( "the  array elements are");
    for(int i=0;i<n;i++){
     
      System.out.println("\t" +a[i]);
    }
    int frequency;
    for(int i=0;i<n;i++){
      frequency=1;
      for( j=i+1;j<n;j++){
        if(a[j]==a[i]){
          frequency++;
        }
        else
          break;
      }
      i=j-1;
      if(frequency>1){
        System.out.println(a[i] +" "+frequency);
      }
    }
  }
}
   
==============================================================================================================================

//no return & no arguement
import java.util.Scanner;
class array{
  Scanner sc=new Scanner(System.in);
  void arr(){
    System.out.println("enter size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
    System.out.println("enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
     System.out.println("the  array elements are");
    for(int i=0;i<n;i++){
       System.out.println(a[i]);
    }
  }
}
class array13{
  public static void main(String args[]){
    array a=new array();
    a.arr();
  }
}
============================================================================================================================
//with parameter with out return
import java.util.*;
class array{
  void arr(int x[]){
    int n,i;
    System.out.println("the  array elements are");
    for(i=0;i<x.length;i++){
       System.out.println(x[i]);
    }
  }
}
class array14{
  public static void main(String args[]){
    
    Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int n=sc.nextInt();
    System.out.println("enter array");
    int a[]=new int[n];
    System.out.println("enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
      }
     array a1=new array();
    a1.arr(a);
  }
}
=========================================================================================================================================
//with return & with parameter
import java.util.Scanner;
class array{
  int[] arr(int x[]){
    int m[]=new int[x.length];
      for(int i=0;i<x.length;i++){
        m[i]=x[i];
      }
    return m;
  }
}
  class array15{
    public static void main(String args[]){
      Scanner sc=new Scanner(System.in);
    System.out.println("enter size");
    int n=sc.nextInt();
   
    int a[]=new int[n];
    System.out.println("enter array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
      array h=new  array();
   int   k[]=h.arr(a);
      System.out.println("the entered array elements");
      for(int i=0;i<n;i++){
       System.out.println(k[i]);
    }
    }
  }

  ==========================================================================================================================


import java.util.Scanner;
class ArrayDemo
  {
    int i,j,t;
    Scanner sc=new Scanner(System.in);
    void getArray(int a[],int n)
    {
      for(i=0;i<n;i++)
        {
          a[i]=sc.nextInt();
        } 
    }
    void dispArray(int a[],int n)
    {
        for(i=0;i<n;i++)
        {
          System.out.print("  "+a[i]);
        }
    }
    void bubble(int a[],int n)
    {
       for(i=0;i<n-1;i++)
        {
          for(j=0;j<n-1-i;j++)
            {
              if(a[j]>a[j+1])
              {
                t=a[j];
                a[j]=a[j+1];
                a[j+1]=t;
              }
            }
        }
    }
  }
class Array1
  {
    public static void main(String args[])
    {
      int i,n;
      ArrayDemo ad1=new ArrayDemo();
      Scanner sc=new Scanner(System.in);  
     System.out.println("Enter Array Size:");
      n=sc.nextInt();
      int a[]=new int[n];
     System.out.println("Enter Elements to Array:");
     ad1.getArray(a,n);
    System.out.println("The Elements Before Sorting is:");
    ad1.dispArray(a,n);   
    ad1.bubble(a,n);
System.out.println("\nThe Elements After Sorting is:");
      ad1.dispArray(a,n);
    }
  }
===============================================================================================================


import java.util.*;
class Array {
Scanner sc = new Scanner(System.in);
int i, j;
void getMatrix(int x[][], int r, int c)
  {
    for(i=0;i<r;i++)
    {
      for(j=0;j<c;j++)
        {
          x[i][j]=sc.nextInt();
        }
    }  
  }
  void dispMatrix(int x[][], int r, int c) {
    for(i=0;i<r;i++)
      {
      for(j=0;j<c;j++)
      {
         System.out.print("  "+x[i][j]);
       }
        System.out.println();
      }    
  }
  void matAdd(int a[][], int b[][], int c[][], int r1, int c1) {
    for(i=0;i<r1;i++)
    {
      for(j=0;j<c1;j++)
        { 
          c[i][j]=a[i][j]+b[i][j];
        }
    }  
  }
} 
class Array16 {
 public static void main(String args[]) {
 Array ad1 = new Array();
 Scanner sc = new Scanner(System.in);
int r1, c1, i, j;
System.out.println("Enter Row Size:");
r1 = sc.nextInt();
 System.out.println("Enter Col Size:");
  c1 = sc.nextInt();
int a[][] = new int[r1][c1];
int b[][] = new int[r1][c1];
int c[][] = new int[r1][c1];
    System.out.println("Enter Elements to 1st Matrix:");
    ad1.getmatrix(a,r,c)
    System.out.println("Enter Elements to 2nd Matrix:");
    ad1.getmatrix(b,r,c)
    System.out.println("The Elements in 1st matrix is:");
    ad1.dismatrix(a,r,c)
    System.out.println("The Elements in 2nd matrix is:");
    ad1.dismatrix(b,r,c)
    System.out.println("The Addition of Two Matricies is:");
    ad1.matAdd(a,b,c,r,c)
  }
}

===========================================================================================
Substring in Java
A part of String is called substring. In other words, substring is a subset of another String. Java String class provides the built-in substring()
 method that extract a substring from the given string by using the index values passed as an argument. In case of substring() method startIndex is
 inclusive and endIndex is exclusive.

========================================================================================
// substring dymamically

import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
     System.out.println("enter new string");
    String s=sc.nextLine();
     System.out.println("enter new index position");
    int s1=sc.nextInt();
     System.out.println("enter ending index position");
    int s2=sc.nextInt();
    System.out.println("enter ending index posiyion");
    int s4=sc.nextInt();
    System.out.println(s.substring(s1,s2));
    System.out.println(s.substring(s4));
  }
}
============================================================================

//substring
class string1{
  public static void main(String args[]){
    String st1="pavankalyan";
    System.out.println(st1.substring(3));
    System.out.println(st1.substring(2,6));
    
  }
}
========================================================================
//substring
import java.util.Scanner;
class string0{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println(st1.substring(3));
    System.out.println(st1.substring(2,6));
    
  }
}
=================================================================
Lowercase: It is used to change the text from uppercase to lowercase.

Uppercase: It is used to covert the text from lowercase to uppercase.
===========================================================================
//toUpperCase   //tolowerCase()
class string2{
  public static void main(String args[]){
    String st1="pavankalyan";
     String st2="PAVANKALYAN";
    System.out.println(st1.toUpperCase());
    System.out.println(st1.toLowerCase());
    
  }
}
====================================================================================================
import java.util.Scanner;
class string{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println("enter string2");
    String st2=sc.nextLine();
    System.out.println(st1.toUpperCase());
    System.out.println(st1.toLowerCase());
    
  }
}
=================================================================================================================

//entering string
class StrDemo
  {
    public static void main(String args[])
    {
       String st1="Welcome";      
   String st2=new String("KARUN");      
 System.out.println("The Given String1 is:"+st1);    
 System.out.println("The Given String2 is:"+st2);       
    }
   }
===========================================================================================

//enter string through scan

import java.util.Scanner;
class string6{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String s=sc.next();
    String st2=new String(s);
    System.out.println(st2);
    System.out.println(s);
  }
}
==========================================================================================
//entering string through line
import java.util.*;
class StrDemo
  {
    public static void main(String args[])
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("Enter Any String:");
       String st1=sc.nextLine();     
  System.out.println("The Given String1 is:"+st1);
    }
  }

==============================================================================================
//entering string through line scan

import java.util.Scanner;
class string7{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String s=sc.nextLine();
    System.out.println(s);
  }
}
===================================================================================================
Java String length()
The Java String class length() method finds the length of a string. 
The length of the Java string is the same as the Unicode code units of the string.
==================================================================================================
//find the string length() of a character

class string16{
  public static void main(String args[]){
    String st="pavan";
    System.out.println(st.length());
  }
}



====================================================================================================
//find the string length() of a character through scan

import java.util.Scanner;
class string17{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    
    System.out.println(st1.length());
  }
}
===================================================================================================
Java String equals()
The Java String class equals() method compares the two given strings based on the content of the string. 
If any character is not matched, it returns false. If all characters are matched, it returns true.

The String equals() method overrides the equals() method of the Object class.
===========================================================================================================
Java String equalsIgnoreCase()
The Java String class equalsIgnoreCase() method compares the two given strings on the basis of the content of the string irrespective of the case 
(lower and upper) of the string. It is just like the equals() method but doesn't check the case sensitivity. If any character is not matched, it returns
 false, else returns true.
==============================================================================================================
Check whether both are equals are not and equal ignore cases
import java.util.Scanner;
class practice{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter string");
    String s=sc.nextLine();
     System.out.println("enter string");
    String s1=sc.nextLine();
    System.out.println("enter string");
    String s2=sc.nextLine();
     System.out.println("enter string");
    String s3=sc.nextLine();
      if(s.equals(s1)){
     System.out.println("equals"); 
    }
    else
    System.out.println("not equals");  
    if(s2.equalsIgnoreCase(s3)){
     System.out.println("equals"); 
    }
    else
    System.out.println("not equals");  
    
  }
}
========================================================================================================================================

//string equals to

class string4{
  public static void main(String args[]){
    String st1="pavankalyan";
     String st2="PAVANKALYAN";
 System.out.println(   st1.equals(st2));
   
      if(st1.equalsIgnoreCase(st2)){
          System.out.println("both are equals");
    }
    else{
     System.out.println("both are not equals"); 
    }
  }
}
===================================================================================================
java String charAt()
The Java String class charAt() method returns a char value at the given index number.

The index number starts from 0 and goes to n-1, where n is the length of the string. It returns StringIndexOutOfBoundsException, 
if the given index number is greater than or equal to this string length or a negative number.
===============================================================================================
// charAt():-

class string18{
  public static void main(String args[]){
    String st="pavan";
     System.out.println(st.charAt(3));
  }
}
==============================================================================
// charAt():- scan
import java.util.Scanner;
class string17{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println(st1.charAt(3));
  }
}
=============================================================================

//charAt()

class string18{
  public static void main(String args[]){

 
    String st1=sc.nextLine();
    System.out.println(st1.charAt(a));
  }
}
=============================================================================
Java String indexOf()
The Java String class indexOf() method returns the position of the first occurrence of the specified character or string in a specified string.

Signature
There are four overloaded indexOf() method in Java. The signature of indexOf() methods are given below:

No.	Method	                                                               Description
1	int indexOf(int ch)               	                   It returns the index position for the given char value
2	int indexOf(int ch, int fromIndex)	                   It returns the index position for the given char value and from index
3	int indexOf(String substring)	                          It returns the index position for the given substring
4	int indexOf(String substring, int fromIndex)	             It returns the index position for the given substring and from index
g
======================================================================================================================================================


[12:19] Karunakar Eeede
// indexOf():-
//index of
public class string20 {
  public static void main(String[] args) {
    String myStr = "Hello planet earth, you are a great planet.";
    System.out.println(myStr.indexOf("e"));
  }
}

=================================================================================
//index of
   import java.util.Scanner;
class string21{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println(st1.indexOf("e"));
    System.out.println(st1.lastIndexOf('s',5));  
  }
}    


======================================================================================================
//equals to
class string3{
  public static void main(String args[]){
    String st1="pavankalyan";
     String st2="PAVANKALYAN";
    if(st1.equals(st2)){
          System.out.println("both are equals");
    }
    else{
     System.out.println("both are not equals"); 
    }
  }
}

=================================================================================================================
//equals through scan
import java.util.Scanner;
class string3a{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
     System.out.println("enter string2");
    String st2=sc.nextLine();
    if(st1.equals(st2)){
          System.out.println("both are equals");
    }
    else{
     System.out.println("both are not equals"); 
    }
  }
}
=================================================================================================
//string equalsignore cases

class string4{
  public static void main(String args[]){
    String st1="pavankalyan";
     String st2="PAVANKALYAN";
 System.out.println(   st1.equals(st2));
   
      if(st1.equalsIgnoreCase(st2)){
          System.out.println("both are equals");
    }
    else{
     System.out.println("both are not equals"); 
    }
  }
}
====================================================================================================
//equals ignore cases scan
import java.util.Scanner;
class string4a{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println("enter string2");
    String st2=sc.nextLine();
 System.out.println(   st1.equals(st2));
   
      if(st1.equalsIgnoreCase(st2)){
          System.out.println("both are equals");
    }
    else{
     System.out.println("both are not equals"); 
    }
  }
}
=======================================================================================================
//replace
class string9{
  public static void main(String args[]){
    String st1="pavankalyan";
     String st2="PAVANKALYAN";
  
    System.out.println(st1.replace('a','e'));
  }
}
==============================================================================================================
//replace =scan

import java.util.Scanner;
class string8a{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println("enter string2");
    String st2=sc.nextLine();
  
    System.out.println(st1.replace('a','e'));
    System.out.println(st2.replace('a','e'));
  }
}
======================================================================================================================
//replace scan
import java.util.Scanner;
class string11{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
     System.out.println("enter string1");
    String s=sc.next();
    String st1=s;
     String st2=s;
  
    System.out.println(st1.replace('a','e'));
  }
}
===========================================================================================================
reverseof();
//There are many ways to reverse String in Java. We can reverse String using StringBuffer, StringBuilder, iteration etc.
 Let's see the ways to reverse String in Java.

import java.util.Scanner;
class practice{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    StringBuffer s=new StringBuffer(st1);
    System.out.println(s.reverse());
  }
}


====================================================================================================================
//concat

 class StrDemo
  {
    public static void main(String args[])
    {
      String st1="WELCOME";
      String st2="Hello";
    System.out.println("The String 1 is:"+st1.replace('E','A'));  
   System.out.println("The String concat is:"+st1+st2);  
     System.out.println("The String concat is: "+st2.concat(st1));
    }
  }

=============================================================================================
//reverse of charater through scan
import java.util.*;
class string14{
  public static void main(String args[]){
    Scanner sc=new Scanner( System.in);
    System.out.println("enter string");
    String s=sc.nextLine();
    String k=" ";
    for(int i=s.length()-1;i>=0;i--){
      k=k+s.charAt(i);
    }
    System.out.println(k);
  }
}
===============================================================================================



Java StringBuffer capacity() method
The capacity() method of Java StringBuffer class returns the current capacity of the string buffer. The capacity refers to the total amount of characters 
storage size in string buffer. An empty StringBuffer class contains the default 16 character capacity. If the number of the character increases from its current
 capacity, it increases the capacity by (oldcapacity*2)+2.



Java StringBuffer Class
Java StringBuffer class is used to create mutable (modifiable) String objects. The StringBuffer class in Java is the same as String class except
 it is mutable i.e. it can be changed.

Note: Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.
Important Constructors of StringBuffer Class


Constructor	                                                                                   Description
StringBuffer()                                            	         It creates an empty String buffer with the initial capacity of 16.
StringBuffer(String str)	                                          It creates a String buffer with the specified string..
StringBuffer(int capacity)                                   	It creates an empty String buffer with the specified capacity as length.
Important methods of StringBuffer class



Modifier and Type	Method	Description
public synchronized StringBuffer	append(String s)	
It is used to append the specified string with this string. 
The append() method is overloaded like append(char), append(boolean), append(int), append(float), append(double) etc.



public synchronized StringBuffer	insert(int offset, String s)	
It is used to insert the specified string with this string at the specified position.
 The insert() method is overloaded like insert(int, char), insert(int, boolean), insert(int, int), insert(int, float), insert(int, double) etc.


public synchronized StringBuffer	replace(int startIndex, int endIndex, String str)
	It is used to replace the string from specified startIndex and endIndex.

public synchronized StringBuffer	delete(int startIndex, int endIndex)
	It is used to delete the string from specified startIndex and endIndex.


public synchronized StringBuffer	reverse()	
is used to reverse the string.


public int	capacity()
	It is used to return the current capacity.


public void	ensureCapacity(int minimumCapacity)
	It is used to ensure the capacity at least equal to the given minimum.


public char	charAt(int index)
	It is used to return the character at the specified position.


public int	length()	It is used to return the length of the string i.e. total number of characters.



public String	substring(int beginIndex)	It is used to return the substring from the specified beginIndex.



public String	substring(int beginIndex, int endIndex)	It is used to return the substring from the specified beginIndex and endIndex.




What is a mutable String?
A String that can be modified or changed is known as mutable String. StringBuffer and StringBuilder classes are used for creating mutable strings.

===================================================================================================================

1) StringBuffer Class append() Method
The append() method concatenates the given argument with this String.

StringBufferExample.java



class StringBufferExample{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer("Hello ");  
sb.append("Java");//now original string is changed  
System.out.println(sb);//prints Hello Java  
}  
}  
Output:

Hello Java



===================================================================================================================

2) StringBuffer insert() Method
The insert() method inserts the given String with this string at the given position.

StringBufferExample2.java

class StringBufferExample2{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer("Hello ");  
sb.insert(1,"Java");//now original string is changed  
System.out.println(sb);//prints HJavaello  
}  
}  
Output:

HJavaello
===================================================================================================================
3) StringBuffer replace() Method
The replace() method replaces the given String from the specified beginIndex and endIndex.

StringBufferExample3.java

class StringBufferExample3{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer("Hello");  
sb.replace(1,3,"Java");  
System.out.println(sb);//prints HJavalo  
}  
}  
Output:

HJavalo 
===================================================================================================================
4) StringBuffer delete() Method
The delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.


StringBufferExample4.java

class StringBufferExample4{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer("Hello");  
sb.delete(1,3);  
System.out.println(sb);//prints Hlo  
}  
}  
Output:

Hlo 


import java.util.Scanner;
class practice{
  public static void main(String args[]){
   Scanner sc=new Scanner(System.in);
    String k=sc.nextLine();
    StringBuffer s=new StringBuffer();
      StringBuffer s1=new StringBuffer(k);
    System.out.println(s1.delete(1,3));
  }
}

===================================================================================================================
5) StringBuffer reverse() Method
The reverse() method of the StringBuilder class reverses the current String.

StringBufferExample5.java

class StringBufferExample5{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer("Hello");  
sb.reverse();  
System.out.println(sb);//prints olleH  
}  
}  
Output:


olleH 

=================================================================================================================== 
6) StringBuffer capacity() Method
The capacity() method of the StringBuffer class returns the current capacity of the buffer. 
The default capacity of the buffer is 16. If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2. 
For example if your current capacity is 16, it will be (16*2)+2=34.

StringBufferExample6.java

class StringBufferExample6{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer();  
System.out.println(sb.capacity());//default 16  
sb.append("Hello");  
System.out.println(sb.capacity());//now 16  
sb.append("java is my favourite language");  
System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2  
}  
}  
Output:                      


16
16
34

============================================================================================================================
7) StringBuffer ensureCapacity() method
The ensureCapacity() method of the StringBuffer class ensures that the given capacity is the minimum to the current capacity. 
If it is greater than the current capacity, it increases the capacity by (oldcapacity*2)+2. For example if your current capacity is 16, it will be (16*2)+2=34.

StringBufferExample7.java

class StringBufferExample7{  
public static void main(String args[]){  
StringBuffer sb=new StringBuffer();  
System.out.println(sb.capacity());//default 16  
sb.append("Hello");  
System.out.println(sb.capacity());//now 16  
sb.append("java is my favourite language");  
System.out.println(sb.capacity());//now (16*2)+2=34 i.e (oldcapacity*2)+2  
sb.ensureCapacity(10);//now no change  
System.out.println(sb.capacity());//now 34  
sb.ensureCapacity(50);//now (34*2)+2  
System.out.println(sb.capacity());//now 70  
}  
}  
Output:

16
16
34
34
70



====================================================================================================================================

//buffer class
class StrDemo
  {
    public static void main(String args[])
    {
       StringBuffer st1=new StringBuffer();
       StringBuffer st2=new StringBuffer("Welcome");
      System.out.println("The Default Capacity is:"+st1.capacity());
      System.out.println("The Capacity of St2:"+st2.capacity());    
   System.out.println("The Given String 2 is:"+st2);  
     System.out.println("The Reverse of the given String is:"+st2.reverse());
    }
  }

==============================================================================================
//buffer class scan
import java.util.Scanner;
class string10{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
     System.out.println("enter string1");
    String s=sc.nextLine();
    StringBuffer st1=new StringBuffer();
    StringBuffer st2=new StringBuffer(s);
    System.out.println(st1);

 System.out.println("The Default Capacity is:"+st1.capacity());
 System.out.println("The Capacity of St2:"+st2.capacity());
    System.out.println("The Given String 2 is:"+st2);
    System.out.println("The Reverse of the given String is:"+st2.reverse());
  }
}

===========================================================================

//string count;

class string12{
  public static void main(String args[]){
    String st1="welcome";
    String st2="pavan";
    int count=0;
    for(int i=0;i<st1.length();i++){
      count++;
    }
    int count1=0;
    for(int i=0;i<st2.length();i++){
      count1++;
    }
    System.out.println("the length of given string is" +count);
     System.out.println("the length of given string is" +count1);
  }
}
======================================================================================================
//string count;-scanner
import java.util.Scanner;
class string13{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String s=sc.nextLine();
    System.out.println("enter string1");
    String g=sc.nextLine();
    String st1=s;
    String st2=g;
    int count=0;
    for(int i=0;i<st1.length();i++){
      count++;
    }
    int count1=0;
    for(int i=0;i<st2.length();i++){
      count1++;
    }
    System.out.println("the length of given string is" +count);
     System.out.println("the length of given string is" +count1);
  }
}
====================================================================================================
//print the largest and the smallest word

import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    String k=s.toLowerCase();
    String words[]=k.split(" ");
   String largestword=words[0];
    String smallestword=words[0];
    for(int i=0;i<words.length;i++){
     if(words[i].length()>largestword.length()){
       largestword=words[i];
     }
      for(int j=0;j<words.length;j++){
      if(words[i].length()<smallestword.length()){
        smallestword=words[i];
      }
      }
      
    }
    System.out.println(" " +largestword);
      System.out.println(" " +smallestword);
  }
}



========================================================================================================================
//print all the numbers in alphabetical orders

import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    String k="";
    for(char ch='a';ch<='z';ch++){
      for(int i=0;i<s.length();i++){
        if(ch==s.charAt(i)){
          k=k+s.charAt(i);
        }
      }
      
    }
    System.out.println(k);
  }
}
=========================================================================================================
// print the reverse of string

import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    String k=s.toLowerCase();
    String words[]=k.split(" ");
    String word="";
    for(int i=0;i<words.length;i++){
      word=words[i];
    String  reverse="";
      for(int j=word.length()-1;j>=0;j--){
        reverse+=word.charAt(j);
      }
       System.out.print(" " +reverse);
    }
   
  }
}



==========================================================================================================================
//check its character last position

import java.util.Scanner;
class practice{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    char c=sc.next().charAt(0);
    
      for(int i=0;i<s.length();i++){
        if(s.charAt(i)==c){
          System.out.println(i +" " +s.charAt(i));
        }
      }
      
    }
  }
===================================================================================================================
//palindrome
import java.util.*;
class string15{
  public static void main(String args[]){
    Scanner sc=new Scanner( System.in);
    System.out.println("enter string");
    String s=sc.nextLine();
    String k="";
    for(int i=s.length()-1;i>=0;i--){
      k=k+s.charAt(i);
    }
    
    if(s.equals(k)){
    System.out.println("the string is palindrome"); 
    }
    else
     System.out.println("the string is not palindrome"); 
  }
}
======================================================================================
//concat

class string8{
  public static void main(String args[]){
    String st1="pavankalyan";
     String st2="PAVANKALYAN";
   System.out.println(st1+st2);
    System.out.println(st1.concat(st2));
  }
}
=============================================================================
//concat scan
import java.util.Scanner;
class string8a{
  public static void main(String args[]){
  Scanner sc=new Scanner(System.in);
    System.out.println("enter string1");
    String st1=sc.nextLine();
    System.out.println("enter string2");
    String st2=sc.nextLine();
   System.out.println(st1+st2);
    System.out.println(st1.concat(st2));
  }
}
================================================================================
//vowels and consonents count
import java.util.Scanner;
class string22{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter string");
    String s=sc.next();
    int vowels=0,consonents=0;
    for(int i=0;i<s.length();i++){
    char ch=s.charAt(i);
      if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'){
         vowels++;
      }
      else
        consonents++;
         
  }
    System.out.println("enter string vowels count" +vowels );
System.out.println("enter string are consonants" +consonents);
}
}
=================================================================================================================================================
Java String trim()
The Java String class trim() method eliminates leading and trailing spaces. The Unicode value of space character is '\u0020'. The trim() method in Java string
 checks this Unicode value before and after the string, if it exists then the method removes the spaces and returns the omitted string.

The string trim() method doesn't omit middle spaces.
Signature
The signature or syntax of the String class trim() method is given below:


public String trim()  
Returns
string with omitted leading and trailing spaces

Internal implementation
public String trim() {    
        int len = value.length;    
        int st = 0;    
        char[] val = value;    /* avoid getfield opcode */    
    
        while ((st < len) && (val[st] <= ' ')) {    
            st++;    
        }    
        while ((st < len) && (val[len - 1] <= ' ')) {    
            len--;    
        }    
        return ((st > 0) || (len < value.length)) ? substring(st, len) : this;    
    } 
   
Java String trim() Method Example
FileName: StringTrimExample.java
Play Video

public class StringTrimExample{  
public static void main(String args[]){  
String s1="  hello string   ";  
System.out.println(s1+"javatpoint");//without trim()  
System.out.println(s1.trim()+"javatpoint");//with trim()  
}}  
Test it Now
Output

hello string   javatpoint
hello stringjavatpoint 

=======================================================================================================================================================  
Java String trim() Method Example 2
The example demonstrates the use of the trim() method. This method removes all the trailing spaces so the length of the string also reduces. Let's see an example.

FileName: StringTrimExample2.java

public class StringTrimExample2 {    
    public static void main(String[] args) {    
        String s1 ="  hello java string   ";    
        System.out.println(s1.length());    
        System.out.println(s1); //Without trim()    
        String tr = s1.trim();    
        System.out.println(tr.length());    
        System.out.println(tr); //With trim()    
    }    
}    
Output

22
  hello java string   
17
hello java string
=======================================================================================================================================================  

Java String trim() Method Example 3
The trim() can be used to check whether the string only contains white spaces or not. The following example shows the same.

FileName: TrimExample3.java

public class TrimExample3  
{  
// main method  
public static void main(String argvs[])  
{  
  
String str = " abc ";  
  
if((str.trim()).length() > 0)  
{  
System.out.println("The string contains characters other than white spaces \n");  
}  
else  
{  
System.out.println("The string contains only white spaces \n");     
}  
  
str = "    ";  
  
if((str.trim()).length() > 0)  
{  
System.out.println("The string contains characters other than white spaces \n");  
}  
else  
{  
System.out.println("The string contains only white spaces \n");     
}  
  
}  
}  
Output

The string contains characters other than white spaces 

The string contains only white spaces
=======================================================================================================================================================  

Java String trim() Method Example 4
Since strings in Java are immutable; therefore, when the trim() method manipulates the string by trimming the whitespaces, 
it returns a new string. If the manipulation is not done by the trim() method, then the reference of the same string is returned. Observe the following example.
=======================================================================================================================================================

//string join to combine the strings
import java.util.Scanner;
class practice{
  public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter string");
    String s=sc.nextLine();
     String s1=sc.nextLine();
     String s12=sc.nextLine();
   String s4=String.join("/",s,s1,s12);
    System.out.println(s4);
  }
}

=======================================================================================================================================================
//Java program that uses a loop to find the last non-repeated character from a string of this is sample sentence

public class array49 {
    public static void main(String[] args) {
        String str = "this is sample sentence";
        char firstNonRepeatedChar = '0';
        
        // loop through the string and check if each character has a count of 1
        for (int i = 0; i < str.length(); i++) {
            char currentChar = str.charAt(i);
            boolean isRepeated = false;
            for (int j = 0; j < str.length(); j++) {
                if (i != j && currentChar == str.charAt(j)) {
                    isRepeated = true;
                    break;
                }
            }
            if (!isRepeated) {
                firstNonRepeatedChar = currentChar;
                break;
            }
        }
        
        // output the first non-repeated character
        System.out.println("The first non-repeated character in \"" + str + "\" is " + firstNonRepeatedChar);
    }
}
========================================================================================================================================
// Java program that uses a loop to find the last non-repeated character from a string of this is sample sentence

public class LastNonRepeatedCharacter {
    public static void main(String[] args) {
        String str = "this is sample sentence";
        char lastNonRepeatedChar = '\0';
        
        // loop through the string and check if each character has a count of 1
        for (int i = str.length() - 1; i >= 0; i--) {
            char currentChar = str.charAt(i);
            boolean isRepeated = false;
            for (int j = str.length() - 1; j >= 0; j--) {
                if (i != j && currentChar == str.charAt(j)) {
                    isRepeated = true;
                    break;
                }
            }
            if (!isRepeated) {
                lastNonRepeatedChar = currentChar;
                break;
            }
        }
        
        // output the last non-repeated character
        System.out.println("The last non-repeated character in \"" + str + "\" is " + lastNonRepeatedChar);
    }
}

=============================================================================================================================================
FileName: TrimExample4.java

public class TrimExample4  
{  
// main method  
public static void main(String argvs[])  
{  
  
// the string contains white spaces  
// therefore, trimming the spaces leads to the  
// generation of new string  
String str = " abc ";  
  
// str1 stores a new string   
String str1 = str.trim();  
  
// the hashcode of str and str1 is different  
System.out.println(str.hashCode());  
System.out.println(str1.hashCode() + "\n");  
  
// no white space present in the string s  
// therefore, the reference of the s is returned   
// when the trim() method is invoked  
String s = "xyz";  
String s1 = s.trim();  
  
// the hashcode of s and s1 is the same  
System.out.println(s.hashCode());  
System.out.println(s1.hashCode());  
  
}  
}  
Output

The string contains characters other than white spaces 

The string contains only white spaces

Java program that uses a loop to find the longest palindromic substring in a string:

======================================================================================================================================================= 
Java String contains()
The Java String class contains() method searches the sequence of characters in this string. It returns true if the sequence of char values is found in 
this string otherwise returns false.

Signature
The signature of string contains() method is given below:

public boolean contains(CharSequence sequence)    
Parameter
sequence : specifies the sequence of characters to be searched.

Returns
true if the sequence of char value exists, otherwise false.



Exception
NullPointerException : if the sequence is null.

Internal implementation
public boolean contains(CharSequence s) {    
      return indexOf(s.toString()) > -1;    
  } 
   
Here, the conversion of CharSequence takes place into String. After that, the indexOf() method is invoked. The method indexOf() either returns 0 or a number greater
 than 0 in case the searched string is found.

However, when the searched string is not found, the indexOf() method returns -1. Therefore, after execution, the contains() method returns true when
 the indexOf() method returns a non-negative value (when the searched string is found); otherwise, the method returns false.


=======================================================================================================================================================================
Java String contains() Method Example
FileName: ContainsExample.java

class ContainsExample{  
public static void main(String args[]){  
String name="what do you know about me";  
System.out.println(name.contains("do you know"));  
System.out.println(name.contains("about"));  
System.out.println(name.contains("hello"));  
}}  
Test it Now
Output:

true
true
false
=======================================================================================================================================================================
Java String contains() Method Example 2
The contains() method searches case-sensitive char sequence. If the argument is not case sensitive, it returns false. Let's see an example.

FileName: ContainsExample2.java

public class ContainsExample2 {  
    public static void main(String[] args) {  
        String str = "Hello Javatpoint readers";  
        boolean isContains = str.contains("Javatpoint");  
        System.out.println(isContains);  
        // Case Sensitive  
        System.out.println(str.contains("javatpoint")); // false  
    }  
}  
Output:


true
false
=======================================================================================================================================================================
Java String contains() Method Example 3
The contains() method is helpful to find a char-sequence in the string. We can use it in the control structure to produce the search-based result. Let's see an example.

FileName: ContainsExample3.java

public class ContainsExample3 {   
    public static void main(String[] args) {          
        String str = "To learn Java visit Javatpoint.com";        
        if(str.contains("Javatpoint.com")) {  
            System.out.println("This string contains javatpoint.com");  
        }else  
            System.out.println("Result not found");       
    }  
}  
Output:

This string contains javatpoint.com
Java String contains() Method Example 4
The contains() method raises the NullPointerException when one passes null in the parameter of the method. The following example shows the same.

FileName: ContainsExample4.java
=======================================================================================================================================================================
public class ContainsExample4   
{  
// main method  
public static void main(String argvs[])  
{  
String str = "Welcome to JavaTpoint!";  
  
// comparing a string to null  
if(str.contains(null))  
{  
System.out.println("Inside the if block");  
}  
else  
{  
System.out.println("Inside the else block");  
}  
  
}  
}  
Output:

Exception in thread "main" java.lang.NullPointerException
	at java.base/java.lang.String.contains(String.java:2036)
	at ContainsExample4.main(ContainsExample4.java:9)

Limitations of the Contains() method
Following are some limitations of the contains() method:

=================================================================================================================================================================

The contains() method should not be used to search for a character in a string. Doing so results in an error.
The contains() method only checks for the presence or absence of a string in another string. It never reveals at which index the searched index 
is found. Because of these limitations, it is better to use the indexOf() method instead of the contains() method. 
=======================================================================================================================================================================
[11:26] Karunakar Eeede
Input:-1, 2, -3, 4, 5, 6, -7, 8, 9 , -47
Output:-1, -3, -7,-47, 2, 4, 5, 6,  8, 9 

/*
*   Let {1,2,3,4,6}:  But Actual size=6 since one missing.(Here 5 is missing).
*   Calculate Expected Total=> n(n+1)/2 = 6*7/2 = 21.
*   Actual total = 1+2+3+4+6= 16.
*   Missing num= ET-At= 21-16= 5.
*/

Counting the frequency of elements in an array:

Printing the second largest and second smallest element in an array:int numbers
a[] = {32, 43, 53, 54, 32, 65, 63, 98, 43, 23};
 like 2


         Finding the second most frequent element in an array:int numbers[] = {1, 2, 4, 4, 5, 6, 6, 7, 2};


=========================================================================================================================================================================  

[10:24] Karunakar Eeede
Instance Variables
---------------------
class Demo
{
     int a,b;  --------------------------> Instance Variables
     void display()
      {
       }
} Local Variables
------------------
class Demo
{
     void display()
      {
                int a,b;  ----------------------> Local Variables
       }
} Static Variables
-------------------
class Demo
{
     static int a,b;   -------------------------> Static Variables
     static void display()
      {
       }
}

==============================================================================================================================================77777777777777777777777

// setters and getters 


class Student
{
    private int number = 9001;
    private String name = "Karun"; 
 
   public void setNumber(int number) 
    {
        this.number = number;
    }     
  public int getNumber()
    {
        return number;
    }   
   public void setName(String name) 
    {
        this.name = name;
    }   
    public String getName() 
     {
       return name;
    }     
    public void printStudent() 
    {
        System.out.println("Number is..." + number);
        System.out.println("Name is..." + name);
    }
} 
 public class Main
{
    public static void main(String[] args) 
                {
        Student st = new Student();
        st.printStudent();     
       st.setNumber(4005);
        st.setName("suma");         
        System.out.println("name is.." + st.getName());
        System.out.println("Number is..." + st.getNumber());
    }
 }
============================================================================================================================
class worker{
  private float height=3.5f;
  private String colour="white";

public void setheight(float height){
  this.height=height;
}
public void setcolour(String colour){
  this.colour=colour;
}
  public String getcolour(){
    return colour;
  }
  public float getheight(){
    return height;
  }
  public void display(){
    System.out.println(height);
     System.out.println(colour);
  }
}
public class ste2{
  public static void main(String args[]){
    worker w=new worker();
    w.setheight(4.5f);
    w.setcolour("white");
    
    w.display();
     w.setheight(4.5678f);
    w.setcolour("whiteerwer");
     System.out.println(w.getheight());
     System.out.println(w.getcolour());
  }
}
===============================================================================================================================
class constructer1{
  int a,b;
  constructer1(){
    int a=10;
    int b=20;
    System.out.println(a+b);
  }
  constructer1(int n){
    System.out.println(n*n);
  }
  constructer1(int x,int y){
   a=x;
    b=y;
    System.out.println(x*y);
  }
}
class con{
  public static void main(String args[]){
    constructer1 c=new  constructer1();
    constructer1 c1=new  constructer1(10);
     constructer1 c11=new  constructer1(1056,865);
  }
}
======================================================================================================
class Condemo1
  {
      int a,b;
    Condemo1(int x,int y)  // Parameterized Constructor
    {
      a=x;
      b=y;
    }
    void display()
    {
      System.out.println("The a value is:"+a);
      System.out.println("The b value is:"+b);
    }
  }
class Condemo
  {
    public static void main(String args[])
    {
       Condemo1 c1=new Condemo1(100,200);  
       c1.display();
    }
  }
===================================================================
class Condemo1
  {
      int a,b;
    Condemo1() // Non - Parameterized Constructor
    {
      a=10;
      b=20;
    }
    void display()
    {
      System.out.println("The a value is:"+a);
      System.out.println("The b value is:"+b);
    }
  }
class Condemo
  {
    public static void main(String args[])
    {
       Condemo1 c1=new Condemo1();  
       c1.display();
    }
  }

===================================================================================

class Condemo1
  {
      int a,b;
    Condemo1() 
    {
      System.out.println("Its Default Constructor");
    }
    Condemo1(int n) 
    {
      System.out.println("The n value is:"+n);
    }
    Condemo1(int x,int y) 
    {
      a=x;
      b=y;
    }
    void display()
    {
      System.out.println("The a value is:"+a);
      System.out.println("The b value is:"+b);
    }
  }
class stud
  {
    public static void main(String args[])
    
     {
       Condemo1 c2=new Condemo1(); 
       Condemo1 c3=new Condemo1(123); 
       Condemo1 c1=new Condemo1(100,200);  
       c1.display();
    }
  } 

==================================================================



//do the java program multilevel inheritence and take 3subjects and display their  total and average

class Student {
    String name;
    int rollNo;
    
    Student(String name, int rollNo) {
        this.name = name;
        this.rollNo = rollNo;
    }
}

class Marks extends Student {
    int subject1Marks;
    int subject2Marks;
    int subject3Marks;
    
    Marks(String name, int rollNo, int subject1Marks, int subject2Marks, int subject3Marks) {
        super(name, rollNo);
        this.subject1Marks = subject1Marks;
        this.subject2Marks = subject2Marks;
        this.subject3Marks = subject3Marks;
    }
    
    int getTotalMarks() {
        return subject1Marks + subject2Marks + subject3Marks;
    }
    
    double getAverageMarks() {
        return (double) getTotalMarks() / 3;
    }
}

class Result extends Marks {
    String division;
    
    Result(String name, int rollNo, int subject1Marks, int subject2Marks, int subject3Marks) {
        super( name, rollNo, subject1Marks, subject2Marks, subject3Marks );
         setDivision();
    }
   
    void setDivision() {
        double percentage = getAverageMarks();
        if (percentage >= 60) {
            division = "First";
        } else if (percentage >= 50) {
            division = "Second";
          
        } 
        else if (percentage >= 40) 
        {
            division = "Third";
          
        } else {
            division = "Fail";
        }
    }
    
    void display() {
        System.out.println("Name: " + name);
        System.out.println("Roll No: " + rollNo);
        System.out.println("Subject 1 Marks: " + subject1Marks);
        System.out.println("Subject 2 Marks: " + subject2Marks);
        System.out.println("Subject 3 Marks: " + subject3Marks);
        System.out.println("Total Marks: " + getTotalMarks());
        System.out.println("Average Marks: " + getAverageMarks());
        System.out.println("Division: " + division);
    }
}

public class multilevel {
    public static void main(String[] args) {
        Result result = new Result("John", 123, 85, 90, 80);
        result.display();
    }
}
======================================================================================================================================================
method overloading
==================================================================
class factorial
{
    int f=1,n=5,i;
       void fact()
        {
            for(i=1;i<=n;i++)
              f=f*i;
          System.out.println("The Factorial of "+n+" is:"+f);

          }
       void fact(int x)
        {
           f=1;
            for(i=1;i<=x;i++)
              f=f*i;
          System.out.println("The Factorial of "+x+" is:"+f);

          }
}
class Main                               
{
    public static void main(String args[])
     {
          factorial f1=new factorial();
           f1.fact();
           f1.fact(6);
       }
}


//overlading 
class space{
  void arjun(int a,float b,String c){
    System.out.println(a+" "+b+" "+c);
  }
  void arjun(float b,int a,String c){
    System.out.println(a+" "+b+" "+c);
  }
  void arjun(float b,String c,int a){
    System.out.println(a+" "+b+" "+c);
  }
}
class overload2{
  public static void main(String args[]){
    space s=new space();
    s.arjun(10,18.6f,"pavan");
     s.arjun(18.6f,10,"pavan");
    s.arjun(18.6f,"pavan",10);

  }
} 
===========================================================================
Method Overriding:
==============================================================================
[10:51] Karunakar Eeede
Method Overriding:
----------------------- 
     class Demo
  {
           void display()
            {
            }
  }
class Demo1 extends Demo
{
            void display()
            {      
             }
  } Dynamic Method Dispatch:
----------------------------------
   Demo d1=new Demo();
   Demo1 d2=new Demo1();  
    Demo d;   
    d=d1;
    d.display(); 
    d=d2;
    d.display();
===================================================
[10:54] Karunakar Eeede
class overriding1
{
       void disp()
         {
            System.out.println("Its Super Class");
         } 
}
class overriding2 extends overriding1
{
         void disp()
         {
            System.out.println("Its Sub Class");
         }
}
class Main
{
   public static void main(String args[])
   {
          overriding1 v1=new overriding1();
          overriding2 v2=new overriding2();
           overriding1 r;
           r=v1;
           r.disp();
           r=v2;
           r.disp();
       }
}

========================================================================================================================================

class bank{
   void rateofinterest(){
     System.out.println("aryan has 20");
   }
}
class rbi extends bank{
   void rateofinterest(){
     System.out.println("aryan has 200");
   }
}
class sbi extends bank{
   void rateofinterest(){
     System.out.println("aryan has 2000");
   }
}
class override23{
  public static void main(String args[]){
    bank b=new bank();
    rbi be=new rbi();
    sbi s=new sbi();
    bank e;
    b.rateofinterest();
    e=be;
    e.rateofinterest();
     e=s;
    e.rateofinterest();
  }
}
================================================================================
//overloading in java
=================================================================================
class over{
  void sum(){
    int a=10;
    int b=10;
   int sum1=a+b;
     int sum2=a-b;
   float prod=sum*sum;
     float prod1=sum2*sum2;
     System.out.println(sum);
    System.out.println(prod);
     System.out.println(sum2);
    System.out.println(prod1);
  }
   void sum(int a,int b){
    
   int sum1=a+b;
     int sum2=a-b;
   float prod=sum*sum;
      float prod1=sum2*sum2;
     System.out.println(sum);
    System.out.println(prod);
      System.out.println(sum2);
    System.out.println(prod1);
  }
}
class overload{
  public static void main(String args[]){
    over o=new over();
    o.sum();
    o.sum(46,67);
  }
}
=======================================================
override//
========================================================
class over1{
  void disp(){
    int a=10;
    int b=10;
   int sum1=a+b;
    int sum2=a-b;
    float pro=sum1*sum1;
    float pro1=sum2*sum2;
    System.out.println(sum1);
      System.out.println(sum2);
      System.out.println(pro);
      System.out.println(pro1);
  }
}
  class over2 extends over1{
  void disp(){
   int a=24;
    int b=37;
   int sum1=a+b;
    int sum2=a-b;
    float pro=sum1*sum1;
    float pro1=sum2*sum2;
    System.out.println(sum1);
      System.out.println(sum2);
      System.out.println(pro);
      System.out.println(pro1);
  }
  }
class override{
  public static void main(String args[]){
    over1 o=new over1();
    over2 o1=new over2();
    over1 o2;
    o2=o;
    o2.disp();
    o2=o1;
    o2.disp(); 
  }
}

=================================================================================
abstract class absdemo
 {
     abstract void calculate(int n);
 }
class absdemo1 extends absdemo
{
      void calculate(int n)
       {
      System.out.println("The Square of the Given Number is:"+(n*n));
       }
}
class absdemo2 extends absdemo
{
        void calculate(int n)
       {
   System.out.println("The Cube of the Given Number is:"+(n*n*n));
       }    
}
class absdemo3 extends absdemo

   {
        void calculate(int n)
       {
       System.out.println("The Square root of the Given Number is:"+Math.sqrt(n));
       }    
   }
class Main
{
    public static void main(String arg[])
      {
          absdemo1 a1=new absdemo1();
          absdemo2 a2=new absdemo2();
          absdemo3 a3=new absdemo3();
          a1.calculate(5);
          a2.calculate(3);
          a3.calculate(625);
       }
}
=======================================================================================================
abstract class demo
{
  abstract void calculate(int n);
}
class demo1 extends demo
 {
  void calculate(int n)
 {
    System.out.println(n*n);
  }
}
class demo2 extends demo
{
  void calculate(int n)
{
    System.out.println(n*n*n);
  }
}
class demo3 extends demo
{
  void calculate(int n)
{
    System.out.println(Math.sqrt(n));
  }
}
class abstract1{
  public static void main(String args[]){
    demo1 d=new demo1();
    demo2 d2=new demo2();
    demo3 d3=new demo3();
    d.calculate(5);
    d2.calculate(2);
    d3.calculate(625);
  }
}
=========================================================================================================
abstract class Shape{
abstract void draw();
}
class Rectangle extends Shape{
void draw()
{
System.out.println("drawing rectangle");
}
}
class Circle1 extends Shape{
void draw()
{
System.out.println("drawing circle");
}
}
class shape1{
public static void main(String args[]){
Shape s=new Rectangle();
s.draw();
}
}
=======================================================================================================================

Super Keyword




class base
{
     int i=10;
}
class derive extends base
{
   int i=20;
  void disp()
   {
        System.out.println("The i value in base class is:"+super.i);
        System.out.println("The i value in derive class is:"+i);
   }
}
class Main
{
     public static void main(String args[])
      {
             derive d1=new derive();
             d1.disp();
       }
}

==========================================================================================================

[12:10] Karunakar Eeede
class base
{
         void disp()
         {
            System.out.println("Its Base Class Method");
           }
}
class derive extends base
{
    void disp()
         {
            super.disp();   
            System.out.println("Its Derive Class Method");
          }
}
class Main
{
    public static void main(String args[])
    {
            derive d=new derive();
            d.disp();         
      }
}

===========================================================================================
class read
{
         void disp()
         {
            System.out.println("my name is pavankalyan");
           }
}
class derive extends read
{
    void disp()
         {
            super.disp();   
            System.out.println("i am in vijayawada");
          }
}
class superm
{
    public static void main(String args[])
    {
            derive d=new derive();
            d.disp();         
      }
}
==================================================================================================

final
class Main
{
   public static void main(String args[])
    {
              final int a=100;
                   // a=200;
                   /// a=300;
          System.out.println("The a value is:"+a);
      }
}

========================================================================================
final  class fina26
{
    final void disp()
         {
               System.out.println("Its Super Class");
          }
}
class final2 extends fina26  // error
{
         void disp()  //error
         {
              super.disp();
               System.out.println("Its Sub Class");
          }
}
class Main
{
    public static void main(String args[])
     {
                  final2 f=new final2();
                  f.disp();  
        }
}
====================================================================================================

abstract class add{
  abstract void sum(int a,int b);
}

class add1 extends add{
   void sum(int a,int b){
   int   sum1=a+b;
     int sum2=a-b;
     int prod1=sum1*sum1;
     int prod2=sum2*sum2;
     System.out.println(sum1);
     System.out.println(sum2);
     System.out.println(prod1);
     System.out.println(prod2);
   }
}

class add2 extends add{
   void sum(int a,int b){
   int   sum1=a+b;
     int sum2=a-b;
     int prod1=sum1*sum1*sum1;
     int prod2=sum2*sum2*sum2;
     System.out.println(sum1);
     System.out.println(sum2);
     System.out.println(prod1);
     System.out.println(prod2);
   } 

}

class add3 extends add{
   void sum(int a,int b){
   int   sum1=(a+b)*(a+b);
     int sum2=(a-b)*(a-b);
     int prod1=sum1*sum1*sum1*sum1;
     int prod2=sum2*sum2*sum2*sum2;
     System.out.println(sum1);
     System.out.println(sum2);
     System.out.println(prod1);
     System.out.println(prod2);
   }
}

class abstact{
  public static void main(String args[]){
    add1 a1=new add1();
    add2 a2=new add2();
    add3 a3=new add3();
    a1.sum(100,20);
    a2.sum(10,5);
    a3.sum(10,2);
  }
}
======================================================================================================



interface

interface intrdemo
{
   public void add();
   public  void disp();
}
class intfdemo implements intrdemo
{
     int a=10,b=20,c;
     public  void add()
       {
          c=a+b;
       }
     public void disp()
      {
            System.out.println("The a value is :"+a);
            System.out.println("The b value is :"+b);
            System.out.println("The addition value is :"+c );
       }
}
class Main
{
    public static void main(String args[])
      {
            intfdemo in=new intfdemo();
            in.add();
            in.disp();
        }
}
==============================================================================================
packages
================================================================================================

[15:55] Karunakar Eeede
package facto;
public class Factorial
{
      public int fact(int n)
      {
           int f=1,i;            

         for(i=1;i<=n;i++)
            {
                f=f*i;
             }
            return f;
       }
}

[15:55] Karunakar Eeede
import facto.Factorial; 
class Factmain
{
    public static void main(String args[])

    {
       
          Factorial f1=new Factorial();
         int n=f1.fact(5);
        System.out.println("The Factorial value is:"+n);
     }
}
=====================================================================================================================================================================
import java.util.*;
class studentData{
  int s_no,s1,s2,s3;
  String s_name;
  int tot;
  float avg;
  void Data(){
    Scanner sc=new Scanner(System.in);
    
    System.out.println("enter student number :");
    s_no=sc.nextInt();
    System.out.println("enter student  name :");
    s_name=sc.next();
    System.out.println("enter subject1,subject2,subject3 marks :");
    s1=sc.nextInt();
    s2=sc.nextInt();
    s3=sc.nextInt();
  }
  void Marks(){
     tot=(s1+s2+s3);
    avg=((float)tot/3);
  }

}
interface report{
  public void grade();
}
class grading  extends studentData implements report{
  public void grade(){
  System.out.println(" STUDENT DETAILS ");
    System.out.println(" ----------------");
    System.out.println("The Student Number is : " + s_no);
    System.out.println("The Student Name   is : " + s_name);
    System.out.println("The Student Marks  is : ");
    System.out.println("Maths :" + s1);
    System.out.println("Phys :" + s2);
    System.out.println("Chemi :" + s3);
    System.out.println("Student Total is :" + tot);
    System.out.println("Student average is :" + avg);
    if (s1 >= 40 && s2 >= 40 && s3 >= 40) {
      System.out.println("Result : Pass");
      if (avg <= 50)
        System.out.println("Grade : C");
      else if (avg >= 51 && avg <= 70)
        System.out.println("Grade : B");
      else if (avg >= 71 && avg <= 80)
        System.out.println("Grade : A");
      else
        System.out.println("Student Passed is Distension");
    } 
    else {
      System.out.println("Result : Fail");
    }
}
}


class StudentInterface{
  public static void main(String args[]){
    grading g1=new grading();
    g1.Data();
    g1.Marks();
    g1.grade();
    
  }
}
==========================================================================================================================
import java.util.*;
class studentData{
  int s_no,s1,s2,s3;
  String s_name;
  void Data(){
    Scanner sc=new Scanner(System.in);
    
    System.out.println("enter student number :");
    s_no=sc.nextInt();
    System.out.println("enter student  name :");
    s_name=sc.next();
    System.out.println("enter subject1,subject2,subject3 marks :");
    s1=sc.nextInt();
    s2=sc.nextInt();
    s3=sc.nextInt();
}
}
class AverageAndTotal extends studentData{
  int tot;
  float avg;
  void Marks(){
     tot=(s1+s2+s3);
    avg=((float)tot/3);
  }
}
class report extends AverageAndTotal{
  void grade(){
  System.out.println(" STUDENT DETAILS ");
    System.out.println(" ----------------");
    System.out.println("The Student Number is : " + s_no);
    System.out.println("The Student Name   is : " + s_name);
    System.out.println("The Student Marks  is : ");
    System.out.println("Maths :" + s1);
    System.out.println("Phys :" + s2);
    System.out.println("Chemi :" + s3);
    System.out.println("Student Total is :" + tot);
    System.out.println("Student average is :" + avg);
    if (s1 >= 40 && s2 >= 40 && s3 >= 40) {
      System.out.println("Result : Pass");
      if (avg <= 50)
        System.out.println("Grade : C");
      else if (avg >= 51 && avg <= 70)
        System.out.println("Grade : B");
      else if (avg >= 71 && avg <= 80)
        System.out.println("Grade : A");
      else
        System.out.println("Student Passed is Distension");
    } 
    else {
      System.out.println("Result : Fail");
    }
}
}


class Multilevel{
  public static void main(String args[]){
    report s1=new report();
    s1.Data();
    s1.Marks();
    s1.grade();
  }
}
===============================================================================================================

[11:20] Karunakar Eeede
        Exception  Class                                               
ArithmeticException
 ArrayIndexOutOfBoundsException
 ClassNotFoundException
 IOException 
InterruptedException
 NoSuchMethodException
 NullPointerException 
NumberFormatException 
RuntimeException 
StringIndexOutOfBoundsException


 Exception 
Syntax:
try
{
     //block of code to monitor for errors }
catch(Exceptiontype1 obj)
{   
//exception handler1
 }
catch(Exceptiontype2 obj)
{ 
  //exception handler2
 }
.
.
.
.
finally
{
 // block of code executed before try block end
}      

===========================================================================================================
import java.util.*; 
 class ArthException 
   {
  Scanner sc = new Scanner(System.in);
  int a, b, c;  
 void division()
     {
    try {
      System.out.println("Enter a,b values:");
      a = sc.nextInt();
      b = sc.nextInt();
      c = a / b;
      System.out.println("The Divison value is:" + c);
    } 
   catch (ArithmeticException ae) 
    {
      System.out.println("The Exception Occur");
      System.out.println("The Exception Occur"+ae);
      System.out.println("The Exception Occur"+ae.getMessage());
    }
  } 
  public static void main(String args[])
   {
    ArthException ae1 = new ArthException();
    ae1.division();
  } 
}
================================================================================================================

[12:15] Karunakar Eeede
import java.io.*;
import java.lang.*;
public class Main
{
public static void main(String args[])
    {
         try
           {    
                  int n=Integer.parseInt("123");
                  int b=5000;
                  int res=b/2;
                     System.out.println("Result is..."+res);             
                 int a[]=new int[15];
                   a[20]=858;
                 System.out.println("value of a[10]="+a[20]);
          }
         catch(ArrayIndexOutOfBoundsException e)
          {
             System.out.println("exception error..."+e.getMessage());
          }
         catch(ArithmeticException ex)
          {
             System.out.println("Arithmetic..."+ex);
          }
         catch(Exception ex)
          {
             System.out.println("Exception.."+ex.getMessage());
           }
  }
}
=======================================================================================================================
// Write a Java program that takes input from the user in the form of a string and checks whether 
//   it is a palindrome or not.
//   Your program should use exception handling to handle the following situations:
// If the user inputs a non-string value, the program should catch the exception and display
//   an error message to the user.

import java.util.*;
class except3{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    try{
      String s=sc.nextLine();
      String k="";
    for(int i=s.length()-1;i>=0;i--){
      k=k+s.charAt(i);
    }
    
    if(s.equals(k)){
    System.out.println("the string is palindrome"); 
    }
    else
     System.out.println("the string is not palindrome"); 
    }
    catch(Exception a){
      System.out.println("exception is" +a.getMessage());
    }
    
  }
}

import java.util.*;
class Exceptions2{
  Scanner sc=new Scanner(System.in);
  String s,s2="";
  void Palindrome(){
    try{
      System.out.println("enter your string :");
      s=sc.nextLine();
      if (!s.matches("^[a-zA-Z]+$")) { throw new NumberFormatException(); }
     for(int i=s.length()-1;i>=0;i--){
       s2+=s.charAt(i);
     }
      if(s.equalsIgnoreCase(s2))
      System.out.println(s+" its palindrome");
      else
         System.out.println(s+" its  not palindrome");
    }
   
    catch(NumberFormatException be){
      System.out.println("exception occur due to invalid input ");
    }
    
  }
  public static void main(String args[]){
    Exceptions2 d=new Exceptions2();
    d.Palindrome();
  }
}
=====================================================================================================
// Write a Java program that takes input from the user in the form of a string and checks whether 
//   it is a palindrome or not.
//   Your program should use exception handling to handle the following situations:
// If the user inputs a non-string value, the program should catch the exception and display
//   an error message to the user.

import java.util.Scanner;

public class PalindromeChecker {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter a string: ");
            String input = scanner.nextLine();

            if (isPalindrome(input)) {
                System.out.println("The input string is a palindrome.");
            } else {
                System.out.println("The input string is not a palindrome.");
            }
        } catch (Exception e) {
            System.out.println("Error: Invalid input. Please enter a valid string.");
        }

        scanner.close();
    }

   
    private static boolean isPalindrome(String input)

 {
        String reversed = new StringBuilder(input).reverse().toString();
        return input.equals(reversed);
    }
}
==========================================================================================
test no is greater than or not;

class NumberException extends Exception{   
   int no; 
  NumberException(int no)   
  {    
 this.no=no;  
    }     
 public String toString()  
    {      
 return "Error .."+no+"...Is Greater";    
  }
}
public class NewThrow{   
 static void test(int no)throws NumberException    
 {        
if(no >100)    
    {          
  throw new NumberException(no);    
    }   
    System.out.println("Value is.."+no);  
   } 
public static void main(String args[])  
{  
 try         
   {            
  test(200);          
  }         
catch(NumberException ae)     
       {            
 System.out.println("NumberException :"+ae);  
     } 
  }
}
=======================================================================================================================

====================================================================================================================

[15:21] Karunakar Eeede
Write a program that simulates a bank account. The program should allow the user to deposit, withdraw, and check their balance. Handle any possible exceptions that may
 occur InputMismatchException: This exception may occur if the user enters an invalid input type while performing transactions, such as entering a string instead of a
 number.InsufficientFundsException: This exception may occur if the user tries to withdraw more money than their current balance.FileNotFoundException: This exception
 may occur if there is an issue with accessing the file that stores the account information.IOException: This exception may occur if there is an issue with input/output
 while reading or writing to the account file.NumberFormatException: This exception may occur if the program tries to convert a string input to a numerical value, but 
the input is not a valid number.NullPointerException: This exception may occur if the program tries to access an object that has not been initialized.SecurityException:
 This exception may occur if the program tries to access a resource that it doesn't have permission to access.


Write a class Worker and derive classes DailyWorker and SalariedWorker from it. Every worker has a name and a salary rate. Write method ComPay (int hours) to
 compute the week pay of every worker. A Daily Worker is paid on the basis of the number of days he/she works. The Salaried Worker gets paid the wage for 40 hours a 
week no matter what the actual hours are. Test this program to calculate the pay of workers.


[10:15] Karunakar Eeede
A university has different types of employees, including faculty members and administrative staff. The university wants to keep track of their personal
 information, such as their names and contact details, as well as their job-specific information, such as their salary and job title. Create a superclass 
called "Employee" with the following attributes: name (String)
email (String)
phone number (String)
Create two subclasses of Employee: FacultyMember, with the additional attribute of "department" (String)
AdministrativeStaff, with the additional attribute of "jobTitle" (String)
Create a constructor for each subclass that initializes its respective additional attribute(s) along with the attributes inherited from the superclass. 
Create a method for each subclass to display its specific attributes along with the attributes inherited from the superclass. In the main method, create 
at least one object of each subclass and call the respective method to display their attributes.
class Student{
  private String name;
  private String email;
  private String phone;
  
  private float gpa;
  public void setstudent(String name,String email,float gpa,String phone){
    this.name=name;
    this.email=email;
    this.phone=phone;
    this.gpa=gpa;
   
  }
  public String getname(){
    return name;
  }
   public String getemail(){
    return email;
  }
   public Float getgpa(){
    return gpa;
  }
   public String getphone(){
    return phone;
  }
  
}
class Undergraduate extends Student{
  private String classstanding;
   
  
  Undergraduate(String name,String email,float gpa,String phone,String classstanding){
    super(name,email,gpa,phone);
   this.classstanding=classstanding;
  }
  public void display(){
    System.out.println("name" +getname());
    System.out.println("email" +getemail());
     System.out.println("gpa" +getgpa());
     System.out.println("phone" +getphone());
     System.out.println("classstanding" +classstanding);
  }
}
class Graduate extends Student {
    private String program;

    public Graduate(String name, String email, String phone, float gpa, String program) {
        super(name, email, phone, gpa);
        this.program = program;
    }

    public void displayInfo() {
        System.out.println("Name: " + getname());
        System.out.println("Email: " + getemail());
        System.out.println("Phone number: " + getphone());
        System.out.println("GPA: " + getgpa());
        System.out.println("Program: " + program);
    }
}
 class Doctoral extends Student {
    private String advisor;

    public Doctoral(String name, String email,String phone, float gpa, String advisor) {
        super(name, email, phone,gpa);
        this.advisor = advisor;
    }

    public void displayInfo() {
        System.out.println("Name: " + getname());
        System.out.println("Email: " + getemail());
        System.out.println("Phone number: " + getphone());
        System.out.println("GPA: " + getgpa());
        System.out.println("Advisor: " + advisor);
    }
}
public class c20{
  public static void main(String args[]){
    Undergraduate u=new Undergraduate("pavan","aryan@123",9.8f,"6302424056","nine");
    u.display();
    u.setgpa(8.7f);
    Graduate g=new Graduate("arjun","arjun@123","635478378",8.8f,"biology");
    g.displayInfo();
    g.setgpa(8.6f);
    Doctoral d=new Doctoral("kaushik","kaushik@678","784938494",9.6f,"chemicaladvisor");
    d.displayInfo();
    d.setgpa(7.8f);
  }
}


A library has different types of books, including fiction books, non-fiction books, and reference books. The library wants to keep track of each book's 
information, such as its title, author, and publication date, as well as its specific information, such as its genre and ISBN. Create a superclass called
 "Book" with the following attributes: title (String)
author (String)
publication date (String)
genre (String)
ISBN (String)
Create three subclasses of Book: FictionBook, with the additional attribute of "main character" (String)
NonFictionBook, with the additional attribute of "topic" (String)
ReferenceBook, with the additional attribute of "edition" (int)
Create a constructor for each subclass that initializes its respective additional attribute(s) along with the attributes inherited from the superclass.
 Create a method for each subclass to display its specific attributes along with the attributes inherited from the superclass. In the main method, create
 at least one object of each subclass and call the respective method to display their attributes. Also, update the publication date of each book as new
 editions are released.

==========================================================================================================

A company has different types of employees, including full-time employees and part-time employees. The company wants to keep track of each employee's
 personal information, such as their names and contact details, as well as their job-specific information, such as their salary and work hours. Create a
 superclass called "Employee" with the following attributes: name (String)
email (String)
phone number (String)
salary (double)
work hours (int)
Create two subclasses of Employee: FullTimeEmployee, with the additional attribute of "benefits" (boolean)
PartTimeEmployee, with the additional attribute of "hourly rate" (double)
Create a constructor for each subclass that initializes its respective additional attribute(s) along with the attributes inherited from the superclass. 
Create a method for each subclass to display its specific attributes along with the attributes inherited from the superclass. In the main method, create
 at least one object of each subclass and call the respective method to display their attributes. Also, update the salary of each employee as they receive 
promotions or raises.
==================================================================================================================

A company has different types of products, including electronics, clothing, and household items. The company wants to keep track of each product's 
information, such as its name, brand, and price, as well as its category-specific information, such as its size and material. Create a superclass 
called "Product" with the following attributes: name (String)
brand (String)
price (double)
size (String)
material (String)
Create three subclasses of Product: Electronics, with the additional attribute of "warranty" (boolean)
Clothing, with the additional attribute of "gender" (String)
HouseholdItem, with the additional attribute of "weight" (double)
Create a constructor for each subclass that initializes its respective additional attribute(s) along with the attributes inherited from the 
superclass. Create a method for each subclass to display its specific attributes along with the attributes inherited from the superclass. In
 the main method, create at least one object of each subclass and call the respective method to display their attributes. Also, update the price
 of each product as the company adjusts its pricing strategy.
============================================================================================================================================

// A school has different types of students, including undergraduates, graduates, and doctoral students. The school wants to keep track of each student's 
personal information, such as their names and contact details, as well as their academic information, such as their major and GPA. Create a superclass
 called "Student" with the following attributes: name (String)
// email (String)
// phone number (String)
// major (String)
// GPA (double)
// Create three subclasses of Student: Undergraduate, with the additional attribute of "class standing" (String)
// Graduate, with the additional attribute of "program" (String)
// Doctoral, with the additional attribute of "advisor" (String)
// Create a constructor for each subclass that initializes its respective additional attribute(s) along with the attributes inherited from the superclass.
 Create a method for each subclass to display its specific attributes along with the attributes inherited from the superclass. In the main method, create 
at least one object of each subclass and call the respective method to display their attributes. Also, update the GPA of each student as they complete new 
courses or exams.


class Student{
  private String name;
    private String email1;
    private String phone;
   private double gpa;
  public void setname(String name){
    this.name=name;
  }
  public void setemail1(String email1){
    this.email1=email1;
  }
  public void setphone(String phone){
    this.phone=phone;
  }
  public void setgpa(double gpa){
    this.gpa=gpa;
  }
  public String getname(){
    return name;
  }
   public String getemail1(){
    return email1;
  }
   public String getphone(){
    return phone;
  }
  public double getgpa(){
    return gpa;
  }
   public void display(){
    System.out.println("student name   " +name);
   System.out.println("student email   " +email1);
   System.out.println("student phone   " +phone);
    System.out.println("student gpa   " +gpa);
   }
}

class graduate extends Student{
   private String name;
    private String email;
    private String phone;
   private String program;
    private double gpa;
  
  public void setname(String name){
    this.name=name;
  }
  public void setemail(String email){
    this.email=email;
  }
  public void setphone(String phone){
    this.phone=phone;
  }
  public void setprogram(String program){
    this.program=program;
  }
   public void setgpa(double gpa){
    this.gpa=gpa;
  }
  public String getname(){
    return name;
  }
   public String getemail(){
    return email;
  }
   public String getphone(){
    return phone;
  }
   public String getprogram(){
    return program;
  }
  public double getgpa(){
    return gpa;
  }
  
  public void display(){
    System.out.println("graduatestudent name   " +name);
   System.out.println("graduatestudent email   " +email);
   System.out.println("graduatestudent phone   " +phone);
    System.out.println("graduatestudent gpa   " +gpa);
   System.out.println("graduatestudent program   " +program); 
  } 
}
class undergraduate extends Student{
   private String name;
    private String email;
    private String phone;
   private String classstanding;
    private double gpa;
  
  public void setname(String name){
    this.name=name;
  }
  public void setemail(String email){
    this.email=email;
  }
  public void setphone(String phone){
    this.phone=phone;
  }
  public void setclassstanding(String classstanding){
    this.classstanding=classstanding;
  }
   public void setgpa(double gpa){
    this.gpa=gpa;
  }
  public String getname(){
    return name;
  }
   public String getemail(){
    return email;
  }
   public String getphone(){
    return phone;
  }
   public String getclassstanding(){
    return classstanding;
  }
  public double getgpa(){
    return gpa;
  }
  
  public void display(){
    System.out.println("undergraduate student name   " +name);
   System.out.println("undergraduate student email   " +email);
   System.out.println("undergraduate  student phone   " +phone);
    System.out.println("undergraduate   student gpa   " +gpa);
   System.out.println("undergraduate  student classstanding   " +classstanding); 
  } 
}
class doctoral  extends Student{
   private String name;
    private String email;
    private String phone;
   private String advisor;
    private double gpa;
  
  public void setname(String name){
    this.name=name;
  }
  public void setemail(String email){
    this.email=email;
  }
  public void setphone(String phone){
    this.phone=phone;
  }
  public void setadvisor(String advisor){
    this.advisor=advisor;
  }
   public void setgpa(double gpa){
    this.gpa=gpa;
  }
  public String getname(){
    return name;
  }
   public String getemail(){
    return email;
  }
   public String getphone(){
    return phone;
  }
   public String advisor(){
    return advisor;
  }
  public double getgpa(){
    return gpa;
  }
  
  public void display(){
    System.out.println("doctoral  student name   " +name);
   System.out.println("doctoral  student email   " +email);
   System.out.println("doctoral  student phone   " +phone);
    System.out.println("doctoral estudent gpa   " +gpa);
   System.out.println("doctoral  student advisor   " +advisor); 
  } 
}
class c201{
  public static void main(String args[]){
   Student so=new Student ();
    so.setname("kiran");
    so.setemail1("kiran@123");
    so.setphone("6736837339");
    so.setgpa(8.6);
    so.display();
   graduate g=new graduate();
    g.setname("aryan");
    g.setemail("aryan@123");
    g.setphone("6736837339");
    g.setgpa(8.6);
    g.setprogram("masters");
    g.display();
    g.setgpa(7.6);
    g.display();
    undergraduate ug=new undergraduate();
    ug.setname("pavan");
    ug.setemail("pavan@123");
    ug.setphone("78636837339");
    ug.setgpa(8.6);
    ug.setclassstanding("nine");
    ug.display();
    ug.setgpa(6.6);
    ug.display();
    doctoral d=new doctoral();
    d.setname("aravind");
    d.setemail("aravind@123");
    d.setphone("78636837339");
    d.setgpa(5.6);
    d.setadvisor("chemical advisior");
    d.display();
    d.setgpa(8.6);
    d.display();
  }
}


==========================================================
/*
A company has different types of products, including electronics, clothing, and household items. The company wants to keep track of each product's information, such as its name, brand, and price, as well as its category-specific information, such as its size and material. Create a superclass called "Product" with the following attributes: name (String)
brand (String)
price (double)
size (String)
material (String)
Create three subclasses of Product: Electronics, with the additional attribute of "warranty" (boolean)
Clothing, with the additional attribute of "gender" (String)
HouseholdItem, with the additional attribute of "weight" (double)
Create a constructor for each subclass that initializes its respective additional attribute(s) along with the attributes inherited from the superclass. Create a method for each subclass to display its specific attributes along with the attributes inherited from the superclass. In the main method, create at least one object of each subclass and call the respective method to display their attributes. Also, update the price of each product as the company adjusts its pricing strategy.

*/
class product{
     String name;
     String brand;
     double price;
     String size;
     String material;

       product(String name,String brand,double price,String size,String material){
         this.name=name;
         this.brand=brand;
         this.price=price;
         this.size=size;
         this.material=material;
       }
  String getName(){
    return name;
  }
  String getBrand(){
    return brand;
  }
  String getSize(){
    return size;
  }
  double getPrice(){
    return price;
  }
  String getMaterial(){
    return material;
  }
}
  class Electronics extends product{
    boolean Warrenty;
    Electronics(String name,String brand,double price,String material,boolean Warrenty,String size){
      super(name, brand, price,size,material);
      this.Warrenty=Warrenty;
    }
    boolean Warrenty(){
      return Warrenty;
    }
    void display(){
      System.out.println("name:"+getName());
      System.out.println("brand:"+getBrand());
      System.out.println("price:"+getPrice());
      System.out.println("material:"+getMaterial());
      System.out.println("Warrenty:"+Warrenty());
      System.out.println("size:"+getSize());
    }
  }
  class clothing extends product{
        String gender;
    clothing(String name,String brand,double price,String size,String material,String gender){
      super(name, brand, price, size, material);
      this.gender=gender;
    }
    String getGender(){
      return gender;
    }
    void display(){
      System.out.println("name:"+getName());
      System.out.println("brand:"+getBrand());
      System.out.println("price:"+getPrice());
      System.out.println("size:"+getSize());
      System.out.println("material:"+getMaterial());
      System.out.println("gender:"+getGender());
    }
  }
  class householdItems extends product{
    double weight;
    householdItems(String name,String brand,double price,String size,String material,double weight){
      super(name, brand, price, size, material);
      this.weight=weight;
    }
    double getWeight(){
      return weight;
    }
    void display(){
      System.out.println("name:"+getName());
      System.out.println("brand:"+getBrand());
      System.out.println("price:"+getPrice());
      System.out.println("size:"+getSize());
      System.out.println("material:"+getMaterial());
      System.out.println("Weight:"+getWeight());
    }
  }
class c20Oops{
  public static void main(String args[]){
    Electronics ec=new Electronics("oneplus","1+",1999,"4K",true,"55inch");
    ec.display();
    clothing c1=new clothing("full_sleves_tshirt","Addidas",599,"xl","cotton","Male");
    c1.display();
    householdItems ht=new householdItems("usha mixer","usha",599,"34","steel and plastic",450);
    ht.display();
    
  }
}
=====================================================================================



A bank wants to keep track of its customers and their accounts. Each customer has a name,
 email address, and phone number. Each account has an account number, balance, and interest rate.


class ThreadA extends Thread{
   public void run()    {    
  for(int i=0;i<5;i++)       {  
      System.out.println("Thread A is.."+i);   
    }     
 }
}
class ThreadB extends Thread{ 
  public void run()    {     
 for(int i=0;i<5;i++)       {        
System.out.println("Thread B is.."+i);      
 }    
 }
}
public class MainThread 
 {    
public static void main(String args[])   
  {       
  ThreadA ta=new ThreadA();       
  ThreadB tb=new ThreadB();          
ta.start();         
tb.start();           
for(int i=0;i<5;i++)         
System.out.println("main..."+i);     
}
}
========================================================================================================= 

runnable 

import java.io.*;
import java.util.*;
class ThreadA  implements Runnable{  
public void run()   {            
 for(int i=1;i<5;i++)     {     
 System.out.println("ThreadA..."+i);   
  }    
 }
}  
 public class RunnableDemo  
  {     
 public static void main(String artgs[])   
    {    
ThreadA ta=new ThreadA();   
 Thread th=new Thread(ta);   
 th.start();   
 for(int i=0;i<5;i++)  
  {      System.out.println("Main...."+i); 
   }    
 }
}               
===============================================================================================

setting and getting giving 

[11:48] Karunakar Eeede
class ThreadA extends Thread{ 
  public void run()  
 {     
   for(int i=1;i<=5;i++)  
       System.out.println("ThreadA....."+i);    }
}class ThreadB extends Thread
{
  public void run()  
{   
  for(int i=1;i<=5;i++)      
System.out.println("ThreadB....."+i);   
}
}
public class ThreadPriorityDemo
{ 
  public static void main(String args[])  
 {    
ThreadA ta=new ThreadA();   
 ThreadB tb=new ThreadB();   
 System.out.println("ThreadA default Priority is..."+ta.getPriority());    
System.out.println("ThreadB default Priority is..."+tb.getPriority());    
ta.setPriority(Thread.MAX_PRIORITY-2);   
 tb.setPriority(3);   
 System.out.println("ThreadA New Priority is..."+ta.getPriority());    
System.out.println("ThreadB New Priority is..."+tb.getPriority());    
ta.start();   
 tb.start();    
Thread tm=Thread.currentThread();    
System.out.println("Main Thread default Priority is..."+tm.getPriority());   
 tm.setPriority(Thread.MIN_PRIORITY);                 
 System.out.println("Main Thread New Priority is..."+tm.getPriority());    
for(int i=1;i<=5;i++)     
 System.out.println("Main...."+i);   
}
}
==================================================
class Table{  
 synchronized void printTable(int n)   
 {   for(int i=1;i<=5;i++) 
 {       System.out.println(n*i);       
try{Thread.sleep(400);}catch(Exception e){System.out.println(e);}   
  } 
 }  
}  
class MyThread1 extends Thread
{     
 Table t;      
MyThread1(Table t)   
 {      
this.t=t;      
}    
  public void run()    
 {       
  t.printTable(5);     
 }  
 } 
 class MyThread2 extends Thread
{   
   Table t;    
  MyThread2(Table t)
{     
 this.t=t;     
 }     
 public void run(){      
t.printTable(100);      
}  
}    
class TestSynchronization1
{  
public static void main(String args[])
{     
 Table obj = new Table();//only one object      
MyThread1 t1=new MyThread1(obj);      
MyThread2 t2=new MyThread2(obj);      
t1.start();     
 t2.start();  
} 
 }  

===========================================================================
[12:55] Karunakar Eeede
import java.io.*;
class InputDemo{    
public static void main(String args[]) throws IOException    
{      
InputStreamReader in=new InputStreamReader(System.in);     
 BufferedReader br=new BufferedReader(in);    
   char ch;   
   System.out.println("Enter Any Character:");   
   ch=(char)br.read();     
  System.out.println("The Given Character is:"+ch);       
   }
}
========================================================================
[12:57] Karunakar Eeede
  to read the String:

import java.io.*;
class Inputdemo2{
  public static void main(String args[]) throws IOException{
    InputStreamReader in=new InputStreamReader(System.in);
    BufferedReader br=new BufferedReader(in);
    String ch;
     System.out.println("enter any chracter");
    ch=br.readLine();
     System.out.println("The enter chracter is" +ch);
  }
}
===================================================================== 
String st1=br.readLine(); 
to read the Integer: 
int n=Integer.parseInt(br.readLine()); 
import java.io.*;
class Inputdemo3{
  public static void main(String args[]) throws IOException{
    InputStreamReader in=new InputStreamReader(System.in);
    BufferedReader br=new BufferedReader(in);
     int n;
     System.out.println("enter any chracter");
     n=Integer.parseInt(br.readLine());
     System.out.println("The enter chracter is" +n);
  }
}
====================================================
to read the Float:
 float n=Float.parseFloat(br.readLine());
import java.io.*;
class Inputdemo4{
  public static void main(String args[]) throws IOException{
    InputStreamReader in=new InputStreamReader(System.in);
    BufferedReader br=new BufferedReader(in);
     float n;
     System.out.println("enter any chracter");
      float n=Float.parseFloat(br.readLine());
     System.out.println("The enter chracter is" +n);
  }
}
====================================================


Student Number,Name,3sub Marks, Find Total & Average

[14:21] Karunakar Eeede
import java.io.*;
class Studentdata{  
 public static void main(String args[])throws Exception    
{       
int sno,m1,m2,m3,tot;      
  String sname;      
  float avg;      
   DataInputStream dis=new DataInputStream(System.in);     
 System.out.println("Enter Student Number :");      
sno=Integer.parseInt(dis.readLine());      
System.out.println("Enter Student Name :");      
sname=dis.readLine();      
System.out.println("Enter Student Marks :");      
m1=Integer.parseInt(dis.readLine());      
m2=Integer.parseInt(dis.readLine());      
m3=Integer.parseInt(dis.readLine());     
 tot=m1+m2+m3;           
 avg=tot/3;     
System.out.println("The Student Number is:"+sno);     
System.out.println("The Student Name is:"+sname);    
 System.out.println("The Student Marks is:");    
 System.out.println("Maths:"+m1);     
System.out.println("Physics:"+m2);     
System.out.println("Chemistry:"+m3);      
System.out.println("The Student Total is:"+tot);     
 System.out.println("The Student Average is:"+avg);     
}
}    

=====================================================

[14:55] Karunakar Eeede
/*class SequenceInputStream    A SequenceInputStream represents the logical concatenation of other input streams. It starts out with an ordered collection
 of input streams and reads from the first one until end of file is reached, whereupon it reads from the second one, and so on, until end of file is
 reached on the last of the contained input streams. SequenceInputStream(InputStream s1, InputStream s2) 


*/import java.io.*;
import java.lang.*; 
public class SequenceTest2{  public static void main(String args[])   
{   
  try   
   {     
  FileInputStream fis1=new FileInputStream("WriteFile.java");      
    FileInputStream fis2=new FileInputStream("hello.txt");        
      FileInputStream fis3=new FileInputStream("ReadFile.java");        
SequenceInputStream sis=new SequenceInputStream(fis1,fis2);     
 SequenceInputStream sis1=new SequenceInputStream(sis,fis3);      
 FileOutputStream fos=new FileOutputStream("karun.txt");       
 int ch;      
 while( (ch=sis1.read()) !=-1)      
  {       
  System.out.print((char)ch);        
 fos.write(ch);       
  Thread.sleep(40);      
  }    
  }    
  catch(Exception ie)     
 {     
  System.out.println(ie.getMessage());      
}  
  }
}
==========================================================================================================================================================
82. Write a JAVAprogram to count characters, words and lines in a text file.

import java.io.*;
class Inputdemo5{
  public static void main(String args[])throws Exception{

    InputStreamReader s=new InputStreamReader (System.in);
  BufferedReader br=new BufferedReader(s); 
    String st1;
    System.out.println("enter a string");
    st1=br.readLine();
    int count=0;
   
    System.out.println(st1);
    for(int i=0;i<st1.length();i++){
      count++;
    }
     System.out.println("The enter a string count is " +count);
  }
}


================================================================================================
collections
Collections in JavaThe Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and 
deletion.Java Collection means a single unit of objects. Java Collection framework providesmany interfaces (Set, List, Queue, Deque) 
and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

============================================================================================================================================
An ArrayList is a resizable array that grows as additional elements are added.
 A LinkedList is a doubly-linked list/queue implementation.
This means that ArrayList internally contains an array of values and a counter variable to know the current size at any point.
 If an element is added, the size is increased. If an element is removed, the size is decreased.
============================================================================================================================================
LinkedList doesn't have an array but a double-ended queue of mutually-connected elements instead. The first element points to the second one,
 which points to the third one, and so forth. Since this is a doubly-linked list, each element also points to its predecessor. The fifth element, 
for example, points both to the fourth element and the sixth element.

ArrayList contains a single array for data storage. LinkedList needs a custom data structure. This custom data structure is a Node. It is a small
 internal class that serves as a wrapper around each element.

In order to store element B, it's not enough to just store its value as you would with an ArrayList.

A pointer to the previous and the next element is also needed in order for the linked list to be traversable. The entire list structure thus consists 
of mutually connected nodes. Each node contains its element and two pointers: a link to the previous node and the link to the next node. The first node
 has no previous node and the last node has no next node.
============================================================================================================================================
Finally, in the case of a linked list, we can assume the existence of two pointers which continuously monitor the first and the 
last elements of the list. The first pointer, head, points to the first element and is updated whenever a new element is inserted 
at the beginning. The second pointer, tail, points to the last element and is likewise updated whenever a new element is added at the end. 

============================================================================================================================================
Java ArrayList class can contain duplicate elements.
Java ArrayList class maintains insertion order.
Java ArrayList class is non synchronized.
Java ArrayList allows random access because the array works on an index basis.
In ArrayList, manipulation is a little bit slower than the LinkedList in Java because a lot of shifting needs to occur if any element 
is removed from the array list.
We can not create an array list of the primitive types, such as int, float, char, etc. It is required to use the required wrapper class in 
such cases. For example:

============================================================================================================================================
ArrayList<int> al = ArrayList<int>(); // does not work  
ArrayList<Integer> al = new ArrayList<Integer>(); // works fine

Constructor	                                                     Description
ArrayList()                             	It is used to build an empty array list.
ArrayList(Collection<? extends E> c)	    It is used to build an array list that is initialized with the elements of the collection c.
ArrayList(int capacity)	                   It is used to build an array list that has the specified initial capacity.
============================================================================================================================================

Java collection framework was non-generic before JDK 1.5. Since 1.5, it is generic.

Java new generic collection allows you to have only one type of object in a collection. Now it is type-safe, so typecasting is not required at runtime.

Let's see the old non-generic example of creating a Java collection.

ArrayList list=new ArrayList();//creating old non-generic arraylist  
Let's see the new generic example of creating java collection.

ArrayList<String> list=new ArrayList<String>();//creating new generic arraylist  
============================================================================================================================================
Java ArrayList Example
FileName: ArrayListExample1.java

import java.util.*;  
 public class ArrayListExample1{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist    
      list.add("Mango");//Adding object in arraylist    
      list.add("Apple");    
      list.add("Banana");    
      list.add("Grapes");    
      //Printing the arraylist object   
      System.out.println(list);  
 }  
}  
==============================================================================================================================================
Iterating ArrayList using Iterator
Let's see an example to traverse ArrayList elements using the Iterator interface.

FileName: ArrayListExample2.java

import java.util.*;  
public class ArrayListExample2{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist  
  list.add("Mango");//Adding object in arraylist    
  list.add("Apple");    
  list.add("Banana");    
  list.add("Grapes");    
  //Traversing list through Iterator  
  Iterator itr=list.iterator();//getting the Iterator  
  while(itr.hasNext()){//check if iterator has the elements  
   System.out.println(itr.next());//printing the element and move to next  
  }  
 }  
}  
===============================================================================================================================================
Iterating ArrayList using For-each loop
Let's see an example to traverse the ArrayList elements using the for-each loop

FileName: ArrayListExample3.java

import java.util.*;  
public class ArrayListExample3{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist  
  list.add("Mango");//Adding object in arraylist    
  list.add("Apple");    
  list.add("Banana");    
  list.add("Grapes");    
  //Traversing list through for-each loop  
  for(String fruit:list)    
    System.out.println(fruit);    
  
 }  
}  
Output:


Test it Now
Mango
Apple
Banana
Grapes

================================================================================================================================================
array list

import java.util.*;
class arraylist{
  public static void main(String args[]){
    ArrayList<String>alist=new ArrayList<String>();
    alist.add("a");
    alist.add("b");
    alist.add(1,"c");
    System.out.println(alist);
    System.out.println("iterator");
    Iterator i=alist.iterator();
    while(i.hasNext()){
       System.out.println(i.next());
  }
    System.out.println("afer get    " + alist.get(0));
    
    
    System.out.println("afer setting a to u");
    
    alist.set(0,"u");
     System.out.println(alist);
     System.out.println("using for each loop");
    for(String k:alist)
      System.out.println(k);
     
     System.out.println("using for each loop");
    for(int m=0;m<alist.size();m++)
      System.out.println(alist.get(m));
    alist.remove("u");
    
    System.out.println(alist);
    alist.remove(0);
    System.out.println(alist);
    }
   }


============================================================================================================================================
Get and Set ArrayList
The get() method returns the element at the specified index, whereas the set() method changes the element.

FileName: ArrayListExample4.java

import java.util.*;  
public class ArrayListExample4{  
 public static void main(String args[]){  
  ArrayList<String> al=new ArrayList<String>();  
  al.add("Mango");  
  al.add("Apple");  
  al.add("Banana");  
  al.add("Grapes");  
  //accessing the element    
  System.out.println("Returning element: "+al.get(1));//it will return the 2nd element, because index starts from 0  
  //changing the element  
  al.set(1,"Dates");  
  //Traversing list  
  for(String fruit:al)    
    System.out.println(fruit);    
  
 }  
}  
Test it Now
Output:

Returning element: Apple
Mango
Dates
Banana
Grapes
=====================================================================================================================================
How to Sort ArrayList
The java.util package provides a utility class Collections, which has the static method sort(). Using the Collections.sort() method, we can easily sort the ArrayList.

FileName: SortArrayList.java

import java.util.*;  
class SortArrayList{  
 public static void main(String args[]){  
  //Creating a list of fruits  
  List<String> list1=new ArrayList<String>();  
  list1.add("Mango");  
  list1.add("Apple");  
  list1.add("Banana");  
  list1.add("Grapes");  
  //Sorting the list  
  Collections.sort(list1);  
   //Traversing list through the for-each loop  
  for(String fruit:list1)  
    System.out.println(fruit);  
      
 System.out.println("Sorting numbers...");  
  //Creating a list of numbers  
  List<Integer> list2=new ArrayList<Integer>();  
  list2.add(21);  
  list2.add(11);  
  list2.add(51);  
  list2.add(1);  
  //Sorting the list  
  Collections.sort(list2);  
   //Traversing list through the for-each loop  
  for(Integer number:list2)  
    System.out.println(number);  
 }  
   
}  
Output:

Apple
Banana
Grapes
Mango
Sorting numbers...
1
11
21
51
======================================================================================================================================================
User-defined class objects in Java ArrayList
Let's see an example where we are storing Student class object in an array list.

FileName: ArrayList5.java

class Student{  
  int rollno;  
  String name;  
  int age;  
  Student(int rollno,String name,int age){  
   this.rollno=rollno;  
   this.name=name;  
   this.age=age;  
  }  
}  

import java.util.*;  
 class ArrayList5{  
 public static void main(String args[]){  
  //Creating user-defined class objects  
  Student s1=new Student(101,"Sonoo",23);  
  Student s2=new Student(102,"Ravi",21);  
  Student s2=new Student(103,"Hanumat",25);  
  //creating arraylist  
  ArrayList<Student> al=new ArrayList<Student>();  
  al.add(s1);//adding Student class object  
  al.add(s2);  
  al.add(s3);  
  //Getting Iterator  
  Iterator itr=al.iterator();  
  //traversing elements of ArrayList object  
  while(itr.hasNext()){  
    Student st=(Student)itr.next();  
    System.out.println(st.rollno+" "+st.name+" "+st.age);  
  }  
 }  
}  
Output:

       101 Sonoo 23
       102 Ravi 21
       103 Hanumat 25
==========================================================================================================================================================
array list remove, set,get,add in the array list
[11:49] Karunakar Eeede
import java.util.*;
class Collections1  { 
   public static void main(String args[])    { 
     ArrayList<String> alist=new ArrayList<String>();   
    alist.add("Steve");    
  alist.add("Vinay");    
  alist.add("Jyothi");    
  alist.add("Ranjitha");    
  alist.add("Ravi");     
 alist.add(3,"Pavan");     
 System.out.println(alist);     
 //Collections.sort(alist);        
 alist.set(0, "Pavankalyan");
System.out.println("Using For Each:");     
    for(String str:alist)          
System.out.println(str);  
System.out.println("After Getting Elements:");   
System.out.println(alist.get(2));    
System.out.println("After Remove Elements:"); 
  alist.remove("Ravi");  
 alist.remove(4);    
 System.out.println("Using Iterator Class:");       
 Iterator itr=alist.iterator();       
 while(itr.hasNext()){        
 System.out.println(itr.next());      
  }    
 System.out.println("The Elements in an Array is:");      
for(int i=0;i<alist.size();i++) 
   {   
   System.out.println(alist.get(i));  
  }           
 }  
}
============================================================================================================================================
Java ArrayList example of retainAll() method
FileName: ArrayList9.java

import java.util.*;  
class ArrayList9{  
 public static void main(String args[]){  
  ArrayList<String> al=new ArrayList<String>();  
  al.add("Ravi");  
  al.add("Vijay");  
  al.add("Ajay");  
  ArrayList<String> al2=new ArrayList<String>();  
  al2.add("Ravi");  
  al2.add("Hanumat");  
  al.retainAll(al2);  
  System.out.println("iterating the elements after retaining the elements of al2");  
  Iterator itr=al.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  
 }  
}  
Output:

       iterating the elements after retaining the elements of al2
       Ravi
=======================================================================================================================
Java ArrayList example of isEmpty() method
FileName: ArrayList4.java

import java.util.*;  
 class ArrayList10{  
  
        public static void main(String [] args)  
        {  
          ArrayList<String> al=new ArrayList<String>();  
          System.out.println("Is ArrayList Empty: "+al.isEmpty());  
          al.add("Ravi");    
          al.add("Vijay");    
          al.add("Ajay");    
          System.out.println("After Insertion");  
          System.out.println("Is ArrayList Empty: "+al.isEmpty());   
       }  
    }      
Output:

Is ArrayList Empty: true
After Insertion
Is ArrayList Empty: false
==================================================================================================================================
Java ArrayList Example: Book
Let's see an ArrayList example where we are adding books to the list and printing all the books.

FileName: ArrayListExample20.java

import java.util.*;  
class Book {  
int id;  
String name,author,publisher;  
int quantity;  
public Book(int id, String name, String author, String publisher, int quantity) {  
    this.id = id;  
    this.name = name;  
    this.author = author;  
    this.publisher = publisher;  
    this.quantity = quantity;  
}  
}  
public class ArrayListExample20 {  
public static void main(String[] args) {  
    //Creating list of Books  
    List<Book> list=new ArrayList<Book>();  
    //Creating Books  
    Book b1=new Book(101,"Let us C","Yashwant Kanetkar","BPB",8);  
    Book b2=new Book(102,"Data Communications and Networking","Forouzan","Mc Graw Hill",4);  
    Book b3=new Book(103,"Operating System","Galvin","Wiley",6);  
    //Adding Books to list  
    list.add(b1);  
    list.add(b2);  
    list.add(b3);  
    //Traversing list  
    for(Book b:list){  
        System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);  
    }  
}  
}  
Test it Now
Output:

101 Let us C Yashwant Kanetkar BPB 8
102 Data Communications and Networking Forouzan Mc Graw Hill 4
103 Operating System Galvin Wiley 6
=============================================================================================================================================================

Size and Capacity of an ArrayList
Size and capacity of an array list are the two terms that beginners find confusing.
 Let's understand it in this section with the help of some examples. Consider the following code snippet.
=============================================================================================================================================================
FileName: SizeCapacity.java

import java.util.*;  
  
public class SizeCapacity  
{  
  
public static void main(String[] args) throws Exception  
{  
       
    ArrayList<Integer> al = new ArrayList<Integer>();  
      
    System.out.println("The size of the array is: " + al.size());  
}  
}  
Output:

The size of the array is: 0
=============================================================================================================================================================
Explanation: The output makes sense as we have not done anything with the array list. Now observe the following program.

FileName: SizeCapacity1.java

import java.util.*;  
  
public class SizeCapacity1  
{  
  
public static void main(String[] args) throws Exception  
{  
       
    ArrayList<Integer> al = new ArrayList<Integer>(10);  
      
    System.out.println("The size of the array is: " + al.size());  
}  
}  
Output:

The size of the array is: 0





Explanation: We see that the size is still 0, and the reason behind this is the number 10 represents the capacity no the size.
 In fact, the size represents the total number of elements present in the array. As we have not added any element, therefore, the size of the array 
list is zero in both programs.

Capacity represents the total number of elements the array list can contain. Therefore, the capacity of an array list is always greater than or
 equal to the size of the array list. When we add an element to the array list, it checks whether the size of the array list has become equal to the 
capacity or not. If yes, then the capacity of the array list increases. So, in the above example, the capacity will be 10 till 10 
elements are added to the list. When we add the 11th element, the capacity increases. Note that in both examples, the capacity of the array list is 10.
 In the first case, the capacity is 10 because the default capacity of the array list is 10. In the second case, we have explicitly mentioned that the
 capacity of the array list is 10.


=============================================================================================================================================================
sum of array list
import java.util.*;
class arraylist3{
  public static void main(String args[]){
    ArrayList<Integer>alist=new ArrayList<Integer>();
    alist.add(1);
    alist.add(2);
    alist.add(3);
    System.out.println(alist);
    int sum=0;
    for(int i=0;i<alist.size();i++){
      sum=sum+alist.get(i);
    }
    System.out.println(sum); 
  }
}

out put
the sum is 6
============================================================================================================================================
LinkedList
LinkedList implements the Collection interface. It uses a doubly linked list internally to store the elements.
 It can store the duplicate elements. It maintains the insertion order and is not synchronized. In LinkedList, the manipulation is fast because no 
shifting is required.

Java LinkedList class
Java LinkedList class hierarchy
Java LinkedList class uses a doubly linked list to store the elements. It provides a linked-list data structure. It inherits
 the AbstractList class and implements List and Deque interfaces.

The important points about Java LinkedList are:

Java LinkedList class can contain duplicate elements.
Java LinkedList class maintains insertion order.
Java LinkedList class is non synchronized.
In Java LinkedList class, manipulation is fast because no shifting needs to occur.
Java LinkedList class can be used as a list, stack or queue.
Hierarchy of LinkedList class
As shown in the above diagram, Java LinkedList class extends AbstractSequentialList class and implements List and Deque interfaces.

Doubly Linked List
In the case of a doubly linked list, we can add or remove elements from both sides.

===================================================================================================================================================
Java LinkedList Example
import java.util.*;  
public class LinkedList1{  
 public static void main(String args[]){  
  
  LinkedList<String> al=new LinkedList<String>();  
  al.add("Ravi");  
  al.add("Vijay");  
  al.add("Ravi");  
  al.add("Ajay");  
  
  Iterator<String> itr=al.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  
 }  
}  
Output: Ravi
       Vijay
       Ravi
       Ajay
=======================================================================================================================================================
linked list of java
import java.util.*;
class linkedlist{
  public static void main(String args[]){
  LinkedList<String>alist=new LinkedList<String>();
    alist.add("a");
    alist.add("b");
    alist.add(1,"c");
    System.out.println(alist);
    System.out.println("iterator");
    Iterator i=alist.iterator();
    while(i.hasNext()){
       System.out.println(i.next());
  }
    System.out.println("afer get    " + alist.get(0));
    
    
    System.out.println("afer setting a to u");
    
    alist.set(0,"u");
     System.out.println(alist);
     System.out.println("using for each loop");
    for(String k:alist)
      System.out.println(k);
     
     System.out.println("using for each loop");
    for(int m=0;m<alist.size();m++)
      System.out.println(alist.get(m));
    alist.remove("u");
    
    System.out.println(alist);
    alist.remove(0);
    
    System.out.println(alist);
    
   
  }
}

=================================================================================================================================================
Java LinkedList example to add elements
Here, we see different ways to add elements.

import java.util.*;  
public class LinkedList2{  
 public static void main(String args[]){  
 LinkedList<String> ll=new LinkedList<String>();  
           System.out.println("Initial list of elements: "+ll);  
           ll.add("Ravi");  
           ll.add("Vijay");  
           ll.add("Ajay");  
           System.out.println("After invoking add(E e) method: "+ll);  
           //Adding an element at the specific position  
           ll.add(1, "Gaurav");  
           System.out.println("After invoking add(int index, E element) method: "+ll);  
           LinkedList<String> ll2=new LinkedList<String>();  
           ll2.add("Sonoo");  
           ll2.add("Hanumat");  
           //Adding second list elements to the first list  
           ll.addAll(ll2);  
           System.out.println("After invoking addAll(Collection<? extends E> c) method: "+ll);  
           LinkedList<String> ll3=new LinkedList<String>();  
           ll3.add("John");  
           ll3.add("Rahul");  
           //Adding second list elements to the first list at specific position  
           ll.addAll(1, ll3);  
           System.out.println("After invoking addAll(int index, Collection<? extends E> c) method: "+ll);  
           //Adding an element at the first position  
           ll.addFirst("Lokesh");  
           System.out.println("After invoking addFirst(E e) method: "+ll);  
           //Adding an element at the last position  
           ll.addLast("Harsh");  
           System.out.println("After invoking addLast(E e) method: "+ll);  
             
 }  
}  
Initial list of elements: []
After invoking add(E e) method: [Ravi, Vijay, Ajay]
After invoking add(int index, E element) method: [Ravi, Gaurav, Vijay, Ajay]
After invoking addAll(Collection<? extends E> c) method: 
[Ravi, Gaurav, Vijay, Ajay, Sonoo, Hanumat]
After invoking addAll(int index, Collection<? extends E> c) method: 
[Ravi, John, Rahul, Gaurav, Vijay, Ajay, Sonoo, Hanumat]
After invoking addFirst(E e) method: 
[Lokesh, Ravi, John, Rahul, Gaurav, Vijay, Ajay, Sonoo, Hanumat]
After invoking addLast(E e) method: 
[Lokesh, Ravi, John, Rahul, Gaurav, Vijay, Ajay, Sonoo, Hanumat, Harsh]
=====================================================================================================================================================
Java LinkedList example to remove elements
Here, we see different ways to remove an element.

import java.util.*;  
public class LinkedList3 {  
  
        public static void main(String [] args)  
        {  
           LinkedList<String> ll=new LinkedList<String>();  
           ll.add("Ravi");  
           ll.add("Vijay");  
           ll.add("Ajay");  
           ll.add("Anuj");  
           ll.add("Gaurav");  
           ll.add("Harsh");  
           ll.add("Virat");  
           ll.add("Gaurav");  
           ll.add("Harsh");  
           ll.add("Amit");  
           System.out.println("Initial list of elements: "+ll);  
         //Removing specific element from arraylist  
              ll.remove("Vijay");  
              System.out.println("After invoking remove(object) method: "+ll);
   
         //Removing element on the basis of specific position  
              ll.remove(0);  

              System.out.println("After invoking remove(index) method: "+ll);   
              LinkedList<String> ll2=new LinkedList<String>();  
              ll2.add("Ravi");  
              ll2.add("Hanumat");
  
         // Adding new elements to arraylist  
              ll.addAll(ll2);  
              System.out.println("Updated list : "+ll); 
  
         //Removing all the new elements from arraylist  
              ll.removeAll(ll2);  
              System.out.println("After invoking removeAll() method: "+ll);

   
         //Removing first element from the list  
              ll.removeFirst();  
              System.out.println("After invoking removeFirst() method: "+ll);
  
          //Removing first element from the list  
              ll.removeLast();  
              System.out.println("After invoking removeLast() method: "+ll);  

          //Removing first occurrence of element from the list  
              ll.removeFirstOccurrence("Gaurav");  
              System.out.println("After invoking removeFirstOccurrence() method: "+ll);  


          //Removing last occurrence of element from the list  
              ll.removeLastOccurrence("Harsh");  
              System.out.println("After invoking removeLastOccurrence() method: "+ll);
  
  
              //Removing all the elements available in the list       
              ll.clear();  
              System.out.println("After invoking clear() method: "+ll);   
       }  
    }

                   
Initial list of elements: [Ravi, Vijay, Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]
After invoking remove(object) method: [Ravi, Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]
After invoking remove(index) method: [Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]
Updated list : [Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit, Ravi, Hanumat]
After invoking removeAll() method: [Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]
After invoking removeFirst() method: [Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]
After invoking removeLast() method: [Gaurav, Harsh, Virat, Gaurav, Harsh]
After invoking removeFirstOccurrence() method: [Harsh, Virat, Gaurav, Harsh]
After invoking removeLastOccurrence() method: [Harsh, Virat, Gaurav]
After invoking clear() method: []
=====================================================================================================================================================
Java LinkedList Example to reverse a list of elements
import java.util.*;  
public class LinkedList4{  
 public static void main(String args[]){  
  
  LinkedList<String> ll=new LinkedList<String>();  
           ll.add("Ravi");  
           ll.add("Vijay");  
           ll.add("Ajay");  
           //Traversing the list of elements in reverse order  
           Iterator i=ll.descendingIterator();  
           while(i.hasNext())  
           {  
               System.out.println(i.next());  
           }  
             
 }  
}  
Output: Ajay
Vijay
Ravi
=====================================================================================================================================================
Java LinkedList Example: Book
import java.util.*;  
class Book {  
int id;  
String name,author,publisher;  
int quantity;  
public Book(int id, String name, String author, String publisher, int quantity) {  
    this.id = id;  
    this.name = name;  
    this.author = author;  
    this.publisher = publisher;  
    this.quantity = quantity;  
}  
}  
public class LinkedListExample {  
public static void main(String[] args) {  
    //Creating list of Books  
    List<Book> list=new LinkedList<Book>();  
    //Creating Books  
    Book b1=new Book(101,"Let us C","Yashwant Kanetkar","BPB",8);  
    Book b2=new Book(102,"Data Communications & Networking","Forouzan","Mc Graw Hill",4);  
    Book b3=new Book(103,"Operating System","Galvin","Wiley",6);  
    //Adding Books to list  
    list.add(b1);  
    list.add(b2);  
    list.add(b3);  
    //Traversing list  
    for(Book b:list){  
    System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);  
    }  
}  
}  
Output:

101 Let us C Yashwant Kanetkar BPB 8
102 Data Communications & Networking Forouzan Mc Graw Hill 4
103 Operating System Galvin Wiley 6

=====================================================================================================================================================
sum of elements in linked list

import java.util.*;
class linkedsum{
  public static void main(String args[]){
    LinkedList<Integer>alist=new LinkedList<Integer>();
    alist.add(1);
    alist.add(2);
    alist.add(3);
    System.out.println(alist);
    int sum=0;
    for(int i=0;i<alist.size();i++){
      sum=sum+alist.get(i);
    }
    System.out.println(sum); 
  }
  
}

===========================================================================================================================================================

//deleting of element in the linked list

import java.util.*;
class linkedlist12{
  public static void main(String args[]){
    LinkedList<Integer>alist=new LinkedList<Integer>();
    alist.add(1);
    alist.add(2);
    alist.add(3);
     alist.add(4);
    alist.add(5);
    alist.add(7);
    alist.remove(3);
    alist.removeFirst();
    alist.removeLast();
    
    for(int m=0;m<alist.size();m++)
      System.out.println(alist.get(m));
  }
}
=================================================================================================================================================
https://stackabuse.com/difference-between-arraylist-and-linkedlist-in-java-code-and-performance/
Difference Between ArrayList and LinkedList in Java - Code and Performance
In this article, we'll dive into what's the difference between an ArrayList and a LinkedList in Java. We'll compare their code and performance to highlight the distinction.
============================================================================================================================================
import java.io.*;
import java.util.*;
 public class LinkedTest
{
   public static void main(String args[]) 
  {
    BufferedReader br;
    String str;
    char ch;
      LinkedList list=new LinkedList();
  while(true)
    {
       System.out.println("1.Add Item");
       System.out.println("2.Remove Item");
       System.out.println("3.Display Item");
       System.out.println("4.Exit");
           try
        {
                    br=new BufferedReader(new InputStreamReader(System.in));
           System.out.print("Choose Your Choice:");
           str=br.readLine();
           ch=str.charAt(0);
        switch(ch)
         {
          case '1':
                 System.out.print("Enter Element..>");
                 str=br.readLine();
                 list.add(str);
                          System.out.println("Item ..>"+str+"...is added");
                  break;
          case '2':
            System.out.print("Enter Element..>");
            str=br.readLine();
        if(list.remove(str))
               System.out.println("Item is Removed..");
             else      
                 System.out.println("Item not found..>");
              break;
               case  '3':
          for(int i=0;i<list.size();i++)
          System.out.println(list.get(i));
                         break;
             case '4':
                      System.exit(0);
          default:
                 System.out.println("Wrong Choice..>");
                   break;
         }
       }catch(Exception e)
        {
         
        System.out.println("IOException....."+e.getMessage());
        }
    }    
}     
}
===============================================================================================================================================================
vector list
Vector
Vector uses a dynamic array to store the data elements. It is similar to ArrayList. However,
 It is synchronized and contains many methods that are not the part of Collection framework.

 Vector is like the dynamic array which can grow or shrink its size. Unlike array, we can store n-number of elements in it as there is no size limit.
 It is a part of Java Collection framework since Java 1.2. It is found in the java.util package and implements the List interface, so we can use all the 
methods of List interface here.

It is recommended to use the Vector class in the thread-safe implementation only. If you don't need to use the thread-safe implementation, you should
 use the ArrayList, the ArrayList will perform better in such case.

The Iterators returned by the Vector class are fail-fast. In case of concurrent modification, it fails and throws the ConcurrentModificationException.

It is similar to the ArrayList, but with two differences-

Vector is synchronized.
Java Vector contains many legacy methods that are not the part of a collections framework
===============================================================================================================================================================

import java.util.*;  
public class VectorExample {  
       public static void main(String args[]) {  
          //Create a vector  
          Vector<String> vec = new Vector<String>();  
          //Adding elements using add() method of List  
          vec.add("Tiger");  
          vec.add("Lion");  
          vec.add("Dog");  
          vec.add("Elephant");  
          //Adding elements using addElement() method of Vector  
          vec.addElement("Rat");  
          vec.addElement("Cat");  
          vec.addElement("Deer");  
            
          System.out.println("Elements are: "+vec);  
       }  
}  
Test it Now
Output:

Elements are: [Tiger, Lion, Dog, Elephant, Rat, Cat, Deer]

===============================================================================================================================================================
Java Vector Example 2
import java.util.*;  
public class VectorExample1 {  
       public static void main(String args[]) {  
          //Create an empty vector with initial capacity 4  
          Vector<String> vec = new Vector<String>(4);  
          //Adding elements to a vector  
          vec.add("Tiger");  
          vec.add("Lion");  
          vec.add("Dog");  
          vec.add("Elephant");  
          //Check size and capacity  
          System.out.println("Size is: "+vec.size());  
          System.out.println("Default capacity is: "+vec.capacity());  
          //Display Vector elements  
          System.out.println("Vector element is: "+vec);  
          vec.addElement("Rat");  
          vec.addElement("Cat");  
          vec.addElement("Deer");  
          //Again check size and capacity after two insertions  
          System.out.println("Size after addition: "+vec.size());  
          System.out.println("Capacity after addition is: "+vec.capacity());  
          //Display Vector elements again  
          System.out.println("Elements are: "+vec);  
          //Checking if Tiger is present or not in this vector         
            if(vec.contains("Tiger"))  
            {  
               System.out.println("Tiger is present at the index " +vec.indexOf("Tiger"));  
            }  
            else  
            {  
               System.out.println("Tiger is not present in the list.");  
            }  
            //Get the first element  
          System.out.println("The first animal of the vector is = "+vec.firstElement());   
          //Get the last element  
          System.out.println("The last animal of the vector is = "+vec.lastElement());   
       }  
}  
Test it Now
Output:

Size is: 4
Default capacity is: 4
Vector element is: [Tiger, Lion, Dog, Elephant]
Size after addition: 7
Capacity after addition is: 8
Elements are: [Tiger, Lion, Dog, Elephant, Rat, Cat, Deer]
Tiger is present at the index 0
The first animal of the vector is = Tiger
The last animal of the vector is = Deer
===============================================================================================================================================================
Java Vector Example 3
import java.util.*;  
public class VectorExample2 {  
       public static void main(String args[]) {  
        //Create an empty Vector        
        Vector<Integer> in = new Vector<>();  
        //Add elements in the vector  
        in.add(100);  
        in.add(200);  
        in.add(300);  
        in.add(200);  
        in.add(400);  
        in.add(500);  
        in.add(600);  
        in.add(700);  
        //Display the vector elements  
        System.out.println("Values in vector: " +in);  
        //use remove() method to delete the first occurence of an element  
        System.out.println("Remove first occourence of element 200: "+in.remove((Integer)200));  
        //Display the vector elements afre remove() method  
        System.out.println("Values in vector: " +in);  
        //Remove the element at index 4  
        System.out.println("Remove element at index 4: " +in.remove(4));  
        System.out.println("New Value list in vector: " +in);  
        //Remove an element  
        in.removeElementAt(5);        
        //Checking vector and displays the element  
        System.out.println("Vector element after removal: " +in);  
        //Get the hashcode for this vector  
        System.out.println("Hash code of this vector = "+in.hashCode());  
        //Get the element at specified index  
        System.out.println("Element at index 1 is = "+in.get(1));  
          }  
}  
Test it Now
Output:

Values in vector: [100, 200, 300, 200, 400, 500, 600, 700]
Remove first occourence of element 200: true
Values in vector: [100, 300, 200, 400, 500, 600, 700]
Remove element at index 4: 500
New Value list in vector: [100, 300, 200, 400, 600, 700]
Vector element after removal: [100, 300, 200, 400, 600]
Hash code of this vector = 130123751
Element at index 1 is = 300



===============================================================================================================================================================
Example 1
import java.util.Vector;  
public class VectorAddExample1 {    
    public static void main(String arg[]) {  
        //Create an empty Vector with an initial capacity of 5        
          Vector<String> vc = new Vector<>(4);  
          //Add elements in the vector by using add() method  
          vc.add("A");  
          vc.add("B");  
          vc.add("C");  
          vc.add("D");  
          vc.add("E");  
          //Print all the elements of a Vector  
          System.out.println("--Elements of Vector are--");             
          for (String str : vc) {           
             System.out.println("Alphabet= " +str);  
          }  
      }  
}  
Test it Now
Output:

--Elements of Vector are--
Alphabet= A
Alphabet= B
Alphabet= C
Alphabet= D
Alphabet= E
===========================================================================================================================================================
Example 2
import java.util.Vector;  
public class VectorAddExample2 {    
    public static void main(String arg[]) {  
        //Create vector object  
        Vector<String> vr = new Vector<>();          
        vr.add(0, "Java");  
        vr.add(1, "Android");  
        vr.add(2, "Python");  
        vr.add(3, "JavaTpoint");  
        vr.add(4, "Hindi100");          
        System.out.println("Vector is: " + vr);  
        }  
}  
Test it Now
Output:

Vector is: [Java, Android, Python, JavaTpoint, Hindi100]
===========================================================================================================================================================
Example 3
import java.util.Vector;  
public class VectorAddExample3 {    
    public static void main(String arg[]) {       
        //Create a Vector and add elements        
        Vector<String> vector = new Vector<>();       
        vector.add("A");          
        vector.add("B");          
        vector.add("C");                              
        vector.add(10,"H");   
        System.out.println("Elements in Vector : ");          
        for(int i=0; i < vector.size(); i++)   
            System.out.println("Element: "+vector.get(i));  
        }  
}  
Test it Now
Output:

Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 10 > 3
	at java.base/java.util.Vector.insertElementAt(Vector.java:619)
	at java.base/java.util.Vector.add(Vector.java:857)
	at myPackage.VectorAddExample3.main(VectorAddExample3.java:11)
===========================================================================================================================================================
Example 4
import java.util.Vector;  
public class VectorAddExample4 {    
    public static void main(String arg[]) {  
          Vector <String> colors = new Vector <String>();  
            colors.add("White");  
            colors.add("Green");  
            colors.add("Black");  
            colors.add("Pink");    
            for (String color: colors) {  
                System.out.println("Element at index: "+colors.indexOf(color) + " Color: " +color);  
            }      
            colors.add(1, "Yellow");       
            System.out.println("New color Yellow added at first position.");   
            for (String color: colors) {  
                System.out.println("Element at index: "+colors.indexOf(color) + " Color: " +color);  
            }  
       }  
}  
Test it Now
Output:

Element at index: 0 Color: White
Element at index: 1 Color: Green
Element at index: 2 Color: Black
Element at index: 3 Color: Pink
New color Yellow added at first position.
Element at index: 0 Color: White
Element at index: 1 Color: Yellow
Element at index: 2 Color: Green
Element at index: 3 Color: Black
Element at index: 4 Color: Pink


===========================================================================================================================================================
The addAll() method returns true if this Vector changed as a result of the call.

Exceptions:
NullPointerException- This method has thrown an exception if the specified collection is null.

IndexOutOfBoundsException- This method has thrown an exception if the index of an array is out of range i.e. (index < 0 || index > size()).

Compatibility Version:
Java 1.2 and above

Example 1:
import java.util.*;  
public class VectorAddAllExample1 {  
    public static void main(String arg[]) {   
        //Create an empty arrayList1  
        ArrayList<Integer>  arrlist1 = new ArrayList<Integer>(4);  
        //Add elements into an arrayList1    
        arrlist1.add(1);  
        arrlist1.add(2);  
        arrlist1.add(3);  
        System.out.println("List of first arrayList: "+arrlist1);  
        //Create an empty arrayList2  
        ArrayList<Integer>  arrlist2 = new ArrayList<Integer>(4);  
        //Add elements into an arrayList2  
        arrlist2.add(4);  
        arrlist2.add(5);  
        arrlist2.add(6);  
        System.out.println("List of second arrayList: "+arrlist2);        
        //Appending all elements  
        arrlist1.addAll(arrlist2);  
        //Printing the final arrayList  
        System.out.println("Final arrayList: "+arrlist1);          
        }              
}  
Test it Now
Output:

List of first arrayList: [1, 2, 3]
List of second arrayList: [4, 5, 6, 7]
Final arrayList: [1, 2, 3, 4, 5, 6, 7]
=================================================================================================================================================
Example 1:
import java.util.Vector;  
public class VectorAddElementExample1 {    
    public static void main(String arg[]) {  
        //Create an empty Vector with an initial capacity of 3        
          Vector<String> vc = new Vector<>(3);  
          //Add elements in the vector by using add() method  
          vc.add("A");  
          vc.add("B");  
          vc.add("C");          
          //Print all the elements of a Vector  
          System.out.println("--Elements of Vector are--");             
          for (String str : vc) {           
             System.out.println("Element= " +str);  
          }  
          //Add new element  
          vc.addElement("JavaTpoint");  
          //After addition, print all the elements again   
          System.out.println("---Elements after addition--- ");             
          for (String str : vc) {           
             System.out.println("Element= " +str);  
          }  
      }  
}  
Test it Now
Output:

--Elements of Vector are--
Element= A
Element= B
Element= C
---Elements after addition--- 
Element= A
Element= B
Element= C
Element= JavaTpoint
==========================================================================================================================================================
Example 1:
import java.util.Vector;  
public class VectorClearExample1 {    
    public static void main(String arg[]) {  
        //Create an empty Vector      
          Vector<String> vc = new Vector<>();  
          //Add elements in the vector by using add() method  
          vc.add("A");  
          vc.add("B");  
          vc.add("C");    
          //Print the size of vector  
          System.out.println("Size of Vector before clear() method: "+vc.size());  
          //Clear the vector  
          vc.clear();  
          System.out.println("Size of Vector after clear() method: "+vc.size());  
            }  
}  
Test it Now
Output:

Size of Vector before clear() method: 3
Size of Vector after clear() method: 0
==========================================================================================================================================================
Java Vector clone() Method
The clone() method of Java Vector class is used to get a clone of the vector which is in use.


import java.util.Vector;  
public class VectorCloneExample1 {    
    public static void main(String arg[]) {  
        //Create an empty vector object  
        Vector<String> vc = new Vector<String>();  
            //Adding elements to the vector  
            vc.add("Tiger");  
            vc.add("Deer");  
            vc.add("Dog");  
            vc.add("Camel");  
            System.out.println("Original vector: "+vc);        
            System.out.println("Cloned vector: "+vc.clone());  
            }  
}  
Test it Now
Output:

Original vector: [Tiger, Deer, Dog, Camel]
Cloned vector: [Tiger, Deer, Dog, Camel]
======================================================================================================================================
Example 2:
import java.util.Vector;  
public class VectorCloneExample2 {    
    public static void main(String arg[]) {  
        //Create an empty Vector vec with an initial capacity of 4        
          Vector<Integer> vc = new Vector<Integer>(4);  
          Vector<Integer> vecclone = new Vector<Integer>(4);  
          //Add elements in the vector  
          vc.add(4);  
          vc.add(3);  
          vc.add(2);  
          vc.add(1);  
          //Print all the elements available in vector  
          System.out.println("Elements in vector are: ");           
          for (Integer num : vc) {           
             System.out.println("Number= " +num);  
          }            
          //clone the vector vec  
          vecclone = (Vector) vc.clone();  
          //Print all the elements available in vecclone  
          System.out.println("Elements in vecclone vector are: ");                  
          for (Integer num : vecclone) {           
             System.out.println("Number = " + num);  
          }  
    }              
}  
Test it Now
Output:

Elements in vector are: 
Number = 4
Number = 3
Number = 2
Number = 1
Elements in vecclone vector are: 
Number = 4
Number = 3
Number = 2
Number = 1
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================

import java.util.*;
public class VectorDemo2 {   
 public static void main(String[] args)    
 {      
  Vector<Object> list=new Vector<Object>();             
   list.add(new Date());      
  list.add(new Integer(1000));        
list.add("bitLabs");      
  list.add(new Float(43040.39));      
  list.add("KARUN");       
 list.add(new Float(43040.39));               
 for(int i=0;i<list.size();i++) {       
 System.out.println(list.elementAt(i));   
     }                      
   }
}
===========================================================================================
//vectors 

import java.util.*;
class vector{
  public static void main(String args[]){
    Vector<Object> k=new Vector<Object>();
    k.add(new Date());
    k.add(new Integer(100));
    k.add(8.976);
    for(int i=0;i<k.size();i++){
     System.out.println(k.elementAt(i)) ;
    }
  }
}

=============================================================================================
//stacks
Stack
The stack is the subclass of Vector. It implements the last-in-first-out data structure, i.e., Stack. The stack contains all of the methods of 
Vector class and also provides its methods like boolean push(), boolean peek(), boolean push(object o), which defines its properties.

Java Stack
The stack is a linear data structure that is used to store the collection of objects. It is based on Last-In-First-Out (LIFO).
 Java collection framework provides many interfaces and classes to store the collection of objects. One of them is the Stack class that provides 
different operations such as push, pop, search, etc.

In this section, we will discuss the Java Stack class, its methods, and implement the stack data structure in a Java program. But before moving to the 
Java Stack class have a quick view of how the stack works.

The stack data structure has the two most important operations that are push and pop. The push operation inserts an element into the stack and pop 
operation removes an element from the top of the stack. Let's see how they work on stack.


Stack Class empty() Method
The empty() method of the Stack class check the stack is empty or not. If the stack is empty, it returns true, else returns false. We can also
 use the isEmpty() method of the Vector class.

Syntax


public boolean empty()  
Returns: The method returns true if the stack is empty, else returns false.

In the following example, we have created an instance of the Stack class. After that, we have invoked the empty() method two times. The first time
 it returns true because we have not pushed any element into the stack. After that, we have pushed elements into the stack. Again we have invoked the
 empty() method that returns false because the stack is not empty.
========================================================================================================================================================
StackEmptyMethodExample.java

import java.util.Stack;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  
//creating an instance of Stack class  
Stack<Integer> stk= new Stack<>();  
// checking stack is empty or not  
boolean result = stk.empty();  
System.out.println("Is the stack empty? " + result);  
// pushing elements into stack  
stk.push(78);  
stk.push(113);  
stk.push(90);  
stk.push(120);  
//prints elements of the stack  
System.out.println("Elements in Stack: " + stk);  
result = stk.empty();  
System.out.println("Is the stack empty? " + result);  
}  
}  
Output:

Is the stack empty? true
Elements in Stack: [78, 113, 90, 120]
Is the stack empty? false
Stack Class push() Method
The method inserts an item onto the top of the stack. It works the same as the method addElement(item) method of the Vector class. It passes a parameter item to be pushed into the stack.

Syntax

public E push(E item)  
Parameter: An item to be pushed onto the top of the stack.

Returns: The method returns the argument that we have passed as a parameter.

Stack Class pop() Method
The method removes an object at the top of the stack and returns the same object. It throws EmptyStackException if the stack is empty.

Syntax

public E pop()  
Returns: It returns an object that is at the top of the stack.

Let's implement the stack in a Java program and perform push and pop operations.
========================================================================================================================================================
StackPushPopExample.java

import java.util.*;  
public class StackPushPopExample   
{  
public static void main(String args[])   
{  
//creating an object of Stack class  
Stack <Integer> stk = new Stack<>();  
System.out.println("stack: " + stk);  
//pushing elements into the stack  
pushelmnt(stk, 20);  
pushelmnt(stk, 13);  
pushelmnt(stk, 89);  
pushelmnt(stk, 90);  
pushelmnt(stk, 11);  
pushelmnt(stk, 45);  
pushelmnt(stk, 18);  
//popping elements from the stack  
popelmnt(stk);  
popelmnt(stk);  
//throws exception if the stack is empty  
try   
{  
popelmnt(stk);  
}   
catch (EmptyStackException e)   
{  
System.out.println("empty stack");  
}  
}  
//performing push operation  
static void pushelmnt(Stack stk, int x)   
{  
//invoking push() method      
stk.push(new Integer(x));  
System.out.println("push -> " + x);  
//prints modified stack  
System.out.println("stack: " + stk);  
}  
//performing pop operation  
static void popelmnt(Stack stk)   
{  
System.out.print("pop -> ");  
//invoking pop() method   
Integer x = (Integer) stk.pop();  
System.out.println(x);  
//prints modified stack  
System.out.println("stack: " + stk);  
}  
}  
Output:

stack: []
push -> 20
stack: [20]
push -> 13
stack: [20, 13]
push -> 89
stack: [20, 13, 89]
push -> 90
stack: [20, 13, 89, 90]
push -> 11
stack: [20, 13, 89, 90, 11]
push -> 45
stack: [20, 13, 89, 90, 11, 45]
push -> 18
stack: [20, 13, 89, 90, 11, 45, 18]
pop -> 18
stack: [20, 13, 89, 90, 11, 45]
pop -> 45
stack: [20, 13, 89, 90, 11]
pop -> 11
stack: [20, 13, 89, 90]
Stack Class peek() Method
It looks at the element that is at the top in the stack. It also throws EmptyStackException if the stack is empty.
========================================================================================================================================================
Syntax

public E peek()  
Returns: It returns the top elements of the stack.

Let's see an example of the peek() method.
========================================================================================================================================================
StackPeekMethodExample.java

import java.util.Stack;  
public class StackPeekMethodExample   
{  
public static void main(String[] args)   
{  
Stack<String> stk= new Stack<>();  
// pushing elements into Stack  
stk.push("Apple");  
stk.push("Grapes");  
stk.push("Mango");  
stk.push("Orange");  
System.out.println("Stack: " + stk);  
// Access element from the top of the stack  
String fruits = stk.peek();  
//prints stack  
System.out.println("Element at top: " + fruits);  
}  
}  
Output:

Stack: [Apple, Grapes, Mango, Orange]
Element at the top of the stack: Orange
========================================================================================================================================================
Stack Class search() Method
The method searches the object in the stack from the top. It parses a parameter that we want to search for. It returns the 1-based location of the object in the stack. Thes topmost object of the stack is considered at distance 1.

Suppose, o is an object in the stack that we want to search for. The method returns the distance from the top of the stack of the occurrence nearest the top of the stack. It uses equals() method to search an object in the stack.

Syntax

public int search(Object o)  
Parameter: o is the desired object to be searched.

Returns: It returns the object location from the top of the stack. If it returns -1, it means that the object is not on the stack.

Let's see an example of the search() method.

StackSearchMethodExample.java
========================================================================================================================================================
import java.util.Stack;  
public class StackSearchMethodExample  
{  
public static void main(String[] args)   
{  
Stack<String> stk= new Stack<>();  
//pushing elements into Stack  
stk.push("Mac Book");  
stk.push("HP");  
stk.push("DELL");  
stk.push("Asus");  
System.out.println("Stack: " + stk);  
// Search an element  
int location = stk.search("HP");  
System.out.println("Location of Dell: " + location);  
}  
}  
========================================================================================================================================================
Java Stack Operations
Size of the Stack
We can also find the size of the stack using the size() method of the Vector class. It returns the total number of elements (size of the stack) in the stack.

Syntax

public int size()  
Let's see an example of the size() method of the Vector class.

StackSizeExample.java

import java.util.Stack;  
public class StackSizeExample   
{    
public static void main (String[] args)   
{   
Stack stk = new Stack();  
stk.push(22);  
stk.push(33);  
stk.push(44);  
stk.push(55);  
stk.push(66);  
// Checks the Stack is empty or not  
boolean rslt=stk.empty();  
System.out.println("Is the stack empty or not? " +rslt);  
// Find the size of the Stack  
int x=stk.size();  
System.out.println("The stack size is: "+x);  
}  
}  
Output:

Is the stack empty or not? false
The stack size is: 5
========================================================================================================================================================
Iterate Elements
Iterate means to fetch the elements of the stack. We can fetch elements of the stack using three different methods are as follows:

Using iterator() Method
Using forEach() Method
Using listIterator() Method
Using the iterator() Method
It is the method of the Iterator interface. It returns an iterator over the elements in the stack. Before using the iterator() method import the java.util.Iterator package.
========================================================================================================================================================
Syntax

Iterator<T> iterator()  
Let's perform an iteration over the stack.

StackIterationExample1.java

import java.util.Iterator;  
import java.util.Stack;  
public class StackIterationExample1   
{     
public static void main (String[] args)   
{   
//creating an object of Stack class  
Stack stk = new Stack();  
//pushing elements into stack  
stk.push("BMW");  
stk.push("Audi");  
stk.push("Ferrari");  
stk.push("Bugatti");  
stk.push("Jaguar");  
//iteration over the stack  
Iterator iterator = stk.iterator();  
while(iterator.hasNext())  
{  
Object values = iterator.next();  
System.out.println(values);   
}     
}  
}  
Output:

BMW
Audi
Ferrari
Bugatti
Jaguar
========================================================================================================================================================
Using the forEach() Method
Java provides a forEach() method to iterate over the elements. The method is defined in the Iterable and Stream interface.

Syntax

default void forEach(Consumer<super T>action)    
Let's iterate over the stack using the forEach() method.

StackIterationExample2.java

import java.util.*;  
public class StackIterationExample2  
{  
public static void main (String[] args)   
{   
//creating an instance of Stack class  
Stack <Integer> stk = new Stack<>();  
//pushing elements into stack  
stk.push(119);  
stk.push(203);  
stk.push(988);  
System.out.println("Iteration over the stack using forEach() Method:");  
//invoking forEach() method for iteration over the stack  
stk.forEach(n ->  
{  
System.out.println(n);  
});  
}  
}  
Output:

Iteration over the stack using forEach() Method:
119
203
988
========================================================================================================================================================
Using listIterator() Method
This method returns a list iterator over the elements in the mentioned list (in sequence), starting at the specified position in the list. It iterates the stack from top to bottom.

Syntax

ListIterator listIterator(int index)  
Parameter: The method parses a parameter named index.

Returns: This method returns a list iterator over the elements, in sequence.

Exception: It throws IndexOutOfBoundsException if the index is out of range.

Let's iterate over the stack using the listIterator() method.

StackIterationExample3.java
========================================================================================================================================================
import java.util.Iterator;  
import java.util.ListIterator;  
import java.util.Stack;  
   
public class StackIterationExample3  
{  
public static void main (String[] args)   
{   
Stack <Integer> stk = new Stack<>();  
stk.push(119);  
stk.push(203);  
stk.push(988);  
ListIterator<Integer> ListIterator = stk.listIterator(stk.size());  
System.out.println("Iteration over the Stack from top to bottom:");  
while (ListIterator.hasPrevious())   
{  
Integer avg = ListIterator.previous();  
System.out.println(avg);  
}  
}  
}  
Output:

Iteration over the Stack from top to bottom:
988
203
119

========================================================================================================================================================
Java Stack

import java.util.*;
class stack1{
  public static void main(String args[]){
    Stack<String> k=new  Stack<String>();
    k.push("aryan");
     k.push("amit");
     k.push("kavya");
     k.push("arjun");
     k.push("anand");
    k.pop();
    Iterator i=k.iterator();
    while(i.hasNext()){
       System.out.println(i.next());
  }
  }
}
==================================================================================================

Some Applications of a stack are:
 
Converting infix to postfix expressions.Undo/Redo button/operation in word processors.Syntaxes in languages are parsed using stacks.

It is used in many virtual machines like JVM.Forward-backward surfing in the browser.History of visited websites.

Message logs and all messages you get are arranged in a stack.

Call logs, E-mails, Google photos’ any gallery, YouTube downloads, Notifications ( latest appears first ).

Scratch card’s earned after Google pay transaction.

Wearing/Removing Bangles, Pile of Dinner Plates, Stacked chairs.Changing wearables on a cold evening, first in, comes out at last.

Last Hired, First Fired - which is typically utilized when a company reduces its workforce in an economic recession.

Loading bullets into the magazine of a gun. The last one to go in is fired first.

 Bam!Java Virtual Machine.Recursion.Used in IDEs to check for proper parentheses matchingMedia playlist.

 T o play previous and next song Application of Queue:A queue is a data structure that uses FIFO order.
 
 Some applications of a queue are: Operating System uses queues for job scheduling.To handle congestion in the networking queue can be used.


Data packets in communication are arranged in queue format.Sending an e-mail, it will be queued.Server while responding to requestUploading and 
downloading photos, first kept for uploading/downloading will be completed first (Not if there is threading)Most internet requests and processes use queue.

While switching multiple applications, windows use circular queue.In Escalators, Printer spooler, Car washes queue.A circular queue is used to maintain
 the playing sequence of multiple players in a game.A queue can be implemented in - Linked List-based Queue, Array-based Queue, Stack-based Queue.

Uploading and downloading photos, first kept for uploading/downloading will be completed first (Not if there is threading).
 Handle website trafficCPU scheduling


==========================================================================================================================================
Queue Interface
Queue interface maintains the first-in-first-out order. It can be defined as an ordered list that is used to hold the elements which are about to 
be processed. There are various classes like PriorityQueue, Deque, and ArrayDeque which implements the Queue interface.

Queue interface can be instantiated as:

Queue<String> q1 = new PriorityQueue();  
Queue<String> q2 = new ArrayDeque();

A queue is another kind of linear data structure that is used to store elements just like any other data structure but in a particular manner.
 In simple words, we can say that the queue is a type of data structure in the Java programming language that stores elements of the same kind. 
The components in a queue are stored in a FIFO (First In, First Out) behavior. There are two ends in the queue collection, i.e., front & rear.
 Queue has two ends that is front and rear.
As explained in the preceding image, we can see that the queue is a linear data structure with two terminals, i.e.,
 start (front) and end (rear). Components are added inside the queue from the rear end of the queue and the components are extracted
 from the front end of the queue.

The Queue is an interface in the Java that belongs to Java.util package. It also extends the Collection interface.
===========================================================================================================================================================
Java Queue Array Implementation
Queue implementation is not as straightforward as a stack implementation.

To implement queue using Arrays, we first declare an array that holds n number of elements.

Then we define the following operations to be performed in this queue.

1) Enqueue: An operation to insert an element in the queue is Enqueue (function queue Enqueue in the program). For inserting an element at the rear 
end, we need first to check if the queue is full. If it is full, then we cannot insert the element. If rear < n, then we insert the element in the queue.

2) Dequeue: The operation to delete an element from the queue is Dequeue (function queue Dequeue in the program). First, we check whether the queue
 is empty. For dequeue operation to work, there has to be at least one element in the queue.

3) Front: This method returns the front of the queue.

4) Display: This method traverses the queue and displays the elements of the queue.
==========================================================================================================================================================
import java.util.LinkedList; 
import java.util.Queue;  
 public class QueueExample {  
 public static void main(String[] args)   { 
    Queue<Integer> q = new LinkedList<>();     
  // Adds elements {0, 1, 2, 3, 4} to queue    
 for (int i=0; i<5; i++)   
   q.add(i);     
  // Display contents of the queue.    
 System.out.println("Elements of queue-"+q);    
   // To remove the head of queue.   
  int removedele = q.remove();   
  System.out.println("removed element-" + removedele);       
  System.out.println(q);       
   // To view the head of queue     
     int head = q.peek();    
   System.out.println("head of queue-" + head);       
   // Rest all methods of collection interface,    
 // Like size and contains can be used with this     
// implementation.     
  int size = q.size();   
  System.out.println("Size of queue-" + size);   
}
 }

======================================================================================================================
///queue delete first element and display others and peek of elements ,size
import java.util.LinkedList;
import java.util.Queue;
class queue1{
  public static void main(String args[]){
    Queue<Integer>k=new LinkedList<>();
    for(int i=0;i<5;i++){
      k.add(i);
      
    }
    System.out.println(k);
    int k1=k.remove();
    System.out.println("deleted is  "+k1);
     System.out.println("after deleted is queue");
       for(Integer u:k)
      System.out.println(u);
    System.out.println(k);
     int k12=k.peek();
    System.out.println("peek element is  "+k12);
    int k13=k.size();
    System.out.println("size is  "+k13);
    
  }
}
=========================================================================================================================================

hashset
import java.util.*;
class hashset{
  public static void main(String args[]){
    HashSet<String> k=new HashSet<String>();
    k.add("ajay");
        k.add("ajay");

        k.add("aryan");

        k.add("vidya");
    k.add("rakesh");
    k.add("aryan");
    Iterator<String>itr=k.iterator();
    while(itr.hasNext()){
      System.out.println(itr.next());
    }

    
  }
}
=========================================================================================================================================
[10:32] Karunakar Eeede
import java.util.HashSet; 
public class Hashes {
   public static void main(String[] args) {
      // Creating a HashSet
      HashSet<String> hashSet = new HashSet<String>();
      // Adding elements to the HashSet
      hashSet.add("Java");
      hashSet.add("Python");
      hashSet.add("C++");
      hashSet.add("JavaScript");
      // Printing the HashSet
      System.out.println("HashSet: " + hashSet);
      // Removing an element from the HashSet
      hashSet.remove("C++");
      // Printing the HashSet after removing an element
      System.out.println("HashSet after removing an element: " + hashSet);
      // Checking if an element exists in the HashSet
      boolean isExists = hashSet.contains("Java");
      System.out.println("Is Java exists in the HashSet? " + isExists);
      // Clearing the HashSet
      hashSet.clear();
      // Printing the HashSet after clearing
      System.out.println("HashSet after clearing: " + hashSet);
   }
}

=========================================================================================================================================
import java.util.*;
class hashset1{
  public static void main(String args[]){
    HashSet <String>k=new HashSet <String>();
    k.add("art");
        k.add("java");
    k.add("phyton");
    k.add("sql");
    k.add("html");
    k.add("css");
    System.out.println(k);
      System.out.println("after removing css");
k.remove("css");
        System.out.println(k);
      System.out.println("checking it has html or not");
     Boolean h=k.contains("html");
    System.out.println(h);
          System.out.println("after clearing");
   k.clear();
      System.out.println(k);
  }
}


output:
[art, css, java, phyton, html, sql]
after removing css
[art, java, phyton, html, sql]
checking it has html or not
true
after clearing
[]
========================================================================================================================================================

linkedhashset


import java.util.*;
class linkedhash{
  public static void main(String args[]){
    LinkedHashSet<String>n=new  LinkedHashSet<String>();
    n.add("pavan");
     n.add("aryan");
     n.add("kalyan");
     n.add("kavitha");
     n.add("vidya");
     n.add("shetty");
    System.out.println("before clearing");
    System.out.println(n);
     System.out.println("after clearing kavitha");
  n.remove("kavitha");
     System.out.println(n);
    System.out.println("checking shetty");
  boolean k= n.contains("shetty");
    System.out.println(k);
    System.out.println("after clearing");
    n.clear();
     System.out.println(n);
    
    
  }
}
before clearing
[pavan, aryan, kalyan, kavitha, vidya, shetty]
after clearing kavitha
[pavan, aryan, kalyan, vidya, shetty]
checking shetty
true
after clearing
[]
==========================================================================================================
/*treeset*/
import java.util.*;
class treeset{
  public static void main(String args[]){
    TreeSet<String>k=new  TreeSet<String>();
        k.add("anushka");
    k.add("prabhas");
 k.add("rana");
        k.add("ramya");
    k.add("rajmouli");
    System.out.println("before clearing");
    System.out.println(k);
 System.out.println("removing ramya");
   k.remove("ramya");
   System.out.println(k); 
    if(k.contains("prabhas")){
      System.out.println("prabhas is found");
    }
    else{
      System.out.println("prabhas is found"); 
    }
    System.out.println("print first and last");
  
      System.out.println(  k.first());
    
      System.out.println(  k.last());
    
      System.out.println(k);
  }
}

output:
before clearing
[anushka, prabhas, rajmouli, ramya, rana]
removing ramya
[anushka, prabhas, rajmouli, rana]
prabhas is found
print first and last
anushka
rana
[anushka, prabhas, rajmouli, rana]
==================================================================================================================================
//hashmap
import java.util.HashMap;
import java.util.Map;
 public class HashMapExample {
    public static void main(String[] args) {
        // Creating a HashMap
        HashMap<String, Integer> map = new HashMap<>();
        // Adding key-value pairs to the map
        map.put("John", 25);
        map.put("Alice", 30);
        map.put("Bob", 40);
        // Retrieving values from the map
        int johnAge = map.get("John");
        int aliceAge = map.get("Alice");
        int bobAge = map.get("Bob");
        System.out.println("John's age is " + johnAge);
        System.out.println("Alice's age is " + aliceAge);
        System.out.println("Bob's age is " + bobAge);
        // Updating a value in the map
        map.put("Alice", 35);
        aliceAge = map.get("Alice");
        System.out.println("Alice's new age is " + aliceAge);
        // Removing a key-value pair from the map
        map.remove("Bob");
        System.out.println("Bob's age has been removed from the map");
        // Iterating over the key-value pairs in the map
        System.out.println("Iterating over the key-value pairs in the map:");
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            String name = entry.getKey();
            int age = entry.getValue();
            System.out.println(name + "'s age is " + age);
        }
        // Checking if a key is present in the map
        boolean johnPresent = map.containsKey("John");
        System.out.println("Is John present in the map? " + johnPresent);
        // Checking if a value is present in the map
        boolean agePresent = map.containsValue(35);
        System.out.println("Is age 35 present in the map? " + agePresent);
        // Clearing the map
        map.clear();
        System.out.println("The map has been cleared");
    }
}
===========================================================================================================================================================
//linkedhashmap 

import java.util.LinkedHashMap;
import java.util.Map;
 public class LinkedHashMapExample {
    public static void main(String[] args) {
        // Creating a LinkedHashMap with String keys and Integer values
        LinkedHashMap<String, Integer> linkedHashMap = new LinkedHashMap<>();   
      // Adding elements to the LinkedHashMap
        linkedHashMap.put("One", 1);
        linkedHashMap.put("Three", 3);
        linkedHashMap.put("Two", 2);
        linkedHashMap.put("Four", 4);        
 // Iterating through the LinkedHashMap and printing the elements
        System.out.println("Elements in the LinkedHashMap:");
        for (Map.Entry<String, Integer> entry : linkedHashMap.entrySet()) {
            System.out.println("Key: " + entry.getKey() + " Value: " + entry.getValue());
        }        
 // Checking if the LinkedHashMap contains a specific key
        System.out.println("\nLinkedHashMap contains key 'Three': " + linkedHashMap.containsKey("Three"));     
    // Checking if the LinkedHashMap contains a specific value
        System.out.println("LinkedHashMap contains value 5: " + linkedHashMap.containsValue(5));        
 // Getting the value of a specific key from the LinkedHashMap
        System.out.println("Value of key 'Two': " + linkedHashMap.get("Two"));   
      // Removing an element from the LinkedHashMap
        System.out.println("\nRemoving key 'Three' from the LinkedHashMap...");
        linkedHashMap.remove("Three");  
       // Iterating through the LinkedHashMap after removing an element
        System.out.println("\nElements in the LinkedHashMap after removing 'Three':");
        for (Map.Entry<String, Integer> entry : linkedHashMap.entrySet()) {
            System.out.println("Key: " + entry.getKey() + " Value: " + entry.getValue());
        }       
  // Getting the size of the LinkedHashMap
        System.out.println("\nSize of the LinkedHashMap: " + linkedHashMap.size());       
  // Clearing all the elements from the LinkedHashMap
        System.out.println("\nClearing all the elements from the LinkedHashMap...");
        linkedHashMap.clear();    
 // Checking if the LinkedHashMap is empty
        System.out.println("\nLinkedHashMap is empty: " + linkedHashMap.isEmpty());
    }
}


import java.util.LinkedHashMap;
import java.util.*;
class linkedhashmap{
  public static void main(String args[]){
    LinkedHashMap<String ,Integer>link=new LinkedHashMap<String ,Integer>();
    link.put("arjun",896);
     link.put("aryan",899);
     link.put("ayan",895);
     link.put("arpitha",89);
    System.out.println(link);
    for(Map.Entry<String,Integer>entry: link.entrySet()){
     System.out.println("Key: " + entry.getKey() + " Value: " + entry.getValue());
    }
    System.out.println( link.containsKey("ayan"));
     System.out.println( link.containsValue(89));
    System.out.println( link.remove(89));
  link.clear();
   
  System.out.println(link);  
    
    
    
  }
}
===================================================================================================================================================

//tree map

import java.util.*;
 public class TreeMapExample {  
  public static void main(String[] args) {     
  // Create a TreeMap
      TreeMap<String, Integer> map = new TreeMap<>();       
// Add elements to the TreeMap
      map.put("John", 23);
      map.put("David", 32);
      map.put("Alice", 18);
      map.put("Bob", 27);      
 // Display the TreeMap
      System.out.println("TreeMap: " + map);    
   // Get the value associated with a key
      int age = map.get("John");
      System.out.println("John's age is " + age);      
 // Remove an element from the TreeMap
      map.remove("Alice");
      System.out.println("TreeMap after removing Alice: " + map);    
   // Iterate through the TreeMap
      for(Map.Entry<String, Integer> entry : map.entrySet()) {
         String key = entry.getKey();
         int value = entry.getValue();
         System.out.println(key + " => " + value);
      }
   }
}
=============================================================================================================================================================================================

//treemap



import java.util.*;
class treemap{
  public static void main(String args[]){
    TreeMap<String,Integer>map=new TreeMap<String,Integer>();
    map.put("aryan",56);
    map.put("arjun",52);
    map.put("kavya",53);
    System.out.println(map);
     System.out.println("arjyn" +map.get("arjun"));
    map.remove("kavya");
    System.out.println("kavya" + map.remove("kavya"));
    System.out.println(map);
    for(Map.Entry<String,Integer>entry:map.entrySet()){
    String key=entry.getKey();
      Integer value=entry.getValue();
      System.out.println(key + "=>" +value);
      
    }
    
  }
}

============================================================================================================================================================================

[12:25] Karunakar Eeede
1.Write a program to create an ArrayList of String type and add five elements to it. Then, use a for-each loop to print all the elements in the ArrayList. 
2.Write a program to create a HashSet of Integer type and add ten elements to it. Then, use an iterator to print all the elements in the HashSet.
3.Write a program to create a TreeMap of String, Integer type and add five key-value pairs to it. Then, use a for-each loop to print all the keys and values in the TreeMap.
4.Write a program to create a LinkedList of Employee type and add five Employee objects to it. Then, use a while loop to print all the Employee objects in the LinkedList. 
5.Write a program to create a PriorityQueue of Double type and add ten elements to it. Then, use a for-each loop to print all the elements in the PriorityQueue. 
6.Write a program to create a HashMap of String, Integer type and add ten key-value pairs to it. Then, use a for-each loop to print all the keys and values in the HashMap. 
7.Write a program to create a Stack of Integer type and push five elements to it. Then, use a while loop to pop all the elements from the Stack.
8.Write a program to create a TreeSet of String type and add five elements to it. Then, use a for-each loop to print all the elements in the TreeSet. 
9.Write a program to create a Hashtable of Integer, String type and add five key-value pairs to it. Then, use a for-each loop to print all the keys and values in the Hashtable.

/*1 .Write a program to create a Hashtable of Integer, String type and add five key-value pairs to it. Then, use a for-each loop to print all the keys and values in the Hashtable.*/

import java.util.*;

public class WorkHashtable {
    public static void main(String[] args) {
       
  Hashtable<Integer, String> hashtable=new Hashtable<Integer, String>();

       
        hashtable.put(1, "Alu");
        hashtable.put(2, "Eggplant");
        hashtable.put(3, "Carrot");
        hashtable.put(4, "Mushroom");
        hashtable.put(5, "Brocoli");

  
        for (Integer key:hashtable.keySet()) {
            System.out.println("Key:"+key +",Value:"+hashtable.get(key));
        }
    }
}
------------------------------------------------------------------------------
/*2.Write a program to create an ArrayList of String type and add five elements to it. Then, use a for-each loop to print all the elements in the ArrayList.*/

import java.util.*;

public class WorkArraylist {
    public static void main(String[] args) {
        
        ArrayList<String> arrayList=new ArrayList<String>();

        
        arrayList.add("element=1");
        arrayList.add("element=2");
        arrayList.add("element=3");
        arrayList.add("element=4");
        arrayList.add("element=5");
        
        
       System.out.println("---After for-Each Loop---");
        for (String element : arrayList) {
            System.out.println(element);
        }
    }
}
-----------------------------------------------------------------------------

/*3.Write a program to create a HashMap of String, Integer type and add ten key-value pairs to it. Then, use a for-each loop to print all the keys and values in the HashMap. */
import java.util.*;

public class WorkHashMap {
  public static void main(String[] args) {
    
    HashMap<String, Integer> hashMap = new HashMap<String, Integer>();

    
    hashMap.put("Venkat", 25);
    hashMap.put("Anji", 35);
    hashMap.put("Rajesh", 31);
    hashMap.put("Madhu", 32);
    hashMap.put("Suresh", 27);
    hashMap.put("Sai", 22);
    hashMap.put("Sirisha", 20);
    hashMap.put("Meghana", 21);
    hashMap.put("Sahasra", 29);
    hashMap.put("Jyothi", 23);

    
    for (Map.Entry<String, Integer> entry : hashMap.entrySet()) {
      String key=entry.getKey();
      Integer value=entry.getValue();
      System.out.println("Key:"+ key +",Value:"+value);
    }
  }
}
--------------------------------------------------------------------------------
/*4.Write a program to create a HashSet of Integer type and add ten elements to it. Then, use an iterator to print all the elements in the HashSet.*/

import java.util.*;

public class WorkHashSet {
    public static void main(String[] args) {
       
        HashSet<Integer> hashSet=new HashSet<Integer>();

        hashSet.add(1);
        hashSet.add(2);
        hashSet.add(3);
        hashSet.add(4);
        hashSet.add(5);
        hashSet.add(6);
        hashSet.add(7);
        hashSet.add(8);
        hashSet.add(9);
        hashSet.add(10);


        Iterator<Integer> iterator=hashSet.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}

-----------------------------------------------------------------------------
/*5.Write a program to create a PriorityQueue of Double type and add ten elements to it. Then, use a for-each loop to print all the elements in the PriorityQueue. */

import java.util.*;

public class WorkPriorityQueue {
    public static void main(String[] args) {
       
        PriorityQueue<Double> priorityQueue=new PriorityQueue<Double>();

       
        priorityQueue.add(10.0);
        priorityQueue.add(5.5);
        priorityQueue.add(7.2);
        priorityQueue.add(15.1);
        priorityQueue.add(3.3);
        priorityQueue.add(2.2);
        priorityQueue.add(9.8);
        priorityQueue.add(1.1);
        priorityQueue.add(8.5);
        priorityQueue.add(6.6);

        
        for (Double element : priorityQueue) {
            System.out.println(element);
        }
    }
}
-------------------------------------------------------------------------------
/*6.Write a program to create a Stack of Integer type and push five elements to it. Then, use a while loop to pop all the elements from the Stack.*/

import java.util.*;

public class WorkStack {
    public static void main(String[] args) {
        
        Stack<Integer> stack=new Stack<Integer>();

        stack.push(50);
        stack.push(20);
        stack.push(30);
        stack.push(70);
        stack.push(100);

        
        while (!stack.empty()) {
            Integer element = stack.pop();
            System.out.println(element);
        }
    }
}
/*6.Write a program to create a Stack of Integer type and push five elements to it. Then, use a while loop to pop all the elements from the Stack.*/

import java.util.*;

public class stack56 {
    public static void main(String[] args) {
        
        Stack<Integer> stack=new Stack<Integer>();

        stack.push(56);
        stack.push(67);
        stack.push(77);
        stack.push(78);
        stack.push(89);

        
       Iterator i=stack.iterator();
    while(i.hasNext()){
       System.out.println(i.next());
  }
        }
    }
}
-------------------------------------------------------------------------------
7./*.Write a program to create a TreeMap of String, Integer type and add five key-value pairs to it. Then, use a for-each loop to print all the keys and values in the TreeMap.*/

import java.util.*;

public class WorkTreeMap {
    public static void main(String[] args) {
       
        TreeMap<String, Integer> treeMap=new TreeMap<String, Integer>();

        treeMap.put("Nagendra", 24);
        treeMap.put("Koti", 26);
        treeMap.put("Rajesh", 30);
        treeMap.put("Swamy", 22);
        treeMap.put("Suresh", 32);

        
        for (String key:treeMap.keySet()) {
            System.out.println("Key: " + key + ", Value: " + treeMap.get(key));
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------
8./* Write a program to create a TreeSet of String type and add five elements to it. Then, use a for-each loop to print all the elements in the TreeSet.  */

import java.util.*;

public class WorkTreeset {
    public static void main(String[] args) {
        
        TreeSet<String> treeSet = new TreeSet<String>();

        
        treeSet.add("Apple");
        treeSet.add("Grapes");
        treeSet.add("Orange");
        treeSet.add("Bear");
        treeSet.add("kiwi");

        for (String element : treeSet) {
            System.out.println(element);
        }
    }
}
===========================================================================================================================================================
// 4.Write a program to create a LinkedList of Employee type and add five Employee objects to it. Then, use a while loop to print all the Employee objects in the LinkedList. 
import java.util.*;
class linkedlist56{
  public static void main(String args[]){
  LinkedList<String>employee=new LinkedList<String>();
    employee.add("name-pavan");
    employee.add("dept-chemical");
    employee.add("id-123");
     employee.add("salary-1200");
     employee.add("height-5.5ft");
    System.out.println(employee);
    System.out.println("iterator");
    Iterator i=employee.iterator();
    while(i.hasNext()){
       System.out.println(i.next());
  }
  }
}

============================================================================================================================================================
1. Write a program to find the second highest element in an ArrayList of integers.
 2. Write a program to remove all the duplicates from an ArrayList of Strings. 
3. Write a program to find the sum of all the elements in a LinkedList of integers.
 4.Write a program to sort an ArrayList of strings in descending order.
 5. Write a program to find the intersection of two HashSet of integers. 
6. Write a program to remove all the elements from a Queue that are less than a given value.
 7. Write a program to find the maximum and minimum values in a TreeMap of integers. 
8. Write a program to reverse the order of elements in a Stack.
 9. Write a program to shuffle the elements of an ArrayList of integers. 
10. Write a program to find the most occurring element in an ArrayList of strings.

==========================================================================================================================================================
1. Write a program to find the second highest element in an ArrayList of integers.
[14:22] Karunakar Eeede
import java.util.*;
public class Main
{
    public static void main(String[] args) 
    {
        ArrayList list=new ArrayList();
        list.add(56);
        list.add(50);
        list.add(76);
        list.add(12);
        list.add(75);
        System.out.println(list);
        Collections.sort(list, Collections.reverseOrder());
      System.out.println("The List After Sort:");       
        System.out.println(list);
      System.out.println("The Second Largest in Array is:"+list.get(1));    
    }
}
===========================================================================================================================================================
//2. Write a program to remove all the duplicates from an ArrayList of Strings
import java.util.*;
class hashset00{
  public static void main(String args[]){
ArrayList<String>k=new  ArrayList<String>();
    k.add("a");
    k.add("a");
    k.add("ab");
    k.add("ab");
    k.add("abc");
    k.add("abc");
     k.add("abcD");
     k.add("abcT");
    System.out.println(k);
    System.out.println("first type to remove duplicate");
    HashSet<String>k2=new  HashSet<String>();
  k2.addAll(k);  
   System.out.println(k2);  
  System.out.println("second type to remove duplicate");
     HashSet<String>k22=new  HashSet<String>(k);
   ArrayList<String>k1=new  ArrayList<String>(k22);
  System.out.println(k1);
  }
}
==================================================================================================================================================
3. Write a program to find the sum of all the elements in a LinkedList of integers.
import java.util.*;
class linkedsum{
  public static void main(String args[]){
    LinkedList<Integer>alist=new LinkedList<Integer>();
    alist.add(1);
    alist.add(2);
    alist.add(3);
    System.out.println(alist);
    int sum=0;
    for(int i=0;i<alist.size();i++){
      sum=sum+alist.get(i);
    }
    System.out.println(sum); 
  }
  
}

Write a Java program to find the second most frequent character in a given string using loops.
//String st1="Hai Hello Welcome to the bitLabs"; reverse bitlabs and hello
write the maximun words in the string

Write a Java program to remove all the special characters from a given string using loops.


Input: str = "aabababa";
Output: Second most frequent character is 'b' 

Write a function that transforms string into a new string. New string does not contain repeating letters
* but contains a number after every letter that means how many times the letter was repeated in the original string.
* a.    “” -> “”
* b.    “a” -> “a1”
* c.    “aaa” -> “a3”
* d.    “aaabbc” -> “a3b2c1”

Write a Java program to find the longest word in a given string using loops.

//Write a Java program to convert the first letter of each word in a given string to uppercase using loops.
import java.util.*;
class c203{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    String s1[]=s.split(" ");
    for(int i=0;i<s1.length;i++){
      String w[]=s1.
      if(i=0){
        System.out.println(s1.toUpperCase());
      }
    }
  }
}
===================================================================================================
 // Linear Search
import java.util.*; 
class Linear1 {
  int i;
  Scanner sc = new Scanner(System.in);
   void getArray(int a[], int n) {
    for (i = 0; i < n; i++) {
      a[i] = sc.nextInt();
    }
  } 
  void dispArray(int a[], int n) {
    for (i = 0; i < n; i++) {
      System.out.print("\t" + a[i]);
    }
  }
} 
class Linear {
  public static void main(String args[]) {
    int n, i, ser;
    Linear1 ln = new Linear1();
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter Array Size:");
    n = sc.nextInt();
    int a[] = new int[n];
    System.out.println("Enter Elements to Array:");
    ln.getArray(a, n);  
   System.out.println("The Elements in an Array is:");
    ln.dispArray(a,n);
    System.out.println("\nEnter Element for Search:");
    ser = sc.nextInt();    
  // Linear Search
    for (i = 0; i < n; i++) {
      if (a[i] == ser) {
  System.out.println("Element is Found at position " + (i + 1));
        break;
      }
    }
    if (i == n) {
      System.out.println("Element is Not Found");
    }
  }
}
===================================================================================================
linear search

import java.util.*;
class term{
   Scanner sc=new Scanner(System.in);
  void freq(int a[],int n){
   
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
  }
  void freq1(int a[],int n){
    for(int i=0;i<n;i++){
      System.out.println(a[i]);
       }
  }
  void freq2(int a[],int n,int s){
    int i;
     
    for (i = 0; i < n; i++) {
 if (a[i] == s) {
 System.out.println("Element is Found at position " + (i + 1));
  break;
 }
    }
 if (i == n) {
 System.out.println("Element is Not Found");
 }
  }
  boolean freq3(int a[],int n,int s){
    int i;
     
    for (i = 0; i < n; i++) {
 if (a[i] == s) {
 System.out.println("Element is Found at position " + (i + 1));
  break;
 }
      return true;
    }
 if (i == n) {
 System.out.println("Element is Not Found");
 }
    return false;
    
  }
}

class linearsearch1{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
     System.out.println("searching");
    int s=sc.nextInt();
     System.out.println("size");
    int n=sc.nextInt();
     System.out.println("enter array");
    int a[]=new int[n];
   term t=new term();
    t.freq(a,n);
    t.freq1(a,n);
    t.freq2(a,n,s);
    boolean k= t.freq3(a,n,s);
    System.out.println(k);
    
  }
}
===================================================================================================================================
linear search by array list

import java.util.*;
class arraylistlin{
  public static void main(String args[]){
    
    	Scanner sc=new Scanner(System.in);
 	System.out.println("enter your size :");
 int n=sc.nextInt();
 
    ArrayList<Integer>alist=new ArrayList<Integer>();
   
      for(int i=0;i<n;i++){
            alist.add(sc.nextInt());
        }
     for(int i=0;i<alist.size();i++){
            System.out.print("\t"+alist.get(i));
        }
    System.out.println("\nenter your searching element");
	int ser=sc.nextInt(); 
	
    int c=0;
       for(int i:alist){
  
  
           if(i==ser){
               System.out.println("the element found");
               c=1;
               break;
           }
       }
       if(c==0){
           System.out.println("the element not found");
       }
	
  }
}
=====================================================================================================================
//linear search by methods arraylist

import java.util.*;
class hyper{
  Scanner sc=new Scanner(System.in);
  void kite( ArrayList<Integer>al,int n){
    for(int i=0;i<=n;i++){
      al.add(sc.nextInt());
    }
  }
  void kite1( ArrayList<Integer>al,int n){
    for(int i=0;i<=n;i++){
      System.out.println(al.get(i));
}
  }
    void search(ArrayList<Integer> al,int n,int s){
    int c=0;
     for(int i:al){
       if(i==s){
         System.out.println("element is found");
         c=1;
         break;
       }
       if(c==0){
        System.out.println("element is not found"); 
       }
     } 
    }
}
class arraylist98{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter  size");
   int n=sc.nextInt();
    System.out.println("enter search");
    int s=sc.nextInt();
    ArrayList<Integer>al=new  ArrayList<Integer>();
    hyper h=new hyper();
    h.kite(al,n);
    h.kite1(al,n);
    h.search(al,n,s);
  }
  
}

========================================================================================================================
//binary search
import java.util.*;
class BinarySearch
  {
  public static void main(String args[])
   {
     Scanner sc=new Scanner(System.in);
     int n,key,i;
     System.out.println("Enter Array Size:");
     n=sc.nextInt();
     int arr[]=new int[n];   
   System.out.println("Enter Elements to Array:");
     for(i=0;i<n;i++)
       {
         arr[i]=sc.nextInt();
       }
     System.out.println("The Elements in an Array is:"); 
     for(i=0;i<n;i++)
       {
         System.out.print("\t"+arr[i]);
       }
     System.out.println("Enter Element to Search:");
     key=sc.nextInt();
      int beg=0;                 
      int end = arr.length-1; 
      int mid = (beg+end)/2; 
      while(beg<=end)
     {
          if(arr[mid]<key)  
          {
             beg = mid + 1;
          }
          else if(arr[mid] == key)
          { 
                 System.out.println("Element is Found!position of the element is"+mid);
              break;
          }
          else
          {
               end= mid-1;
          }
           mid = (beg+end)/2;
       }     
     if(beg>=end)
          System.out.println("Element is not Found");
   }
  }
=================================================================================================================
//binary search by using methods
import java.util.*;
class binar{
  Scanner sc=new Scanner(System.in);
  void kite(int a[],int n){
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
  }
   void kite1(int a[],int n){
    for(int i=0;i<n;i++){
    System.out.println(a[i]);
    }
  }
  void kite2(int b,int l,int m,int s,int a[],int n){
  
  while(b<=l){
    if(a[m]<s){
      b=m+1;
    }
    else if(a[m]==s){
    System.out.println("element is found at position " +m); 
      break;
    }
    else{
      l=m-1;
      }
    m=(b+l)/2;
  }
    if(b>=l){
      System.out.println("element is not found");
    }
  } 
}

class binarysearch1{
  public static void main(String args[]){
    int b,l,m;
    Scanner sc=new Scanner(System.in);
   
     System.out.println("enter size");
    int n=sc.nextInt();
   System.out.println("enter array");
    int a[]=new int[n];
       System.out.println("enter SEARCH");
    int s=sc.nextInt();
     
    binar b1=new binar();
    b1.kite(a,n);
    b1.kite1(a,n);
    b=0;
    l=a.length-1;
    m=(b+l)/2;
    b1.kite2(b,l,m,s,a,n);
  }
}


==================================================================================================================
import java.util.*;
 class Bubble {
  public static void main(String args[]) {
    int i, n, t, j;
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter Array Size:");
    n = sc.nextInt();
    int a[] = new int[n];
    System.out.println("Enter Elements to Array:");
    for (i = 0; i < n; i++) {
      a[i] = sc.nextInt();
    }
    System.out.println("The Elements Before Sorting is:");
    for (i = 0; i < n; i++) {
      System.out.print("\t" + a[i]);
    }
    // bubble sort
    for (i = 0; i < n - 1; i++) {
      for (j = 0; j < n - 1 - i; j++) {
        if (a[j] > a[j + 1]) {
          t = a[j];
          a[j] = a[j + 1];
          a[j + 1] = t;
        }
      }
    }
  System.out.println("\nThe Elements After Sorting is:");
    for (i = 0; i < n; i++) {
      System.out.print("\t" + a[i]);
    }   }
}
================================================================================================================
//print array list by using binary search
import java.util.*;
class arraylistbin{
  public static void main(String args[]){
 
    Scanner sc=new Scanner(System.in);
      int b,l,m,c=0; 
	
 	System.out.println("enter your size :");
           int n=sc.nextInt();
 
    ArrayList<Integer>alist=new ArrayList<Integer>();
   
      for(int i=0;i<n;i++){
            alist.add(sc.nextInt());
      }
    System.out.println(alist);
 System.out.println("\nenter your searching element");
	int ser=sc.nextInt();
      b=0;
    l=alist.size()-1;
    m=(b+l)/2;
  
    while(b<=l){
    if(alist.get(m)<ser){
      b=m+1;
    }
    else if(alist.get(m)==ser){
    System.out.println("element is found at position " +m);
     c=1;
      break;
    }
      
    else{
      l=m-1;
      }
    m=(b+l)/2;
    }
    if(c==0)
      System.out.println("element is not found");
    
    }
   
}
==================================================================================================================
/**************************
write a program to find the element by using binary search by using methods in ArrayList


***************************/
import java.util.*;
class Linear{
    int i,t;
    Scanner sc=new Scanner(System.in);
    void readArrayList(ArrayList<Integer> al,int n){
        for(int i=0;i<n;i++){
            al.add(sc.nextInt());
        }
    }
    void displayArray(ArrayList<Integer> al,int n){
        for(int i=0;i<n;i++){
            System.out.print("\t"+al.get(i));
        }
    }
    void BinarySearch(int beg,int end,int mid,ArrayList<Integer> al,int n,int ser){
    int c=0;
       
           while(beg<=end){//mid=2 0<=4
               if(al.get(mid)<ser){//30<40
                 beg=mid+1;//3
               }
           else if(al.get(mid)==ser){
               System.out.println("the element found" +mid); 
               c=1;
               break;
           }
           else{
               end=mid-1;
           }
           mid=(beg+end)/2;
       }
       
       if(c==0){
           System.out.println("the element not found");
       }
       
}
}
public class arraylistbinm
{
	public static void main(String[] args) {
	int n,i;
	Scanner sc=new Scanner(System.in);
	System.out.println("enter your size :");
	 n=sc.nextInt();
	ArrayList<Integer> al=new ArrayList<Integer>();
	Linear l1=new Linear();
	System.out.println("enter elements in array ");
	l1.readArrayList(al,n);
	System.out.println("display array elements in array before sorting");
	l1.displayArray(al,n);
	System.out.println("\nenter your searching element");
	int ser=sc.nextInt();
	int beg=0;
	int end=al.size()-1;
	int mid=(beg+end)/2;
	l1.BinarySearch(beg,end,mid,al,n,ser);
   
	
	}
}
====================================================================================================================
//bubble sort by using arrays

import java.util.*;
 class Bubble {
  public static void main(String args[]) {
    int i, n, t, j;
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter Array Size:");
    n = sc.nextInt();
    int a[] = new int[n];
    System.out.println("Enter Elements to Array:");
    for (i = 0; i < n; i++) {
      a[i] = sc.nextInt();
    }
    System.out.println("The Elements Before Sorting is:");
    for (i = 0; i < n; i++) {
      System.out.print("\t" + a[i]);
    }
    // bubble sort
    for (i = 0; i < n - 1; i++) {
      for (j = 0; j < n - 1 - i; j++) {
        if (a[j] > a[j + 1]) {
          t = a[j];
          a[j] = a[j + 1];
          a[j + 1] = t;
        }
      }
    }
  System.out.println("\nThe Elements After Sorting is:");
    for (i = 0; i < n; i++) {
      System.out.print("\t" + a[i]);
    }   }
}
================================================================================================================
======================================================================================================================
//bubble sort by using methods aRRay 
import java.util.*;
class test{
   Scanner sc=new Scanner(System.in);
  void kite(int a[],int n){
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
  }
   void kite1(int a[],int n){
      System.out.println("before sorting");
    for(int i=0;i<n;i++){
    System.out.println(a[i]);
    }
  }
  void kite2(int a[],int n,int t){
    for(int i=0;i<n-1;i++){
       for(int j=0;j<n-1-i;j++){
         if(a[j]>a[j+1]){
           t=a[j];
           a[j]=a[j+1];
           a[j+1]=t;
         }
       }
     }
  }
  void kite3(int a[],int n){
      System.out.println("after sorting");
    for(int i=0;i<n;i++){
    
    System.out.println(a[i]);
    }
  }
      
}
class bubblesort{
  public static void main(String args[]){
      
    Scanner sc=new Scanner(System.in);
   int t=0;
     System.out.println("enter size");
    int n=sc.nextInt();
   System.out.println("enter array");
    int a[]=new int[n];
    test t1 =new test();
    t1.kite(a,n);
     t1.kite1(a,n);
     t1.kite2(a,n,t);
     t1.kite3(a,n);
  }
}
enter size
5
enter array
1
2
3
4
5
before sorting
1
2
3
4
5
after sorting
1
2
3
4
5

======================================================================================================
//bubble sort by using  arraylist
import java.util.*;
class arraylistbub{
  public static void main(String args[]){
   int t=0;
    Scanner sc=new Scanner(System.in);
	System.out.println("enter your size :");
	int n=sc.nextInt();
    ArrayList<Integer>alist=new ArrayList<Integer>();
   for(int i=0;i<n;i++){
     alist.add(sc.nextInt());
   }
    System.out.println(alist);
    for(int i=0;i<alist.size()-1;i++){
           for(int j=0;j<alist.size()-1-i;j++){
               if(alist.get(j)>alist.get(j+1)){
                   t=alist.get(j);
                   alist.set(j,alist.get(j+1));
                   alist.set(j+1,t);
               }
           }
       }
     for(int i=0;i<alist.size();i++){
        System.out.println(alist.get(i));
     }
}
}
=======================================================================================================
/*
write a program to sort the elements by using bubble sort by using methods in ArrayList

*/
import java.util.*;
class Linear{
    int i,t;
    Scanner sc=new Scanner(System.in);
    void readArrayList(ArrayList<Integer> al,int n){
        for(int i=0;i<n;i++){
            al.add(sc.nextInt());
        }
    }
    void displayArray(ArrayList<Integer> al,int n){
        for(int i=0;i<n;i++){
            System.out.print("\t"+al.get(i));
        }
    }
    void Selection(ArrayList<Integer> al,int n){// 88 11 02 66 99
        
       for(int i=0;i<al.size()-1;i++){//0<4
           for(int j=0;j<al.size()-1-i;j++){//0<4
               if(al.get(j)>al.get(j+1)){//88>11
                   t=al.get(j);//88
                   al.set(j,al.get(j+1));
                   al.set(j+1,t);
               }
           }
       }
}
}
public class arraylistbubm
{
	public static void main(String[] args) {
	int n,i;
	Scanner sc=new Scanner(System.in);
	System.out.println("enter your size :");
	 n=sc.nextInt();
	ArrayList<Integer> al=new ArrayList<Integer>();
	Linear l1=new Linear();
	System.out.println("enter elements in array ");
	l1.readArrayList(al,n);
	System.out.println("display array elements in array before sorting");
	l1.displayArray(al,n);
	l1.Selection(al,n);
   System.out.println("\ndisplay array elements in array after sorting");
		l1.displayArray(al,n);
	
	}
}
===========================================================================================================
//selection sort by arrays
import java.util.*;
class Selection 
{
  public static void main(String args[]) 
  {
    int i, n, t, j;
    Scanner sc=new Scanner(System.in);
    System.out.println("Enter Array Size:");
    n=sc.nextInt();
    int a[]=new int[n];
    System.out.println("Enter Elements to Array:");
    for(i=0;i<n;i++)
      {
        a[i]=sc.nextInt();
      }
   System.out.println("The Elements Before Sorting is:");
    for(i=0;i<n;i++)
      {
        System.out.print("\t"+a[i]);
      }
    // Selections Sort
     for(i=0;i<n-1;i++)
       {
         for(j=i+1;j<n;j++)
           {
             if(a[i]>a[j])
             {
               t=a[i];
               a[i]=a[j];
               a[j]=t;
             }
           }
       }
System.out.println("The Elements After Sorting is:");
    for(i=0;i<n;i++)
      {
        System.out.print("\t"+a[i]);
      }
  }
}
==========================================================================================================================================================
//selection sort by arrays and methods
import java.util.*;
class test{
   Scanner sc=new Scanner(System.in);
  void white(int a[],int n){
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
  }
   void white1(int a[],int n){
      System.out.println("before sorting");
    for(int i=0;i<n;i++){
    System.out.println(a[i]);
    }
  }
  void white2(int a[],int n,int t){
    for(int i=0;i<n-1;i++){
       for(int j=i+1;j<n;j++){
         if(a[i]>a[j]){
           t=a[i];
           a[i]=a[j];
           a[j]=t;
         }
       }
     }
  }
  void white3(int a[],int n){
      System.out.println("after sorting");
    for(int i=0;i<n;i++){
    
    System.out.println(a[i]);
    }
  }
      
}
class selection{
  public static void main(String args[]){
      
    Scanner sc=new Scanner(System.in);
   int t=0;
     System.out.println("enter size");
    int n=sc.nextInt();
   System.out.println("enter array");
    int a[]=new int[n];
    test t1 =new test();
    t1.white(a,n);
     t1.white1(a,n);
     t1.white2(a,n,t);
     t1.white3(a,n);
  }
}
    



enter size
6
enter array
67
36
63
92
54
95
before sorting
67
36
63
92
54
95
after sorting
36
54
63
67
92
95
============================================================================================================================================
//sort the arraylist elements by using selection sort
import java.util.*;
class arraylistsel{
  public static void main(String args[]){
    int t=0;
     Scanner sc=new Scanner(System.in);
   System.out.println("enter your size :");
 int n=sc.nextInt();
 
    ArrayList<Integer>alist=new ArrayList<Integer>();
   
      for(int i=0;i<n;i++){
            alist.add(sc.nextInt());
        }
     for(int i=0;i<alist.size();i++){
            System.out.println("\t"+alist.get(i));
        }
  
     for(int i=0;i<alist.size()-1;i++){
      for(int j=i+1;j<alist.size();j++){
         if(alist.get(i)>alist.get(j)){
           t=alist.get(i);
           alist.set(i,alist.get(j));
           alist.set(j,t);
         }
       }
     }
        for(int k=0;k<alist.size();k++){
        System.out.println(alist.get(k));
     }

}
}

============================================================================================================================================
/**************************
write a program to sort the elements by using selection sort by using methods in ArrayList

***************************/
import java.util.*;
class Linear{
    int i,t;
    Scanner sc=new Scanner(System.in);
    void readArrayList(ArrayList<Integer> al,int n){
        for(int i=0;i<n;i++){
            al.add(sc.nextInt());
        }
    }
    void displayArray(ArrayList<Integer> al,int n){
        for(int i=0;i<n;i++){
            System.out.print("\t"+al.get(i));
        }
    }
    void Selection(ArrayList<Integer> al,int n){
        int a,b;
       for(int i=0;i<al.size()-1;i++){
           for(int j=i+1;j<al.size();j++){
               if(al.get(i)>al.get(j)){
                   t=al.get(j);
                   al.set(j,al.get(i));
                   al.set(i,t);
               }
           }
       }
}
}
public class arraylistselm
{
	public static void main(String[] args) {
	int n,i;
	Scanner sc=new Scanner(System.in);
	System.out.println("enter your size :");
	 n=sc.nextInt();
	ArrayList<Integer> al=new ArrayList<Integer>();
	Linear l1=new Linear();
	System.out.println("enter elements in array ");
	l1.readArrayList(al,n);
	System.out.println("display array elements in array before sorting");
	l1.displayArray(al,n);
	l1.Selection(al,n);
   System.out.println("\ndisplay array elements in array after sorting");
		l1.displayArray(al,n);
	
	}
}
=============================================================================================================================================
insertion sort by arrays

import java.util.*;
class Insertion
  {
    public static void main(String args[])
    {
       int i,j,t,n;
      Scanner sc=new Scanner(System.in);
       System.out.println("Enter Array Size:");
       n=sc.nextInt();
      int a[]=new int[n];  
     System.out.println("Enter Array Size:");
      for(i=0;i<a.length;i++)
        {
          a[i]=sc.nextInt(); 
        }
      System.out.println("The Elements Before Sorting is:");
      for(i=0;i<a.length;i++)
        {
          System.out.println("\t"+a[i]);
        }
         //Insertion Sort  
           for(i=1;i<=n-1;i++)
                 {          
              for(j=i;j>0 && a[j-1]>a[j];j--)
               {
                         t=a[j];
                         a[j]=a[j-1];
                         a[j-1]=t;
                  }
            }
     System.out.println("The Elements After Sorting is:");
        
        for(i=0;i<a.length;i++)
        {
          System.out.println("\t"+a[i]);
        }
    }
  }


====================================================================================================================================
insertion sort by arrays and methods

import java.util.*;
class test{
  Scanner sc=new Scanner(System.in);
  void kite(int a[],int n){
    
    for (int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
  }
   void kite1(int a[],int n){
    System.out.println("the array elements before sorting");
    for (int i=0;i<n;i++){
     System.out.println(a[i]); 
    }
  }
  void kite2(int a[],int n){
    int t=0;
    for(int i=1;i<=n-1;i++){
      for(int j=i;j>0&&a[j-1]>a[j];j--){
        t=a[j];
        a[j]=a[j-1];
        a[j-1]=t;
      }
    }
  }
  void kite3(int a[],int n){
    System.out.println("the array elements after sorting");
    for (int i=0;i<n;i++){
     System.out.println(a[i]); 
    }
  } 
}
class insertion1{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
     System.out.println("the array size");
    int n=sc.nextInt();
     System.out.println("the array");
    int a[]=new int[n];
    test t=new test();
    t.kite(a,n);
     t.kite1(a,n);
     t.kite2(a,n);
     t.kite3(a,n);
  }
}
=================================================================================================================================================
/*Mini Project Arogya Hospital Information Management System  Hey learner!! Remember our client Arogya Hospital, they liked your project for whom you
 implemented all the use cases using java, and they are back with another project contract. You need to handle all the exceptions in the existing project.
  Read medical records from csv file and display on console. Before start implementing this project, design class diagram, use case diagram and sequence 
diagram. Understand the requirements below and use what you learned about Java concepts such as Collections, OOPs, Exception handling, IO Streams.  
   Please read the description carefully before you start implementing. Based on the success of this project, Arogya will award additional contracts
 to bitLabs.  The management system should have the following features: -  Add a patient’s details to the system whenever there is a new patient admitted.
 The patient details should include his/her name, age, gender, Aadhar Card number, contact number, city, address, date of admission, guardian's name, 
guardian’s address, guardian’s contact number. Assign a unique id to each patient admitted. Note: Validate user entered data. Such as Number of digits
 in age is 1 or 2 digits. Aadhar card number should contains 12 digits. Contact number should contain 10 digits only.  The system can show the list
 of patients at any point of time. Basically, the system should be dynamic and a real time system. In other words, it can provide results at any point 
of time without any delays. Display proper error message if patients list is empty.  Given the unique id assigned to a patient, provide all the details
 of that patient. In other words, the system should provide details about a patient using his/her unique id or name.  The system can provide the list of
 all the patients from a particular city or a state. Also provide the list of patients belonging to a particular age group. For example, you can be asked
 to give the list of patients in the age group 50-60. Handle NullPointerException if user entered values are empty.   Mark the patient recovered when he 
starts working fine.   The system should be able to delete the information of a patient when asked to.  Handle NullPointerException if user entered 
patient id is not present in list.   Implement these features using efficient data structures and OOP concepts learnt in the Java Foundation course. 
Write clean and organized codes using proper objects and methods. */


=====================================================================================================
reccursive

class Factmain1
  {
   int fact(int n)
    {
         if(n==1)
            return 1;
         else
            return n*fact(n-1);
    }
  }
class Factmain
  {
    public static void main(String args[])
    {
      Factmain1 f1=new Factmain1();
      int n=f1.fact(5);
      System.out.println("The Factorial value is:"+n);
    }
  }
======================================================================================================
import java.util.*;
class recur{
   int fact(int n){
     if(n==1)
       return 1;
     else
       return n*fact(n-1);
   }
}
class recursive2{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    recur r=new recur();
    int k=r.fact(n);
    System.out.println("the factorial of    " +n+   "     is     "   +k);
  }
}
====================================================================================================
import java.util.*;
class DateDemo
  {
    public static void main(String args[])
    {
       Date d=new Date();
       System.out.println("The Date is:"+d);
        System.out.println("The Date is:"+d.getDate());
        System.out.println("This Month is:"+(d.getMonth()+1));
        System.out.println("This Year is:"+(d.getYear()+1900));
        System.out.println("The Day is:"+d.getDay());
        System.out.println("The Hours is:"+d.getHours());
        System.out.println("The Minutes is:"+d.getMinutes());
        System.out.println("The Seconds is:"+d.getSeconds());
    }
  }
============================================================================================
[15:40] Karunakar Eeede
/*
Class Calendar:
public abstract class Calendar    
 The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set
 of calendar fields such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the
 date of the next week. Like other locale-sensitive classes, Calendar provides a class method, getInstance, for getting a generally useful
 object of this type. Calendar's getInstance method returns a Calendar object whose calendar fields have been initialized with the current
 date and time:      Calendar rightNow = Calendar.getInstance();

*/ import java.util.*;
 public class CalenderDemo
{
  public static void main(String args[])
   {
    Calendar cal=Calendar.getInstance();    
    cal.set(1999,9,2);
 //setting new date   
  System.out.println("Date is.."+cal.get(Calendar.DATE));        
 System.out.println("Month is.."+cal.get(Calendar.MONTH));    
 System.out.println("YEAR is.."+cal.get(Calendar.YEAR));    
 System.out.println("Day of Month is.."+cal.get(Calendar.DAY_OF_MONTH));     
    System.out.println("Day of week is..."+cal.get(Calendar.DAY_OF_WEEK));       
  System.out.println("Day of year is.."+cal.get(Calendar.DAY_OF_YEAR));  
    System.out.println("week of Month is.."+cal.get(Calendar.WEEK_OF_MONTH));      
 System.out.println("WEEK OF YEAR IS.."+cal.get(Calendar.WEEK_OF_YEAR));
   }
}
date is ....16
MONTH is ....8
YEAR is ....1999
DAY OF MONTH is ....16
DAY OF WEEK ....5
date OF YEAR ....259
WEEK OF MONTH ....3
WEEK OF YEAR ....38
=====================================================================
import java.util.Scanner;

public class MultiplyString {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int multiplier = scanner.nextInt();
      System.out.print("Enter a string");
         String input = sc.nextLine();
        for (int i = 0; i < input.length(); i++) {
            int digit = Character.getNumericValue(input.charAt(i));
            int result = 1;
            for (int j = 0; j < multiplier; j++) {
                result *= digit;
            }
            System.out.print(result + " ");
        }
    }
}
is used to extract a numeric value from a character in a string.

Here's how it works:

input is a string variable that contains some characters.
charAt(i) returns the character at the i-th position of the string. For example, if input is "123", input.charAt(0) returns '1', input.charAt(1) returns '2', and so on.
Character.getNumericValue is a method in the Character class that returns the numeric value of a character. For example, Character.getNumericValue('0') returns 0, Character.getNumericValue('1') returns 1, and so on.
The digit variable is an integer that is assigned the numeric value of the character at the i-th position of the string.
So, int digit = Character.getNumericValue(input.charAt(i)); extracts the numeric value of a character in a string at a given position, and assigns it to an integer variable called digit.






=====================================================================
import java.util.Scanner;

public class ram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string of integers: ");
        String input = scanner.nextLine();
        System.out.print("Enter a multiplier: ");
        int multiplier = scanner.nextInt();
        scanner.close();

        
        for (int i = 0; i < input.length(); i++) {
            int digit = input.charAt(i)-'0' ;
            int result = 1;
            for (int j = 0; j < multiplier; j++) {
                result *= digit;
             
            }
           System.out.println(result); 
         
        }
        
    }
}
In this version, we use input.charAt(i) - '0' to convert each character to its integer value. This works because the ASCII value of '0' is 48, and the ASCII values of the digits '1' to '9' are 49 to 57. So when we subtract the ASCII value of '0' from the ASCII value of the character, we get the corresponding integer value.

This program works the same way as the previous ones, but uses a simpler method to convert the characters to integers.
=====================================================================
import java.util.Scanner;

public class MultiplyString {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string of integers: ");
        String input = scanner.nextLine();
        System.out.print("Enter a multiplier: ");
        int multiplier = scanner.nextInt();
        scanner.close();

        StringBuilder output = new StringBuilder();
        for (int i = 0; i < input.length(); i++) {
            int digit = Integer.parseInt(String.valueOf(input.charAt(i)));
            int result = 1;
            for (int j = 0; j < multiplier; j++) {
                result *= digit;
            }
            output.append(result).append(" ");
        }
        System.out.println(output.toString().trim());
    }
}

In this version, we use String.valueOf() to convert the character to a string, and then Integer.parseInt() to convert the string to an integer.

This program works the same way as the previous one, but uses a different method to convert the characters to integers.





===================================================================
//take array list at run time
import java.util.ArrayList;
import java.util.Scanner;

public class ArrayListRuntime {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt user to enter the number of elements in the array
        System.out.print("Enter the number of elements in the array: ");
        int numElements = scanner.nextInt();

        // Initialize an empty ArrayList to store the elements
        ArrayList<Integer> arrList = new ArrayList<>();

        // Loop through each element and add it to the ArrayList
        for (int i = 0; i < numElements; i++) {
            System.out.print("Enter element " + (i+1) + ": ");
            int elem = scanner.nextInt();
            arrList.add(elem);
        }

        // Print the resulting ArrayList
        System.out.println("The resulting ArrayList is: " + arrList);
    }

}
===================================================================

//string tokenizer to count token and token words
import java.util.*;
class stringtoken1{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    StringTokenizer t=new StringTokenizer(s);
    System.out.println("the no.of token are" +t.countTokens());
    System.out.println("the no of token words are");
    while(t.hasMoreTokens()){
      System.out.println(t.nextToken());
    }
  }
}
=======================================================================
Java StringBuilder Class
Java StringBuilder class is used to create mutable (modifiable) String. The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5. Java StringBuilder Examples

Let's see the examples of different methods of StringBuilder class.

 1) StringBuilder append() method
The StringBuilder append() method concatenates the given argument with this String.
 class StringBuilderExample{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello");  
sb.append("Java");//now original string is changed  
System.out.println(sb);//prints Hello Java  
}  
}   Output: HelloJava 

==========================================================================================================================
2) StringBuilder insert() method
The StringBuilder insert() method inserts the given string with this string at the given position.
 StringBuilderExample2.java 
class StringBuilderExample2{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello ");  
sb.insert(1,"Java");//now original string is changed  
System.out.println(sb);//prints HJavaello  
}  
}  
Output: HJavaello 
=============================================================================================================================
3) StringBuilder replace() method
The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex. 
StringBuilderExample3.java 

class StringBuilderExample3{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello");  
sb.replace(1,3,"Java");  
System.out.println(sb);//prints HJavalo  
}  
}  
Output: HJavalo 
===================================================================================================================================
4) StringBuilder delete() method
The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex. StringBuilderExample4.java class StringBuilderExample4{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello");  
sb.delete(1,3);  
System.out.println(sb);//prints Hlo  
}  
}  
Output: Hlo 
=========================================================================================================================================
5) StringBuilder reverse() method
The reverse() method of StringBuilder class reverses the current string. StringBuilderExample5.java class StringBuilderExample5{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello");  
sb.reverse();  
System.out.println(sb);//prints olleH  
}  
}  
Output: olleH 
=========================================================================================================================================================================
//string builder
class stringbuild{
  public static void main(String args[]){
    StringBuilder s=new StringBuilder("hello");
    s.append("java");
    System.out.println(s);
      s.insert(5,"super");
    System.out.println(s);
    s.replace(0,5,"hyper");
   System.out.println(s);
   
    s.delete(0,5);
    System.out.println(s);
     s.reverse();
    System.out.println(s);
  
  }
}




==========================================================================================================================================================================

public static int[] mergeSortedArrays(int[] arr1, int[] arr2) {
    int[] result = new int[arr1.length + arr2.length];
    int i = 0, j = 0, k = 0;
    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) 
        {      
            result[k] = arr1[i];  
            i++;
        }
        else {
            result[k] = arr2[j];
            j++;
        }
        k++;
    }
    while (i < arr1.length) {
        result[k] = arr1[i];
        i++;
        k++;
    }
    while (j < arr2.length) {
        result[k] = arr2[j];
        j++;
        k++;
    }
    return result;
}
======================================================================================================================================================================

//merge sort by using arrays

import java.util.Scanner;
class mergesort1{
  public static void main(String args[] ){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter array size");
    int n=sc.nextInt();
     System.out.println("enter array size");
    int n1=sc.nextInt();
   // System.out.println("enter 1array");
    int a[]=new int[n];
   // System.out.println("enter 2array");
    int b[]=new int[n1];
    System.out.println("enter the 1array elements");
    for(int i=0;i<n;i++){
      a[i]=sc.nextInt();
    }
      System.out.println("enter the 2array elements");
    for(int i=0;i<n1;i++){
      b[i]=sc.nextInt();
    }
      System.out.println("display the 1array elements");
    for(int i=0;i<n;i++){
     System.out.print("\t" +a[i]);
    }
      System.out.println("enter the 2array elements");
    for(int i=0;i<n1;i++){
     System.out.print("\t" +b[i]);
    }
    int res[]=new int[n+n1];
    int i=0,j=0,k=0;
    
    while(i<a.length&&j<b.length){
      if(a[i]<b[j]){
        res[k]=a[i];
        i++;
      }
      else{
        res[k]=b[j];
          j++;
      }
      k++;
    }
    while(i<a.length){
      res[k]=a[i];
      i++;
        k++;
    }
      while(j<b.length){
      res[k]=b[j];
      j++;
        k++;
    }
   for( k=0;k<res.length;k++){
     System.out.println(res[k]);
   }
  }
}
=========================================================================================================================================================

A restaurant wants to keep track of its menu items. Each menu item has a name, a description, a price, and a category (appetizer, main course, dessert, etc.).
 The restaurant wants to be able to perform the following operations:Add a new menu item to the menuRemove a menu item from the menuSearch for a menu item by name or categoryDisplay all the menu items in the menu, grouped by categoryTo implement this functionality, you decide to use a collection in Java.Question: Write a 
Java program that implements the above scenario using a collection. Your program should have a MenuItem class that stores the details of a menu item (name,
 description, price, and category). Implement a collection to store the menu items in the restaurant's menu. Your program should have methods to add a menu
 item, remove a menu item, search for a menu item by name or category, and display all the menu items grouped by category. Test your program by adding several 
menu items to the menu, searching for a menu item, and displaying all the menu items grouped by category.


import java.util.*;
class MenuItem{
    String name,description,category;
    int price,unId;
    
    Scanner sc=new Scanner(System.in);
    void addItem(int unId){
        this.unId=unId;
        System.out.println("Enter name of the item :");
        name=sc.nextLine();
        System.out.println("Enter description of the item:");
        description=sc.nextLine();
        System.out.println("enter categoryof the item(appetizer, main course, dessert, etc.).");
        category=sc.nextLine();
        System.out.println("enter price of the item :");
        price=sc.nextInt();
        
    }
    void displayAll(){
        System.out.println("---Item---");
        System.out.println("The item code is : "+unId);
        System.out.println("The item name is : " +name);
        System.out.println("The item description is :"+description);
        System.out.println("The item category is : "+category);
    }
    
    
    static void removeItem(ArrayList<MenuItem> alist,int icode){
        int c=0;
        MenuItem object=null;
        for(MenuItem item:alist){
            if(item.unId==icode){
            alist.remove(item);
            }
        }
    
    }
}






public class Main
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    int unId=0;
	    ArrayList<MenuItem> alist=new ArrayList<>();
	    do{
		System.out.println("-----Menu Items Methods-----");
		System.out.println("[1]. To add a New Item to the Menu");
		System.out.println("[2]. To Display all the items in Menu");
		System.out.println("[3]. To Remove that item in the Menu");
		System.out.println("[0]. To exit");
		System.out.println("Enter your choices");
		int n=sc.nextInt();
		
		switch(n){
		    case 1:
		       MenuItem obj=new MenuItem();
		       unId++;
		       obj.addItem(unId);
		       alist.add(obj);
		        break;
		    case 2:
		        for(int i=0;i<alist.size();i++){
		            alist.get(i).displayAll();
		        }
		        break;
		    case 3:
		        System.out.println("Enter item code to remove");
		        int icode=sc.nextInt();
		        MenuItem.removeItem(alist,icode);
		        break;
		   case 0:
		       System.exit(0);
		       break;
		       
		   default:
		     System.out.println("Invalid choice");
		}
	    }while(true);
		
	}
}
=========================================================================================================================================================

Write a class Worker and derive classes DailyWorker and SalariedWorker from it. Every worker has a name and a salary rate. Write method ComPay (int hours) to 
compute the week pay of every worker. A Daily Worker is paid on the basis of the number of days he/she works. The Salaried Worker gets paid the wage for 40 hours 
a week no matter what the actual hours are. Test this program to calculate the pay of workers. You are expected to use the concept of polymorphism to write this program.has context menu


class Worker
{
String name;
int empno;
worker(int no,String n)
{ 
empno=no;
 name=n; 
}
void show()
  {
System.out.println("\n--------------------------");
System.out.println("Employee number : "+empno);
System.out.println("Employee name : "+name);
}
}
class dailyworker extends Worker
{
int rate;
dailyworker(int no,String n,int r)
{
super(no,n);
rate=r;
}
void compay(int h)
{
show();
System.out.println("Salary : "+rate*h);
}
}
class salariedworker extends Worker
{
int rate;
salariedworker(int no,String n,int r)
{
super(no,n);
rate=r;
}
int hour=40;
void compay()
{
show();
System.out.println("Salary : "+rate*hour);
}
}
public class PROG3{
    public static void main(String[] args) {
  dailyworker d=new dailyworker(254,"Arjun",75);
salariedworker s=new salariedworker(666,"Unni",100);
d.compay(45);
s.compay();
    }
    }
=========================================================================================================================================================

/*A library wants to keep track of the books it has in its collection. Each book has a title, an author, a genre, and a rating. The library wants 
to be able to perform the following operations:Add a new book to the collectionRemove a book from the collectionSearch for a book by title
or authorDisplay all the books in the collection, sorted by ratingTo implement this functionality, you decide to use a collection in 
Java.Question: Write a Java program that implements the abovescenario using a collection. Your program should have a Book class that stores the details of a book 
(title, author, genre, and rating). Implement a collection to store the books in the library. 
Your program should have methods to add a book, remove a book, search for a book by title or author, and display all the books sorted by rating. Test your program by adding several books to the collection, searching for a book, and displaying all the books sorted by rating.*/


import java.util.*;

class Library{
  class Books{
  
      String title,author,genre;
      int rating,id;

      public Books(int id) {
            this.id = id;
        }

      public void Add(){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter book title");
        title=sc.nextLine();
        System.out.println("Enter Name of the author");
        author=sc.nextLine();
        System.out.println("Enter genre");
        genre=sc.nextLine();
        System.out.println("Enter rating");
        rating=sc.nextInt();
      }

  // Method for picking the choice of task to be performed
  }
    static int choices(){
        Scanner sc = new Scanner(System.in);
        System.out.println("Press 1 for adding a new Book");
        System.out.println("Press 2 to view list of all available Books");
        System.out.println("Press 3 to search book by title");
        System.out.println("Press 4 to search book by author");
        System.out.println("Press 5 to remove a Book");
        System.out.println("Press 0 to exit");

        // Take input using scanner class
        int option = sc.nextInt();
        return option;
}


public static void main(String args[]){
	    Scanner sc=new Scanner(System.in);
	    int id=1;
	    // initialise array list to store list of Books information
	    ArrayList<Books> books = new ArrayList<Books>();
	            
        // For adding Books information
        while(true){

            // Take choice
            int option = choices();

            // Invalid choice
            if(option<0||option>5){
                System.out.println("Invalid choice");
            }
            // Take the input and add in the arrayList
            else if(option==1){
                Library lib = new Library();
                Books bk = lib.new Books(id++);
                bk.Add();
                books.add(bk);
                System.out.println("New Book added to Library");
            }
            else if(option==2){
              System.out.println("List of Books in the Library are: ");
              for(Books bk:books){
                System.out.println("Book title: "+bk.title);
                System.out.println("Author: "+bk.author);
                System.out.println("Genre "+bk.genre);
                System.out.println("Rating "+bk.rating);
              }
            }  
            else if(option==3){
                System.out.println("Enter book title: ");
                String Tit = sc.nextLine();
                boolean found = false;
                for(Books bk: books){
                    if(bk.title.equalsIgnoreCase(Tit)){
                        System.out.println("Book title: "+bk.title);
                        System.out.println("Author: "+bk.author);
                        System.out.println("Genre "+bk.genre);
                        System.out.println("Rating "+bk.rating);
                        found = true;
                        break;
                    }
                }       
                if(!found){
                    System.out.println("Book with title " + Tit + " not found.");
                }
            }
            else if(option==4){
                System.out.println("Enter name of the Author: ");
                String writer = sc.nextLine();
                boolean found = false;
                for(Books bk: books){
                    if(bk.author.equalsIgnoreCase(writer)){
                        System.out.println("Book title: "+bk.title);
                        System.out.println("Author: "+bk.author);
                        System.out.println("Genre "+bk.genre);
                        System.out.println("Rating "+bk.rating);
                        found = true;
                        break;
                    }
                }       
                if(!found){
                    System.out.println("Book with author " + writer + " not found.");
                }
            } 
            else if (option == 5) {
              System.out.println("Enter Book ID to delete book: ");
              int bid = sc.nextInt();
              boolean found = false;
              for (Books bk : books) {
                if (bk.id == bid) {
                  books.remove(bk);
                  System.out.println("Book " + id + " data deleted.");
                found = true;
                break;
                }
              }
              if (!found) {
              System.out.println("Book with ID " + id + " not found.");
              }
            } 
            else if(option==0){
              System.exit(0);
            }
            else
            {
              break;
            }
              
        }
}
}
=========================================================================================================================================================

/*A company wants to keep track of its employees. Each employee has a name, an ID, a job title, and a salary. The company wants to be able to perform the following operations:Add a new employee to the employee listRemove an employee from the employee listSearch for an employee by name or IDDisplay all the employees in the employee list, sorted by salaryTo implement this functionality, you decide to use a collection in Java.Question: Write a Java program that implements the above scenario using a collection. Your program should have an Employee class that stores the details of an employee (name, ID, job title, and salary). Implement a collection to store the employees in the company's employee list. Your program should have methods to add an employee, remove an employee, search for an employee by name or ID, and display all the employees sorted by salary. Test your program by adding several employees to the list, searching for an employee, and displaying all the employees sorted by salary.
  */



import java.util.*;
class employee{
  String name;
   int id;
  String tittle;
  int salary;
  employee (String name,int id,String tittle,int salary){
    this.name=name;
    this.id=id;
  this.tittle=tittle;
    this.salary=salary;
  }      
  }


class c206{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
   
     ArrayList<employee> list=new ArrayList<employee>();
    employee e1=new employee("pavan",161,"student",1200);
    employee e2=new employee("ajay",162,"student",1400);
     employee e3=new employee("vijay",163,"student",1500);
    list.add(e1);
    list.add(e2);
     list.add(e3);
    
     System.out.println("  The Total employee details are  "); 
    for(employee e:list){
       System.out.println(e.name+" "+e.id+" "+e.tittle+" "+e.salary);
    
    }
  
     System.out.println("enter id to check the employee");
    int id=sc.nextInt();
     System.out.println("  The particular person employee details are  ");
    if(id==e1.id){
  System.out.println(" name is   " +e1.name);
 System.out.println(" id is   " +e1.id);
  System.out.println(" tittle is   " +e1.tittle);
  System.out.println(" salary is   " +e1.salary);
  }
    else if(id==e2.id){
  System.out.println(" name is   " +e2.name);
 System.out.println(" id is   " +e2.id);
  System.out.println(" tittle is   " +e2.tittle);
  System.out.println(" salary is   " +e2.salary);
  }
       else if(id==e3.id){
  System.out.println(" name is   " +e3.name);
 System.out.println(" id is   " +e3.id);
  System.out.println(" tittle is   " +e3.tittle);
  System.out.println(" salary is   " +e3.salary);
  }
      
    else{
      System.out.println("employee not found");
    }
  }
} 
   
  
=========================================================================================================================================================
/*
A company wants to keep track of its employees. Each employee has a name, an ID, a job title, and a salary. The company wants to be able to perform the following operations:Add a new employee to the employee listRemove an employee from the employee listSearch for an employee by name or IDDisplay all the employees in the employee list, sorted by salaryTo implement this functionality, you decide to use a collection in Java.Question: Write a Java program that implements the above scenario using a collection. Your program should have an Employee class that stores the details of an employee (name, ID, job title, and salary). Implement a collection to store the employees in the company's employee list. Your program should have methods to add an employee, remove an employee, search for an employee by name or ID, and display all the employees sorted by salary. Test your program by adding several employees to the list, searching for an employee, and displaying all the employees sorted by salary.
*/
import java.util.*;
class worker
{
  String name,jobtitle; 
  int salary,id;
Scanner sc=new Scanner(System.in);
  void addemp()
  {
    System.out.println("Enter Employee Id");
    id=sc.nextInt();
    System.out.println("Enter Employee Name");
    name=sc.next();
     System.out.println("Enter Employee Jobtitle");
    jobtitle=sc.next();
    System.out.println("Enter Employee Salary");
    salary=sc.nextInt();
    }
  static void remove(ArrayList<worker> alist,int eid)
  {
    for(worker work:alist)
      {
        if(work.id==eid)
        {
          alist.remove(work);
        }
      }
  }
 static void Search(ArrayList<worker> alist,int eid1)
  {
    for(worker work:alist)
      {
        if(work.id==eid1)
        {
        work.display();
        }
      }
  }
  
  void display()
  {
    System.out.println("Employee details");
    System.out.println("----------------");
    System.out.println("Employee Id: "+id);
    System.out.println("Employee Name: "+name);
    System.out.println("Employee Job Title: "+jobtitle);
    System.out.println("Employee Salary: "+salary);
  }
}
  class Test
  {
    public static void main(String args[])
    {
    Scanner sc=new Scanner(System.in);
      ArrayList<worker> alist= new ArrayList<>();
      do{
        System.out.println("[1].Add Employee");
        System.out.println("[2].Remove Employee");
        System.out.println("[3].Search Employee");
        System.out.println("[4].Display all Employee");
        System.out.println("[0].To exit");
        
      System.out.println("Enter your choice ");
      int n=sc.nextInt();
      switch(n)
        {
          case 1:
            worker obj=new worker();
            obj.addemp();
            alist.add(obj);
            break;
          case 2:
           System.out.println("Enter Employee id to remove");
            int eid=sc.nextInt();
            worker.remove(alist,eid);
            break;
          case 3:
            System.out.println("Enter Employee id to search");
            int eid1=sc.nextInt();
             
            worker.Search(alist,eid1);
            
            break;
          case 4:
            for(int i=0;i<alist.size();i++){
              alist.get(i).display();
            }
            break;
          case 0:
            System.exit(0);
            break;
          default:
            System.out.println("Invalid choice");
        }
      }while(true);
    }
  }
===========================================================================================================================================================
create database mobiles

Creating a Database:
-------------------------
    create database database_name;
ex:
     create database Student;
 Changing the  Database:
------------------------------
     use database_name;
ex:
    use student; 
Create Table:
---------------
Syntax:
   create table table_name
   (
         var_name datatype(size), 
         var_name datatype(size), 
         __________
         __________
   ); Ex:
   create table stud
     (
          sno int(10),
          sname varchar(20),
           sphno int(15),
          semail varchar(30),
          sdob date
      ); 

===========================================================================================================================================================
       Inserting Values into database:
------------------------------------- insert into table_name values(value 1,value2.......................);
 ex: insert into stud values(101,'Karun',786765,'karun@gmail.com','1999-05-21');
      insert into stud(saddress) VALUES ('bezawada');
===========================================================================================================================================================
update stud set sphno=63083839 where sno=101;
alter table stud add saddress varchar(16);
update stud set saddress='vijayawada' where sno=101;
update stud set saddress='guntur' where sname='pavan';
 ===========================================================================================================================================================
delete from stud where sno=103;
truncate table stud;
drop TABLE stud;
select distinct sname from stud;

SELECT * FROM stud WHERE saddress = 'karimnagar' ORDER BY sname;
SELECT * FROM stud WHERE saddress = 'karimnagar' ORDER BY sname ASC; 
 SELECT *  FROM stud  WHERE saddress = 'karimnagar'  ORDER BY sname DESC;
 SELECT stud,address  FROM officers  WHERE sno > 100  ORDER BY sname DESC, address ASC;

===========================================================================================================================================================
SELECT sname ,COUNT(*) FROM stud GROUP BY sname;
out put 
sname   COUNT(*)
Karun     3
===========================================================================================================================================================
SELECT sname,SUM(sno) AS "TOTAL WORKING HOURS" FROM stud GROUP BY sname;
sname    TOTAL WORKING HOURS
Karun      304
===========================================================================================================================================================
 SELECT sname,MIN(sno) AS "MINIMUM WORKING HOURS" FROM stud GROUP BY sname;
sname  MINIMUM WORKING HOURS
Karun      17
===========================================================================================================================================================
SELECT sname,MAX(sno) AS "MAXIMUM WORKING HOURS" FROM stud GROUP BY sname;
sname  MAXIMUM WORKING HOURS
Karun     178
===========================================================================================================================================================
SELECT sname,AVG(sno) AS "average WORKING HOURS" FROM stud GROUP BY sname;
sname   average WORKING HOURS
Karun     112.333
===========================================================================================================================================================
SELECT sname,SUM(sno) AS "TOTAL WORKING HOURS" FROM stud GROUP BY sname HAVING SUM(sno)>100;
sname   TOTAL WORKING HOURS
arjun     104
aryan     105
Karun    674
kavya    106
mithra    107
===========================================================================================================================================================
ALTER TABLE table_name  MODIFY column_name datatype;
===========================================================================================================================================================
//primary key

CREATE TABLE Students12(
 Student_ID INT,
Roll_No INT,
 NAME VARCHAR(45) NOT NULL,
Age INT,
City VARCHAR(25),
PRIMARY KEY(Student_ID, Roll_No)
);

CREATE TABLE Login(
login_id INT AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(40),
PASSWORD VARCHAR(55),
email VARCHAR(55)
);


insert into students12 values(101,12,'arjun',12,'kavya');
insert into students12 values(101,12,'arjun',12,'kavya');
error duplicate values not taken by primary key
===========================================================================================================================================================



Consider the following tables to write the SQL queries for below questions. Table: Salespeople
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1003 | AxelRod | New York  | 0.10 |
| 1004 | Motika  | London    | 0.11 |
| 1005 | Fran    | London    | 0.26 |
| 1007 | Rifkin  | Barcelona | 0.15 |
+------+---------+-----------+------+ 
Table: Customer
 +------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+ 
Table: Orders
 +------+---------+------------+------+
| onum | amt     | odate      | cnum |
+------+---------+------------+------+
| 3001 |   18.69 | 1996-03-10 | 2008 |
| 3002 | 1900.10 | 2022-04-13 | 2007 |
| 3003 |  767.19 | 2022-04-13 | 2001 |
| 3005 | 5160.45 | 2022-05-23 | 2003 |
| 3006 | 1098.16 | 2022-05-12 | 2008 |
| 3007 |   75.75 | 2022-06-11 | 2002 |
| 3008 | 4723.00 | 2022-02-13 | 2006 |
| 3009 | 1713.23 | 2022-01-13 | 2002 |
| 3010 | 1309.95 | 2022-03-13 | 2004 |
| 3011 | 9891.88 | 2022-02-13 | 2006 |
+------+---------+------------+------+  
Questions: 1. Find the largest order taken by each salesperson on each date.
2. Arrange the Orders table by descending customer number.
3. Find which salespeople currently have orders in the Orders table.
4. Count the orders of each of the salespeople and output the results in descending order.
5. Find customers in San Jose who have a rating above 200.
6. Give the salespeople’s commissions as percentages instead of decimal numbers.
7. List the largest orders for October 3, for each salesperson.
8. Count the number of salespeople currently listing orders in the Orders table.
9. Find salespeople who have multiple customers.
10. Find salespeople with customers located in their city.
11. Find all salespeople whose name starts with ‘P’ and the fourth character is ‘l’.
12. Select all orders that are greater than the average for October 4.
13. Write a query that totals the orders for each day and places the results in descending order.
14. Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.
15. Find only those customers whose ratings are higher than every customer in Rome.
16. Which salesperson(s) should be fired?
17. What is the total income for the company?
18. Write a query that selects the first customer in alphabetical order whose name begins with G.
19. Which salespeople have no orders between 10/03/1996 and 10/05/1996?
20. Who is the most successful salesperson?
21. Who is the worst customer with respect to the company?
22. Find all orders by customers not located in the same cities as their salespeople.
23. Find all salespeople who have customers with more than one current order.
24. Which salesperson has earned the most by way of commission?
25. Write a query that selects each customer’s smallest order 


https://onecompiler.com/mysql  
https://www.w3schools.com/mysql/mysql_datatypes.asp#:~:text=In%20MySQL%20there%20are%20three,numeric%2C%20and%20date%20and%20time.  

===========================================================================================================================================================

[CONSTRAINT constraint_name]
FOREIGN KEY [foreign_key_name]
 (column_name, ...)
REFERENCES parent_table(colunm_name,...)
[ON DELETE reference_option]
[ON UPDATE reference_option]



[11:36 AM] Karunakar Eeede
CREATE TABLE categories( 
 categoryId INT AUTO_INCREMENT PRIMARY KEY,  
 categoryName VARCHAR(100) NOT NULL
);
CREATE TABLE products(  
 productId INT AUTO_INCREMENT PRIMARY KEY,  
 productName varchar(100) not null,  
 categoryId INT,  
 CONSTRAINT fk_category   
FOREIGN KEY (categoryId)        
REFERENCES categories(categoryId) 
);
insert into categories(categoryname) VALUES ('smartphone'),('smartwatch');
INSERT INTO products(productName, categoryId)VALUES('iPhone',1);
INSERT INTO products(productName, categoryId)VALUES('rolex',2);



CREATE TABLE employees (
  id INT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  department VARCHAR(50),
  location VARCHAR(50)
); 
INSERT INTO employees (id, first_name, last_name, department, location)
VALUES (1, 'Harshad', 'Kuwar', 'Marketing', 'Pune'),
       (2, 'Anurag', 'Rajput', 'IT', 'Mumbai'),
       (3, 'Chaitali', 'Tarle', 'IT', 'Chennai'),
       (4, 'Pranjal', 'Patil', 'IT', 'Chennai'),
       (5, 'Suraj', 'Tripathi', 'Marketing', 'Pune'),
       (6, 'Roshni', 'Jadhav', 'Finance', 'Bangalore'),
       (7, 'Sandhya', 'Jain', 'Finance', 'Bangalore');

SELECT *FROM employees WHERE Department = "IT" OR Location = "Chennai";
SELECT *FROM employees WHERE Department = "IT" AND Location = "Chennai";
SELECT Student_RollNo AS 'Roll No', Student_PhoneNumber AS 'Mobile Number' FROM students;  


create table employor(
id int AUTO_INCREMENT PRIMARY KEY,
firstname varchar(50),
lastname varchar(50),
department varchar(50),
location varchar(50));
INSERT INTO employor(firstname,lastname,department,location)
VALUES('aryan','kumar','it','delhi'),
       ('arjun','shetty','it','kolkata'),
       ('shilpa','kumari','marketing','pune'),
        ('priya','kumari','marketing','pune'),
       ('pavan','kalyan','animator','vijayawada'),
        ('pavani','kalyani','animator','vijayawada'),
       ('showla','howla','it','delhi');
select location AS stay from employor;
SELECT * FROM `employor` WHERE department='animator' and location='vijayawada';
SELECT * FROM `employor` WHERE department='it' or location='pune';

========================================================================================================================================================
CREATE TABLE customers 
( 
id INT NOT NULL AUTO_INCREMENT, 
name VARCHAR(50) NOT NULL, 
email VARCHAR(100) NOT NULL,
 PRIMARY KEY (id)); 
INSERT INTO customers (name, email)
 VALUES('John', 'john@example.com'),
('Jane', 'jane@example.com'),
('Bob', 'bob@example.com'); 
CREATE TABLE orders 
( 
id INT NOT NULL AUTO_INCREMENT,
 customer_id INT NOT NULL, 
order_date DATE NOT NULL,
 PRIMARY KEY (id),
 FOREIGN KEY (customer_id)
 REFERENCES customers(id));
 INSERT INTO orders (customer_id, order_date) 
VALUES(1, '2022-01-01'),
(1, '2022-02-05'),
(2, '2022-03-10'),
(3, '2022-03-15');

SELECT customers.name, orders.order_date
FROM customers
INNER JOIN orders
ON customers.id = orders.customer_id;


SELECT customers.name, orders.order_date
FROM customers
LEFT JOIN orders
ON customers.id = orders.customer_id;

SELECT customers.name, orders.order_date
FROM customers
RIGHT JOIN orders
ON customers.id = orders.customer_id;

SELECT customers.name, orders.order_date
FROM customers
INNER JOIN orders
ON customers.id = orders.customer_id;
========================================================================================================================================================
[11:35 AM] Karunakar Eeede
Java Database Connectivity Steps:   
  import java.sql.*;
----------------------------------------- 
1) Loading the Database driver:
---------------------------------------   
                 Class Name:  com.mysql.cj.jdbc.Driver        
            Class.forName("com.mysql.cj.jdbc.Driver"); 
2) Establish the connection:
----------------------------------  
                  Connection con=DriverManager.getConnection(“url”,”username”,”password”);
       ex:      Connection con=DriverManager.getConnection(“jdbc:mysql://localhost:3306/karun”,”root”,””);
                                                                                         |
                                                                                    Database name
 3) create statement object:
--------------------------------   
       Statement  stmt=con.createStatment();
                        or
         PreparedStatement psmt=con.prepareStatement("Sql Query");
 4) Execute the Statement:
------------------------------
  Create,Insert,Update,Dalete  ...........etc    
 psmt.executeUpdate();
           Select: stmt.executeQuery("Select Query"); 
5) Close the Connection:
------------------------------            
   con.close(); 
=========================================================================================================================================================    

[2:58 PM] Karunakar Eeede
import java.sql.*;
public class App
{ 
    public static void main(String[] args) 
    {
        try 
        {
         //1. loading Driver class
         Class.forName("com.mysql.cj.jdbc.Driver");         
       // 2. Establish the connection
         Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee","root","");
         if(con!=null) {
             System.out.println("Connected Successfully");
         }
         else {
            System.out.println("Connection fail"); 
         }
         // close connection
         con.close();
        }
        catch(Exception e) {
            System.out.println(e);
        }
    }

}
=============================================================================================================================================

create table emp
(
    eno int,
    ename varchar(20),
    esal int
);


package LSbatch;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.*; 
public class App
{
    public static void main(String[] args)
    {
          int eno,esal;
          String ename;
          Scanner sc=new Scanner(System.in);
          System.out.println("Enter Employee Number:");
          eno=sc.nextInt();
          System.out.println("Enter Employee Name:");
          ename=sc.next();
          System.out.println("Enter Employee Salary:");
          esal=sc.nextInt();
        try {
      //  1. loading Driver class
         Class.forName("com.mysql.cj.jdbc.Driver");         
      // 2. Establish the connection
         Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee","root","");
         PreparedStatement pstmt=con.prepareStatement("INSERT INTO EMP VALUES(?,?,?) ");
         pstmt.setInt(1,eno);
         pstmt.setString(2,ename);    
         pstmt.setInt(3,esal);   
          int i=pstmt.executeUpdate();
                 if(i==1)
                 {
                     System.out.println("RECORD INSERTED SUCCESSFULLY");                     
                 }
                 else
                 {
                   System.out.println("ERROR OCCUR WHILE  ADDING");
                 }       
              con.close();  
        }
        catch(Exception e) {
            System.out.println(e);
        }    
      } 
     }
==========================================================================================================================================================
[4:38 PM] Karunakar Eeede
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
public class App
{
    public static void main(String[] args)
    {
        try {
         //1. loading Driver class
         Class.forName("com.mysql.cj.jdbc.Driver");
        // 2. Establish the connection
         Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee","root","");
         Statement st=con.createStatement();  
        ResultSet rs=st.executeQuery("SELECT * FROM EMP");                        
       while(rs.next())
         {
         System.out.println(rs.getString(1) +"\t"+rs.getString(2)+"\t"+rs.getString(3));
         }
       con.close();
        }
        catch(Exception e) {
            System.out.println(e);
        } 
    }
}
============================================================================================================================================================

Write a Java program that prompts the user to enter a string and a character, and counts the number of occurrences of that character in the string (case-insensitive).



// Write a Java program that prompts the user to enter a series of numbers (separated by spaces) and then rearranges the numbers such that all the odd numbers come first, followed by all the even numbers. The program should then print the rearranged list of numbers.


// Enter a series of numbers (separated by spaces): 5 3 8 2 7 1 4 Rearranged list: 5 3 7 1 8 2 4
import java.util.*;
class practice124{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    System.out.println("enter the number");
    String s=sc.nextLine();
  
    String k="";
     String q="";
    for(int i=0;i<s.length();i++){
     
      if(s.charAt(i)%2==0){
      k=k+" "+s.charAt(i);  
      }
    
    if(s.charAt(i)%2==1){
      q=q+" "+s.charAt(i);  
      }
      
    }
    String r=q.concat(k);
     System.out.println( " " +r ); 
    }
    
  }



enter the number
1 2 3 4 5 6 7 8 
 1 3 5 7 2  4  6  8  

==============================================================================================================================================

import java.util.Scanner; public class OddEvenRearrange {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);         // Read input from user
        System.out.print("Enter a series of numbers (separated by spaces): ");
        String userInput = input.nextLine();         // Convert input to an array of integers
        String[] numbers = userInput.split(" ");
        int[] intArray = new int[numbers.length];
        for (int i = 0; i < numbers.length; i++) {
            intArray[i] = Integer.parseInt(numbers[i]);
        }         // Rearrange the numbers so that all odd numbers come first, followed by even numbers
        int left = 0;
        int right = intArray.length - 1;
        while (left < right) {
            while (intArray[left] % 2 != 0 && left < right) {
                left++;
            }
            while (intArray[right] % 2 == 0 && left < right) {
                right--;
            }
            if (left < right) {
                int temp = intArray[left];
                intArray[left] = intArray[right];
                intArray[right] = temp;
                left++;
                right--;
            }
        }         // Print the rearranged list of numbers
        System.out.print("Rearranged list: ");
        for (int i = 0; i < intArray.length; i++) {
            System.out.print(intArray[i] + " ");
        }
        System.out.println();   
      input.close();
    }
}
================================================================================================================================================
[12:20 PM] Karunakar Eeede
Write a Java program that prompts the user to enter a string, and then finds the longest palindrome in the string. If there are multiple palindromes of equal length, the program should return the first one it finds.


Enter a string: racecar is a palindrome, but not this sentence The longest palindrome in the string is: racecar
================================================================================================================================================
Write a Java program that prompts the user to enter a string, and then converts that string to "Title Case". "Title Case" means that the first letter of each word in the string should be capitalized, and all other letters should be lowercase.
===============================================================================================================================================
Write a Java program that prompts the user to enter a positive integer, and then prints out all the possible combinations of the digits in that number.For example, if the user enters the number "123", the program should print out all the possible combinations of the digits "1", "2", and "3". The output should be: 
123
132
213
231
312
321
import java.util.Scanner;
class practice125{
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
  System.out.println("enter the string");
String s=sc.nextLine();
String k="";
  System.out.println("enter the string combinations are");
for(int i=0;i<s.length();i++){
  for(int j=1;j<s.length();j++){
  k=s.replace(s.charAt(i),s.charAt(j));
    System.out.println(k);
}
}
   
  }
}
enter the string
123
enter the string combinations are
223
323
123
133
122
123
=========================================================================================================================================================
[3:08 PM] Karunakar Eeede
Write a Java program that reads in two strings from the user, and then prints out the longest common subsequence of the two strings. A subsequence of a string is a sequence of characters that appears in the string in the same order as they appear in the original string, but not necessarily consecutively. For example, the longest common subsequence of the strings "ABCDGH" and "AEDFHR" is "ADH".

import java.util.*;
class practice126{
  public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    String s=sc.nextLine();
    String k=sc.nextLine();
    String d="";
    TreeSet<Character>q=new   TreeSet<Character>();
    for(int i=0;i<s.length();i++){
      for(int j=0;j<k.length();j++){
        for(char c='A';c<='Z';c++){
          if(c==s.charAt(i)){
        if(s.charAt(i)==k.charAt(j)){
        q.add(s.charAt(i));
        
          }
          }
          }
          }
      
    }
    for(Character r:q){
    d+=r;
    
    }
    System.out.println(d);
  }
}
// HDAEC
// EFHAC
    
===========================================================================================================================================================
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
OPENAI_API_KEY
=============================================================================================================================================
Grant & revoke 
create database workers;
create TABLE hetero(
id int(10) ,
name varchar(70),
address varchar(70)
);
INSERT into hetero(id,name,address)VALUES(2,'arjun','vijayawada'),
(3,'aryan','amaravathi'),
(4,'teja','vizag'),
(5,'kavya','jammunagar'),
(6,'smitha','kakinada');

select * from hetero; 
id	name	address	
2    arjun   vijayawada
3    aryan   amaravathi
4    teja     vizag
5    kavya    jammunagar
6    smitha   kakinada
grant select,insert,update,delete on hetero to aryan;
grant select on hetero to aryan;
grant all on hetero to aryan;
revoke delete on hetero from aryan;
revoke insert,update on hetero from aryan;
revoke all on hetero from aryan;
revoke connect from aryan;
=======================================================================================================
create database workers;
create TABLE hetero(
id int(10) ,
name varchar(70),
address varchar(70)
);
INSERT into hetero(id,name,address)VALUES(2,'arjun','vijayawada'),
(3,'aryan','amaravathi'),
(4,'teja','vizag'),
(5,'kavya','jammunagar'),
(6,'smitha','kakinada');

select * from hetero; 
id	name	address	
2    arjun   vijayawada
3    aryan   amaravathi
4    teja     vizag
5    kavya    jammunagar
6    smitha   kakinada
INSERT into hetero(id,name,address)VALUES(9,'tarun','kazimnager'),
select * from hetero; 
id	name	address	
2    arjun   vijayawada
3    aryan   amaravathi
4    teja     vizag
5    kavya    jammunagar
6    smitha   kakinada
9   'tarun'  'kazimnager'
rollback;
select * from hetero; 
id	name	address	
2    arjun   vijayawada
3    aryan   amaravathi
4    teja     vizag
5    kavya    jammunagar
6    smitha   kakinada


==========================================================================================================================================================
package bitLabs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.*;
 

public class updateRecord
{
    public static void main(String[] args)
    {
          int eno,esal;
          String ename;
          Scanner sc=new Scanner(System.in);
          System.out.println("Enter Employee Number:");
          eno=sc.nextInt();
          System.out.println("Enter Employee Name:");
          ename=sc.next();
          System.out.println("Enter Employee Salary:");
          esal=sc.nextInt();
          
        try {
         //1. loading Driver class
         Class.forName("com.mysql.cj.jdbc.Driver");
 
        // 2. Establish the connection
         Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee","root","");
       
         PreparedStatement pstmt=con.prepareStatement("UPDATE EMP SET ename=?, esal=? WHERE eno=?(?,?,?) ");
         
         pstmt.setInt(1,eno);
         pstmt.setString(2,ename);    
         pstmt.setInt(3,esal);    
 
        int i=pstmt.executeUpdate();
                 if(i==1)
                	 int i=pstmt.executeUpdate();
                 if(i==1)
                 {
                     System.out.println("RECORD UPDATED SUCCESSFULLY");                     
                 }
                 else
                 {
                     System.out.println("ERROR OCCURRED WHILE UPDATING RECORD");
                 }
 
                con.close();  
        }
        catch(Exception e) {
            System.out.println(e);
        }
 
    }
 
}
==========================================================================================================================================================
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class deleteRecord {
	 public static void main(String[] args)
	    {
	          int eno,esal;
	          String ename;
	          Scanner sc=new Scanner(System.in);
	          System.out.println("Enter Employee Number:");
	          eno=sc.nextInt();
	          System.out.println("Enter Employee Name:");
	          ename=sc.next();
	          System.out.println("Enter Employee Salary:");
	          esal=sc.nextInt();
	          
	        try {
	         //1. loading Driver class
	         Class.forName("com.mysql.cj.jdbc.Driver");
	 
	        // 2. Establish the connection
	         Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee","root","");
	       
	         PreparedStatement pstmt=con.prepareStatement("DELETE FROM EMP WHERE eno=?");
	         
	         pstmt.setInt(1,eno);  
	 
	        int i=pstmt.executeUpdate();
	                 if(i==1)
	                 {
	                	    System.out.println("RECORD DELETED SUCCESSFULLY");                     
	                	}
	                	else
	                	{
	                	    System.out.println("ERROR OCCURRED WHILE DELETING RECORD");
	                	}
	                con.close();  
	        }
	        catch(Exception e) {
	            System.out.println(e);
	        }
	 
	    }
	 
	}
}
==========================================================================================================================================================
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.*; 
public class App
{
    public static void main(String[] args)
    {
          int eno,esal;
          String ename;
          Scanner sc=new Scanner(System.in);
          System.out.println("Enter Employee Number:");
          eno=sc.nextInt();
          System.out.println("Enter Employee Name:");
          ename=sc.next();
          System.out.println("Enter Employee Salary:");
          esal=sc.nextInt();
        try {
         //1. loading Driver class
         Class.forName("com.mysql.cj.jdbc.Driver");     
    // 2. Establish the connection
         Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee","root","");
         PreparedStatement pstmt=con.prepareStatement("UPDATE EMP SET ename=?,esal=? WHERE eno=?");
         pstmt.setString(1,ename);
         pstmt.setInt(2,esal);    
         pstmt.setInt(3,eno);        
     int i=pstmt.executeUpdate();
                 if(i==1)
                 {
                     System.out.println("Record Updated Successfully");                   
                 }
                 else
                 {
                   System.out.println("ERROR OCCUR WHILE Updating");
                 }                     con.close();  
        }
        catch(Exception e) {
            System.out.println(e);
        }    
 }
 }     

================================================================================================================================================

package bitlabs;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
public class count
{
public static void main(String[] args)
 {
try {
//1. loading Driver class
Class.forName("com.mysql.cj.jdbc.Driver");
// 2. Establish the connection
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/workers","root","");
Statement st=con.createStatement();
 ResultSet rs=st.executeQuery("SELECT * FROM hetero");
ResultSetMetaData rsmd=rs.getMetaData();
     int colscount=rsmd.getColumnCount();
    for(int i=1;i<=colscount;i++)
{
 System.out.print(rsmd.getColumnName(i)+"\t");
 }
System.out.println("\n----------------------------------------");
while(rs.next())
{
for(int i=1;i<=colscount;i++)
 {
System.out.print(rs.getString(i)+"\t");
}
 System.out.println();
 }
con.close();
 }
 catch(Exception e) 
        {
 System.out.println(e);
}
}
}

=======================================================================
package bitlabs;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.*;
public class delete
{
 public static void main(String[] args)
{
int id;
Scanner sc=new Scanner(System.in);
 System.out.println("Enter Employee Number:");
id=sc.nextInt();
try {
//1. loading Driver class
Class.forName("com.mysql.cj.jdbc.Driver");
// 2. Establish the connection
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/workers","root","");
PreparedStatement pstmt=con.prepareStatement("DELETE FROM hetero WHERE id="+id+"");
int i=pstmt.executeUpdate();
if(i==1)
{
System.out.println("Employee Record Deleted Successfully");
}
else
{
System.out.println("ERROR OCCUR WHILE Deleting");
}con.close();
 }
catch(Exception e) {
System.out.println(e);
 }
    
}
    
}
=========================================================================================================================
package miniproject;

public class PATIENT {

	
	private String name, gender, city, address, dateOfAdmission, guardianName, guardianAddress; 
      public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getDateOfAdmission() {
		return dateOfAdmission;
	}
	public void setDateOfAdmission(String dateOfAdmission) {
		this.dateOfAdmission = dateOfAdmission;
	}
	public String getGuardianName() {
		return guardianName;
	}
	public void setGuardianName(String guardianName) {
		this.guardianName = guardianName;
	}
	public String getGuardianAddress() {
		return guardianAddress;
	}
	public void setGuardianAddress(String guardianAddress) {
		this.guardianAddress = guardianAddress;
	}
	public long getAadharNumber() {
		return aadharNumber;
	}
	public void setAadharNumber(long aadharNumber) {
		this.aadharNumber = aadharNumber;
	}
	public long getContactNumber() {
		return contactNumber;
	}
	public void setContactNumber(long contactNumber) {
		this.contactNumber = contactNumber;
	}
	public long getGuardianContactNumber() {
		return guardianContactNumber;
	}
	public void setGuardianContactNumber(long guardianContactNumber) {
		this.guardianContactNumber = guardianContactNumber;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public boolean isRecovered() {
		return recovered;
	}
	public void setRecovered(boolean recovered) {
		this.recovered = recovered;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	private  long aadharNumber,contactNumber,guardianContactNumber;
      private   int age;
      private   boolean recovered;
      private   int id;

	

}

CREATE TABLE patient (
 id INT PRIMARY KEY AUTO_INCREMENT,
 name VARCHAR(255),
 gender VARCHAR(10),
 aadharNumber VARCHAR(20),
 contactNumber VARCHAR(20),
 city VARCHAR(50),
 address VARCHAR(255),
 dateOfAdmission DATE,
 guardianName VARCHAR(255),
 guardianAddress VARCHAR(255),
 guardianContactNumber VARCHAR(20),
 age INT,
 status BOOLEAN
);


package miniproject;
import java.sql.*;
public class daoimp implements daointerface {
Connection con;
daoimp(){
try {
Class.forName("com.mysql.jdbc.Driver");
con=DriverManager.getConnection("jdbc:mysql://localhost:3306/miniproject","root","");
    
}catch (Exception e) {
// TODO Auto-generated catch block
e.printStackTrace();
    
}
    
}
public void patientRegistartion(PATIENT p)
{
    try {
    	PreparedStatement pstmt=con.prepareStatement("insert into patient(name,gender,city,address,dateOfAdmission,guardianName,guardianAddress,aadharNumber,contactNumber,guardianContactNumber,age,recovered)values(?,?,?,?,?,?,?,?,?,?,?,?)");
    	pstmt.setString(1,p.getName());
    	pstmt.setString(2,p.getGender());
    	 pstmt.setString(3,p.getCity());
    	 pstmt.setString(4,p.getAddress());
    	 pstmt.setString(5,p.getDateOfAdmission());
    	 pstmt.setString(6,p.getGuardianName());
    	 pstmt.setString(7,p.getGuardianAddress());
    	 pstmt.setLong(8,p.getAadharNumber());
    	 pstmt.setLong(9,p.getContactNumber()); 
    	 pstmt.setLong(10,p.getGuardianContactNumber());
    	 pstmt.setInt(11,p.getAge());
    	 pstmt.setString(12,p.getRecovered());
    	int i=pstmt.executeUpdate();
    	 if(i!=0) {
    	System.out.println("data saved successfully");
    	}
    	 else {
    	 System.out.println("data is not saved successfully");
    	 }
    	 } 
    catch (SQLException e) {
    	// TODO Auto-generated catch block
    	e.printStackTrace();
    	 }
    	}
    
    
}


package miniproject;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	 daointerface dao=new daoimp();
    	PATIENT p=new PATIENT();  	
    	 p.setName("John");
    	 p.setGender("male");
    	 p.setCity("hbcolony");
    	 p.setAddress("vijayawada");
    	 p.setDateOfAdmission("12-56-4565");
    	 p.setGuardianName("vijaya");
    	 p.setGuardianAddress("america");
    	 p.setAadharNumber(1234543);
    	 p.setContactNumber(6456765);
    	 p.setGuardianContactNumber(566778);
    	 p.setAge(65);
    	 p.setRecovered("recovered");
    	 dao.patientRegistartion(p);
    }
}


==================================================================================================================================================
[2:38 PM] Karunakar Eeede
<!--  HTML COMMENT LINE  -->
<!DOCTYPE html>
       <head>
              <title>Welcome to My Webite</title>
      </head>
      <body>            <b>WELCOME TO FIRST HTML PROGRAM</b>  <br>
           <strong>WELCOME TO FIRST HTML PROGRAM</strong>
               <br><br>
                  <i>WELCOME TO FIRST HTML PROGRAM</i> <br>
                  <em>WELCOME TO FIRST HTML PROGRAM</em> 
               <br><br>
                  <u>WELCOME TO FIRST HTML PROGRAM</u> 
               <br><br>
                 <b><i><u>WELCOME TO FIRST HTML PROGRAM</u></i></b>
               <br><br>
                          SUBSCRIPT:  H<sub>2</sub>SO<sub>4</sub>     
                <br><br>
                            SUPERSCRIPT: 1<sup>st</sup>
                <br><br>
                            Rs. <strike>250/-</strike>  100/- only
                  <br>
                           <s>Welcome</s>
                    <br>
                          <del>Welcome</del>
                   <br><br>
          <blockquote>
                    Explanation: The inner join is a form of join in <mark>MySQL</mark> that is used to combine the result of concatenating the contents of two tables into a new table. In inner join,<q> result is produced by matching rows</q> in one table with rows in another table.
            </blockquote>
               <br><br>
             <big><big>
               Explanation: The inner join is a form of join
             </big></big>
            <br><br>
   <small>
   Explanation: The inner join is a form of join
   </small>
     </body>
</html> 

========================================================================================================================


<!--  HTML COMMENT LINE  -->
<!DOCTYPE html>
<head>
<title>
Welcome to My Webite
</title></head>
<body bgcolor="green"><font color="white" size="7" face="Viner Hand ITC">

   Explanation: The inner join is a form of join in MySQL that is used to combine the result of concatenating the contents of two tables into a new table. In inner join,<q> result is produced by matching rows</q> in one table with rows in another table.
</font>    
</small>
</body>
</html>
=====================================================================================================
<!--  HTML COMMENT LINE  -->
<!DOCTYPE html>
<head>
<title>
Welcome to My Webite
</title></head>
<body colour="black">
    <font colour="white" size="7" face="Viner Hand ITC">

Explanation: The inner join is a form of join in MySQL that is used to combine the result of concatenating the contents of two tables into a new table. In inner join,<q> result is produced by matching rows</q> in one table with rows in another table.
</font>

</body>
</html>
=======================================================================================================================

<!--HTML COmmentline -->
<!DOCTYPE HTML>
<head>
<tittle>
WELCOME TO BITLABS
</tittle>
</head>
<body>
<img src="aryan.jpg" width="600" heigth="500" border="6" title="deepawali">
</boby>
</html>




=======================================================================================================================================



<!--  HTML COMMENT LINE  -->
<!DOCTYPE html>
<head>
<title>
Welcome to My Webite
</title>
</head>
<body>
<p align="center">
   Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.   
 </p>
<p align="right">
   Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.  
 </p>
<p align="justify">
   Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.   
</p>
</body>
</html>
==================================================================================================================== 


<!DOCTYPE html>
<head>
    <h1 align="right">aryan</h1>
    <h2 align="center">aryan</h2>
    <h3 align="left">aryan</h3>
    <h4>aryan</h4>
    <h5>aryan</h5>
    <h6>aryan</h6>
    <body>
        <br>
        <i>pavan</i>
        <br>
        <em>kalyan</em>
        <br>
        <u>turbo</u>
        <br>
        <b><i><u><big>aryan is a good boy</big></u></i></b>
        <br>
        <sup>aryankumarhww</sup>
        <br>
        <br>
        h<sub>20</sub>
        <br>
        1<sup>st</sup>
        <br>
        <strike>welcome</strike>
        <br>
        <del>bitlabs</del>
        <br>
      <mark>
      <big> pavan and aryan are same</big> 
    </mark>
    <br>
    <q><big>hello world</big></q> 
    <br>
    <q><small>hello world</small></q>
    <br>
    <blockquote> backspace</blockquote>  
      <p  align="right">
        Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each. 
      </p> 
      <p align="center">
        Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each. 
      </p>
      <p align="left">
        Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each. 
      </p>
      <p align="justify">
        Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.   
      </p>
      <ul type="disc">
 <li>krishna</li>
 <li>guntur</li>
 <li>malasia</li>
      </ul>
      <ul type="square">
        <li>krishna</li>
        <li>guntur</li>
        <li>malasia</li>
             </ul>
             <ul type="circle">
                <li>krishna</li>
                <li>guntur</li>
                <li>malasia</li>
                     </ul>

                     <ol type="1">
                        <li>krishna</li>
                        <li>guntur</li>
                        <li>malasia</li>
                             </ol>
                             <ol type="a">
                                <li>krishna</li>
                                <li>guntur</li>
                                <li>malasia</li>
                                     </ol>
                                     <ol type="A">
                                        <li>krishna</li>
                                        <li>guntur</li>
                                        <li>malasia</li>
                                             </ol>
                                             <ol type="I">
                                                <li>krishna</li>
                                                <li>guntur</li>
                                                <li>malasia</li>
                                                     </ol>
                                                     <ol type="i">
                                                        <li>krishna</li>
                                                        <li>guntur</li>
                                                        <li>malasia</li>
                                                             </ol>
<big>                                                            
<h4>
  <dl>
    <dt><big>my sql</big>
        <dd>
            Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.Explanation: An SQL join clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is. A JOIN is a means for combining fields from two tables by using values common to each.   
        </dd>
    </dt>
</dl>
</h4>
</big>
<small><big>
    aryankumar
</big>
<br>
<img src="https://cdn1.matadornetwork.com/blogs/1/2018/11/woman-lighting-Diya-during-Diwali-Festival-in-India.jpg" width="600" heigth="500" border="6" title="deepawali">
<br>
<a href="https://www.google.co.in/"target="parent">GOOGLE</a>
<BR>
    <a href="https://www.google.co.in/"target=" ">GOOGLE</a>
    <br>
    <a href="https://www.google.co.in/"target="new">GOOGLE</a>
<br>
<a href="mailto:aryankumar48895@gmail.com"target="parent">GOOGLE</a>
    </body>

</head>




====================================================================================================================== 
Arogya Hospital Information Management System Hey learner!! Remember our client Arogya Hospital, for whom we built a Java based application? They liked your work, and they are back with another project contract. This time Arogya Hospital needs some nice-looking web pages (front end) for the operators, nurses and doctors to use. Understand the requirements below and use what you learned about HTML and CSS. Please read the description carefully before you start implementation. Based on the success of this project, Arogya will award additional contracts to bitLabs. The management system should have the following features: - • Home page
Home page should contain Hospital logo, brief description of hospital and their mission with attractive images. 
Also, we should have Some other options to choose like - 
1.Medicine Record 
2.Patient’s Registration 
3.Patient’s Profile 
4.Contact us • Medicine Record
Beside Home page option we should have Medicine Entry Form. This form is used to capture the name of the medicine supplier and all the medicines supplied by them.
In medicine entry form we should take 3 inputs that represent the “Supplier Details”
1.Supplier ID 
2.Supplier Name 
3.Date and time of Supply • Right below the “Supplier Details” you should have a table, with multiple rows. Each row represents a medicine supplied by the particular Supplier.   
1.Medicine ID 
2.Medicine Name 
3.Unit price 
4.Quantity 
5.Manufacture date
6.Expiry Date
And the “Submit button” at the bottom middle of the page. ● Patient’s Registration 
This page is used to register patients into the system and to admit them. Assign a unique id to each patient admitted. Add a patient’s personal details:
Add a patient’s details to your page whenever there is a new patient admitted.
The patient details should include his/her name, age, gender, Aadhar Card number, contact number, Emergency contact number, Complete address, etc. Guardian's Information: -
Add a patient’s guardian’s details to your page whenever there is a new patient    admitted. The details should include his/her name, age, gender, Aadhar Card number, contact number, Complete address, etc. COVID 19: Past 1 year information: 
In this section we will be collecting their past record related to covid. The details should include Travel info: Did He/she travel in the past 1 Month?, Vaccine Doses, Date of last dose, Date of last Covid test, If patient is showing any symptoms? etc. Insurance details: 
We should collect their insurance details (if any) like insurance membership, Insurance number, etc. And take “Date of admission” then “Submit Button” at the bottom of the page. ●
 Search Patients
This page is used to do the following:
1.View full list of patients
2.Search an entry of patient
3.Recovery and Delete View full list of patients
The system should show the list of patients at any point of time. Basically, the system should be dynamic and a real time system. In other words, it can provide results at any point of time without any delays. For now, just provide a button to view all patients, and we can hook it to up to the backend in a later project. Search an entry of patient
The operator must be able to search for patients using any of the following information Patient ID, Patient Name, Patient City, Patient Age. For a searching by age, provide minimum age and maximum age as search input. Recovery and Delete
Mark the patient recovered when he or she is fully recovered using patient’s ID as input. The system should also be able to delete the information of a patient when asked to, using patient’s ID as input. 
• Contact us
In this page we should include all contact details of hospitals like Address, Phone No,    Email address, Mobile No., Customer Support, Ambulance Contact No., Website, etc. If you want to add some extra features in your project then you can discuss it with your respective mentor. Your innovative ideas are very welcome. Sounds exciting? Then please go ahead and start your implement using HTML and CSS learnt in the Front-End foundation course. Note: Create menu bar which includes Home, Medicine Record, Patient Registration, Patient Profile and contact us as a menu values. When we click on the menu option display related elements on the body part of the HTML page. Create footer and display “© All Rights Reserved by Arogya Hospital @bitLabs.in” message. All the very best and Happy learning with bitLabs!!

====================================================================================================================================
<!DOCTYPE html>
<html>
    <head>
        welcome to bitlabs
    </head>
    <body bgcolor="pink">
        <table border="5" align="center" bgcolor="cyan" width="300" heigth="250" cellpadding="50" cellspacing="10">
            <caption>companyinformation</caption>
                <tr>
                    <th>company</th>
                    <th>name</th>
                    <th>phoneno</th>
                </tr>
                <tr>
                    <td>symphonise</td>
                    <td>pavan</td>
                    <td>65988</td>
                </tr>
                <tr>
                    <td>bitlabs</td>
                    <td>kumar</td>
                    <td>69088</td>
                </tr>
                <tr>
                    <td>tekworks</td>
                    <td>aryan</td>
                    <td>68494</td>
                </tr>
                
            
        </table>
    </body>
</html>
=============================================================================================================
<!DOCTYPE html>
<html>
  <head>welcome to my website</head>
  <body>
    <div align="center" >pavan</div>
    <div align="left" >pavan</div>
    <div align="right" >pavan</div>
    <hr >
    <hr colour="red">
    <hr color="red"width="400px"size="25">
    <hr color="#FFOOFF"width="400px"size="25">
    <hr color="#FFOOFF"width="400px"size="25" align="left">
<marquee bgcolor="cyan" >welcome to bitlabs</marquee>
<marquee bgcolor="orange" direction="right">welcome to bitlabs</marquee>
<marquee bgcolor="pink" behavior="alternate">welcome to bitlabs</marquee>
<marquee bgcolor="skyblue" direction="right" scrollamount="50" hspace="50" vspace="50">welcome to bitlabs</marquee>
  </body>
</html>
==============================================================================================================
<!DOCTYPE html>
<html>
    <head>
        welcome to bitlabs
    </head>
    <body >
        <table background="mash.jpg" border="5" align="center"  width="300" heigth="250" cellpadding="50" cellspacing="10">
            <caption>companyinformation</caption>
                <tr>
                    <th >company</th>
                    <th>name</th>
                    <th>phoneno</th>
                </tr>
                <tr>
                    <td>symphonise</td>
                    <td>pavan</td>
                    <td>65988</td>
                </tr>
                <tr>
                    <td>bitlabs</td>
                    <td>kumar</td>
                    <td>69088</td>
                </tr>
                <tr>
                    <td>tekworks</td>
                    <td>aryan</td>
                    <td>68494</td>
                </tr>
                
            
        </table>
    </body>
</html>
=============================================================================================================================================

Syntax:
 
<form name="name">
 
           // Input fields
 
</form>
 
Text Field:
-------------
 
  <input type="text" name="name" size=" " value="Default Text" placeholder="text">
 
            required
            disabled
=            maxlength
--==============-----------====================---------------------====================----------------================-------------==================----
<!DOCTYPE html>
<html>
    <head>
        <body>
            <form name="aryanjob">
                firstname:<input type="text" name="txt" size="30" disabled>
                firstname:<input type="text" name="txt" size="30" required>
                lastname:<input type="text" name="txt" size="30" required>
                <br>
                password:<input type="password" name="pwd" value="bitlabs">
                <br>
                confirmpassword:<input type="password" name="pwd" placeholder="enter password">
              
                <h4>SELECT YOUR GENTER PLEASE</h4>
                <input type="radio" name="m" value ="male">MALE
                <input type="radio" name="m" value ="female">FEMALE<br>
                <h4>enter YOUR qualification PLEASE</h4>
                <input type="checkbox" name="ch" value ="tenth">tenth<br>
                <input type="checkbox" name="ch" value ="inter">inter<br>
                <input type="checkbox" name="ch" value ="b.tech">b.tech<br>
                <input type="checkbox" name="ch" value ="m.tech">m.tech<br>
                <input type="checkbox" name="ch" value ="phd">phd<br>
            </form>
        </body>
    </head>
</html>
===========================================================================================================================   
<!DOCTYPE html>
<html>
    <head>
        <body>
            <table border="3">
                <tr>
                <th colspan="2">subject</th>
               
                <th>john</th>
                <th>miriam</th>
               </tr>
               <tr >
                <td rowspan="3">biology  </td>
                <td>theory</td>
                <td>A</td>
                <td>A<sup>+</sup></td>
                 </tr>
                 <tr>
                  <td>practical</td>
                    <td>A</td>
                    <td>A<sup>+</sup></td>
                     </tr>
                <tr>
                    <td>expeiment</td>
                    <td>A</td>
                    <td>A</td>
                </tr>
                <tr >
                    <td rowspan="3">zoology  </td>
                    <td>theory</td>
                    <td>A</td>
                    <td>A<sup>+</sup></td>
                     </tr>
                     <tr>
                      <td>practical</td>
                        <td>A<sup>+</sup></td>
                        <td>A</td>
                         </tr>
                    <tr>
                        <td>expeiment</td>
                        <td>A</td>
                        <td>A</td>
                    </tr>
                    <tr >
                        <td rowspan="3">cryptoloy  </td>
                        <td>theory</td>
                        <td>A<sup>+</sup></td>
                        <td>A</td>
                         </tr>
                         <tr>
                          <td>practical</td>
                            <td>A</td>
                            <td>A<sup>_</sup></td>
                             </tr>
                        <tr>
                            <td>expeiment</td>
                            <td>A<sup>+</sup></td>
                            <td>A</td>
                        </tr>
            </table>
           
        </body>
    </head>
</html>

subject	john	miriam
biology	theory	A	A+
           practical	A	A+
            expeiment	A	A
zoology	theory	A	A+
            practical	A+	A
            expeiment	A	A
cryptoloy	theory	A+	A
             practical	A	A_
            expeiment	A+	A


=======================================================================================================================
<!DOCTYPE html>
<html>
<head>
<tittle>welcome to bitlabs</tittle>

</head>
<body>
    <table border="2">
        <th colspan="3">sub</th>
        <th>john</th>
        <th>maria</th>
        <tr>
             <td rowspan="3">k</td>
             <tr>
                <td rowspan="2">c</td>
                  <td>y</td>
                   <td>a+</td>
                    <td>a</td>
                  <tr>
                   <td>z</td>
                   <td>a</td>
                    <td>a</td>
                  </tr>
                 
                 <tr>
                  <td rowspan="2"> B</td>
                  <td>y</td>
                   <td>a+</td>
                  <td>a</td>
                  <tr>
                  <td>z</td>
                  <td>a</td>
                 <td>a</td>
                </tr>
                <tr>
                    <td rowspan="2"> Z</td>
                    <td>y</td>
                    <td>a+</td>
                     <td>a</td>
                     <tr>
                     <td>z</td>
                     <td>a</td>
                    <td>a</td>
                   </tr>
            </tr> 
         </tr>
        
       

    </table>
</body>
</html>
=================================================================================================================================================

import java.util.*;
class InsufficientFundsException extends Exception{
  public InsufficientFundsException(String message) {
        super(message);
    }
}
public class Prog{
  public static void main(String args[]){
    double bal;
    double tot_bal;
    double w_amt;
    double d_amt;
    Scanner sc=new Scanner(System.in);
    try{
    System.out.println("Enter your account balance");
    bal=sc.nextDouble();
    System.out.println("Enter amount to deposit");
    d_amt=sc.nextDouble();
    tot_bal=d_amt+bal;
    bal=tot_bal;
    System.out.println("account bal after depositing: "+bal);
    System.out.println("Enter amount to withdraw");
    w_amt=sc.nextDouble();
    if(w_amt>bal)
      throw new InsufficientFundsException("withdraw amount should not be more than your balance");
    else
    tot_bal=bal-w_amt;
    
    bal=tot_bal;
    System.out.println("Account balance after withdrawl is "+bal);
    }
    catch(InsufficientFundsException e){
      System.out.println(e.getMessage());
    }
    
}
}
============================================================================================================================================================
<!DOCTYPE html>
<html>
<head>
<tittle>welcome to bitlabs</tittle>

</head>
<body>
    <table border="2" cellspacing="20">
      <tr>
        <th colspan="3">sub</th>
        <th>john</th>
        <th>maria</th>
      </tr>
          <tr><td rowspan="9">k</td>
          <tr>
            <td rowspan="2">c</td>
              <td>y</td>
               <td>a+</td>
                <td>a</td>
              <tr>
               <td>z</td>
               <td>a</td>
                <td>a</td>
              </tr>
              <tr>
                <td rowspan="2">c</td>
                  <td>y</td>
                   <td>a+</td>
                    <td>a</td>
                  <tr>
                   <td>z</td>
                   <td>a</td>
                    <td>a</td>
                  </tr>
                  <tr>
                    <td rowspan="2">c</td>
                      <td>y</td>
                       <td>a+</td>
                        <td>a</td>
                      <tr>
                       <td>z</td>
                       <td>a</td>
                        <td>a</td>
                      </tr>
                </tr>  
    </table>
</body>
</html>
=========================================================================================================================================
<!DOCTYPE html>
<html>
    <head>
    </head>
        <body>
           
            <form name="aryanjob">
                <fieldset>
                <legend align="center"> job file </legend>
                firstname:<input type="text" name="txt" size="30" disabled>
                firstname:<input type="text" name="txt" size="30" required>
                lastname:<input type="text" name="txt" size="30" required>
               
                  
                        <input type="date" name="name" ><br>
                        <input type="time" name="name" ><br>
                        <input type="datetime" name="name" ><br>
                        <input type="color" name="name" ><br>
                        <input type="datetime-local" name="name" ><br>
                        <input type="email" name="name" ><br>
                        <input type="url" name="name" ><br>
                        <input type="number" name="name" ><br>
                        <input type="number" name="name" max="20" min="1"><br>
                        <input type="range" name="name" max="20" min="1"><br>
                        <input type="file" name="name" ><br>
<iframe src="https://www.youtube.com/watch?v=_B6T8O15Ohk" width="50" height="50" frameborder="no"></iframe>
                        <h5>select your district</h5>
                    <input list="dist" name="districts">
                    <datalist id="dist">
                       < option value="krishna"></option>
                       < option value="guntur"></option>
                       < option value="kadapa"></option>
                    </datalist>
                <br>
                password:<input type="password" name="pwd" value="bitlabs">
                <br>
                confirmpassword:<input type="password" name="pwd" placeholder="enter password">
              
                <h4>SELECT YOUR GENTER PLEASE</h4>
                <input type="radio" name="m" value ="male">MALE
                <input type="radio" name="m" value ="female">FEMALE<br>
                <h4>enter YOUR qualification PLEASE</h4>
                <input type="checkbox" name="ch" value ="tenth">tenth<br>
                <input type="checkbox" name="ch" value ="inter">inter<br>
                <input type="checkbox" name="ch" value ="b.tech">b.tech<br>
                <input type="checkbox" name="ch" value ="m.tech">m.tech<br>
                <input type="checkbox" name="ch" value ="phd">phd<br>
                <br>
                <select name="s1">
                    <option value="vijayawada" selected>vijayawada</option>
                    <option value="guntur">guntur</option>
                    <option value="kakinada">kakinada</option>
                </select>
                <select name="s2" multiple>
                    <option value="java">java</option>
                    <option value="phyton">phyton</option>
                    <option value="php">php</option>
                </select>
                <br>
                <br>
                <h4>ADDRESS</h4>
                <br>
                <textarea name="name" rows="3" cols="5" placeholder="(=o_o=)(=o_o=)(=o_o=)"></textarea>
                <br>
                <textarea name="add" >bitlabs</textarea> 
                <br>
                <textarea name="name" rows="3" cols="5" placeholder="(=o_o=)(=o_o=)(=o_o=)"></textarea>
                <br>
                <input type="text" name="text" required>
                <br>
                <h2>push button</h2>
                <input type="button" name="name" value="push Button">
                <br>
                <h2>submit button</h2>
                <input type="submit" name="name" value="submit">
                <br>
                <h2>push button</h2>
                <input type="reset" name="name" value="reset">
            </form>
        </body>
   
    </fieldset>
    
</html>
======================================================================================================================================================

css
==============================================================================================================
<!DOCTYPE html>
<html>
<head>
    <title>welcome to bitlabs</title>
<h4 style=color:blue;text-align:justify;font-size:40px;border:5px,solidgreen;padding:15px>aryan</h4>
<h5 style="color:green;text-align:center;">welcome</h5>
<h4 style="color:blue;font-size:40px;border:5px,solidgreen;padding:15px;text-shadow:5px 5px 5px gray;">aryan</h4>
<h4 style="color:blue;font-size:40px;border:5px,solidgreen;padding:15px;border:5px;box-shadow:5px 5px 5px gray;">aryan</h4>

</head>
<body></body>
</html>
==================================================================
<!DOCTYPE html>
<html>
    <head>
<style type="text/css">
    body{background-color: rgb(201, 76, 18);font-size: 5;}
    h2{color:brown;text-align: center;font-size: 50px;}
    p{color: chartreuse;text-align: justify;font-size: 40px;border: 8px saddlebrown;padding: 10px;box-shadow: 5px 5px 5px cornflowerblue;}
</style>
    </head>
    <body>
      <h2><tittle>welcome to bitlabs</tittle></h2>  
        <h2>aryankumar</h4>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>

    </body>
</html>
============================================

body{background-color: rgb(201, 76, 18);font-size: 5;}
h2{color:brown;text-align: center;font-size: 50px;}
p{color: chartreuse;text-align: justify;font-size: 40px;border: 8px saddlebrown;padding: 10px;box-shadow: 5px 5px 5px cornflowerblue;}


<!DOCTYPE html>
<html>
    <head>
<link rel="stylesheet" type="text/css" href="external.css">
    </head>
    <body>
      <h2><tittle>welcome to bitlabs</tittle></h2>  
        <h2>aryankumar</h4>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p>India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>

    </body>
</html>
=============================================================



<!DOCTYPE html>
       <head>
              <title>Welcome to My Webite</title>
     <style type="text/css">
    #b1
    {
        background-color:skyblue;
    }
   #head1
    {
        color:red;
        text-align:center;
        font-size:60px;
     }  
    #head2
    {
        color:orange;
        text-align:center;
        font-size:50px;
     } 
    #para1,#para2,#para3
    {
        color:maroon;
        text-align:justify;
        font-size:40px;
     } 
    </style>
      </head>
      <body id="b1">
               <h1 id="head1">WELCOME TO CSS</h1>
                <h2 id="head2">Spring</h2>
<p id="para1">
Spring Framework is an open-source Java-based framework that provides a comprehensive infrastructure for developing Java applications. It was created by Rod Johnson in 2003 and is currently maintained by Pivotal Software, which is a subsidiary of VMware.The Spring Framework is designed to simplify the development of enterprise-level applications by providing a modular approach to building complex software. It includes various modules that can be used independently or in combination to build applications, such as Spring Core, Spring MVC, Spring Data, Spring Security, and many more.
</p>
<p id="para2">
The Spring Framework promotes the use of dependency injection and inversion of control (IoC) to manage the components of an application. It also provides support for aspect-oriented programming (AOP), which enables the separation of cross-cutting concerns such as logging, security, and caching from the business logic.Some of the benefits of using Spring Framework include faster development time, easier maintenance, better scalability, and improved testability. It is widely used in the industry and has a large and active community of developers.      </p>
<p id="para2">
The Spring Framework promotes the use of dependency injection and inversion of control (IoC) to manage the components of an application. It also provides support for aspect-oriented programming (AOP), which enables the separation of cross-cutting concerns such as logging, security, and caching from the business logic.Some of the benefits of using Spring Framework include faster development time, easier maintenance, better scalability, and improved testability. It is widely used in the industry and has a large and active community of developers.      </p>
     </body>
</html>
================================================================================================================================
<!DOCTYPE html>
<html>
    <head>
        <tittle  text-align:center><h3>welcome to bitlabs</h3></tittle>
        <style type="text/css">
            #b1
            {
                 background-color: aquamarine;
            }
            #head1
            {
                color :orange;
                text-align: center;
                font-size: 50px;

            }
            #head2
            {
                color :rgb(163, 113, 22);
                text-align: center;
                font-size: 50px;

            }
            #para1,#para2#para3
{
    color: burlywood;
    text-align: justify;
    font-size: 30px;
}
        </style>
    </head>
    <body id="b1">welcome to bitlabs
        <p id="head1">India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p id="b1"> India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p id="para3">India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p id="head1">India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
<h4 id="head2">my name is pavankalyan</h4>
    </body>
</html>
=====================================================================================================

<!DOCTYPE html>
<html>
    <head>
        <tittle  text-align:center><h3>welcome to bitlabs</h3></tittle>
        <style type="text/css">
            .b1
            {
                 background-color: aquamarine;
            }
            .head1
            {
                color :orange;
                text-align: center;
                font-size: 50px;

            }
          h4.head2
            {
                color :rgb(163, 113, 22);
                text-align: center;
                font-size: 50px;

            }
            .para1,.para2,.para3
{
    color: burlywood;
    text-align: justify;
    font-size: 30px;
}
        </style>
    </head>
    <body class="head2">welcome to bitlabs
        <p class="head1">India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p class="b1"> India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p class="para3">India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
        <p class="head1">India, officially the Republic of India (Hindi: Bhārat Gaṇarājya), is a country in South Asia. It is the seventh-largest country by area, in 2023 it set to be the most populous country in the world, and the most populous democracy in the world. Bounded by the Indian Ocean on the south, the Arabian Sea on the southwest,</p>
<h4 class="head2">my name is pavankalyan</h4>
    </body>
</html>
============================================================================================================


<!DOCTYPE html>
<html>
    <head>
        welcome to bitlabs
    </head>
    <body >
        <table background="mash.jpg" border="5" align="center"  width="300" heigth="250" cellpadding="50" cellspacing="10">
            <caption>companyinformation</caption>
                <tr>
                    <th >company</th>
                    <th>name</th>
                    <th>phoneno</th>
                </tr>
                <tr>
                    <td>symphonise</td>
                    <td>pavan</td>
                    <td>65988</td>
                </tr>
                <tr>
                    <td>bitlabs</td>
                    <td>kumar</td>
                    <td>69088</td>
                </tr>
                <tr>
                    <td>tekworks</td>
                    <td>aryan</td>
                    <td>68494</td>
                </tr>
                
            
        </table>
    </body>
</html>
====================================================================================================================
[2:33 PM] Karunakar Eeede
    <!DOCTYPE html>
       <head>
              <title>Welcome to My Webite</title>
     <style type="text/css">
    #b1
    {​​
        background-color:skyblue;
    }​​
   #head1
    {​​
        color:red;
        text-align:center;
        font-size:60px;
     }​​  
    #head2
    {​​
        color:orange;
        text-align:center;
        font-size:50px;
     }​​ 
    #para1,#para2,#para3
    {​​
        color:maroon;
        text-align:justify;
        font-size:40px;
     }​​ 
    </style>
      </head>
      <body id="b1">
               <h1 id="head1">WELCOME TO CSS</h1>
                <h2 id="head2">Spring</h2>
<p id="para1">
Spring Framework is an open-source Java-based framework that provides a comprehensive infrastructure for developing Java applications. It was created by Rod Johnson in 2003 and is currently maintained by Pivotal Software, which is a subsidiary of VMware.The Spring Framework is designed to simplify the development of enterprise-level applications by providing a modular approach to building complex software. It includes various modules that can be used independently or in combination to build applications, such as Spring Core, Spring MVC, Spring Data, Spring Security, and many more.
</p>
<p id="para2">
The Spring Framework promotes the use of dependency injection and inversion of control (IoC) to manage the components of an application. It also provides support for aspect-oriented programming (AOP), which enables the separation of cross-cutting concerns such as logging, security, and caching from the business logic.Some of the benefits of using Spring Framework include faster development time, easier maintenance, better scalability, and improved testability. It is widely used in the industry and has a large and active community of developers.      </p>
<p id="para2">
The Spring Framework promotes the use of dependency injection and inversion of control (IoC) to manage the components of an application. It also provides support for aspect-oriented programming (AOP), which enables the separation of cross-cutting concerns such as logging, security, and caching from the business logic.Some of the benefits of using Spring Framework include faster development time, easier maintenance, better scalability, and improved testability. It is widely used in the industry and has a large and active community of developers.      </p>
     </body>
</html>
​
​=================================
​[3:16 PM] Karunakar Eeede
    1.CSS TEXT FORMATTING:
------------------------------------
      1.1 Text Color:
      ------------------
         color:blue
         color:#00ff00
         color:rgb(255,0,0)
         1.2 Text Alignment
         ------------------------
        text-align:left
         text-align:center
         text-align:right
         text-align:justify
         1.3 Text Decoration:
         ------------------
         text-decoration:none;
         text-decoration:overline;
         text-decoration:line-through;
         text-decoration:underline;
         1.4 Text Transformation:
         -----------------------
         text-transform:uppercase;
         text-transform:lowercase;
         text-transform:capitalize;
         1.5Text Indentation
           -------------------
         text-indent:50px;
​[3:16 PM] 
      
      Ravi (Guest) was invited to the meeting.
      
    ​[3:39 PM] Karunakar Eeede
    2.CSS Font
----------
         2.1 CSS Font Families:
         ---------------------
          font-family:"Times New Roman", Times, serif;
         2.2 Font Style:
         --------------
         font-style:normal;
         font-style:italic;
         font-style:oblique;

         2.3 Set Font Size With Pixels,points,%
         ----------------------------------------------
       font-size:40px;
       font-size:10pt;
       font-size:110%;
         2.4 Set Font Size With Em
         ---------------------------------
         font-size:2.5em; /* 40px/16=2.5em */
         font-size:1.875em; /* 30px/16=1.875em */
         font-size:0.875em; /* 14px/16=0.875em */
         2.5 Font Varient:
         --------------------
       font-variant:small-caps;
       font-variant:normal
         2.6 Font Weight:
         ---------------
         font-weight:normal
      font-weight:bold 
      font-weight:bolder
      font-weight:lighter
      font-weight:900
​[3:51 PM] Karunakar Eeede
    <!DOCTYPE html>
       <head>
              <title>Welcome to My Webite</title>
     <style type="text/css">
   h1.head1
    {​​
        color:red;
        text-align:center;
            font-family:Tw Cen MT;
         font-style:oblique;
       font-size:2.5em; 
      font-weight:lighter;
     }​​  
    h2.head2
    {​​
        color:#0000FF;      
        text-align:right;
        font-family:Viner Hand ITC;
     }​​ 
    p.para1,p.para2,p.para3
    {​​
        color:rgb(125,23,132);
        text-align:justify;
      font-style:italic;
      font-size:2.5em; 
      font-variant:small-caps;
      font-weight:bolder;
     }​​ 
     a
     {​​
          color:red;
          text-decoration:none;
      }​​
    </style>
      </head>
      <body class="b1">
       <a href="https:www.google.com" target="_new">GOOGLE WEBSITE</a>
               <h1 class="head1">WELCOME TO CSS</h1>
                <h2 class="head2">Spring</h2>
<p class="para1">
Spring Framework is an open-source Java-based framework that provides a comprehensive infrastructure for developing Java applications. It was created by Rod Johnson in 2003 and is currently maintained by Pivotal Software, which is a subsidiary of VMware.The Spring Framework is designed to simplify the development of enterprise-level applications by providing a modular approach to building complex software. It includes various modules that can be used independently or in combination to build applications, such as Spring Core, Spring MVC, Spring Data, Spring Security, and many more.
</p>
<p class="para2">
The Spring Framework promotes the use of dependency injection and inversion of control (IoC) to manage the components of an application. It also provides support for aspect-oriented programming (AOP), which enables the separation of cross-cutting concerns such as logging, security, and caching from the business logic.Some of the benefits of using Spring Framework include faster development time, easier maintenance, better scalability, and improved testability. It is widely used in the industry and has a large and active community of developers.      </p>
<p class="para2">
The Spring Framework promotes the use of dependency injection and inversion of control (IoC) to manage the components of an application. It also provides support for aspect-oriented programming (AOP), which enables the separation of cross-cutting concerns such as logging, security, and caching from the business logic.Some of the benefits of using Spring Framework include faster development time, easier maintenance, better scalability, and improved testability. It is widely used in the industry and has a large and active community of developers.      </p>
     </body>
</html>

=============================================================================================================================================

5.CSS Lists

------------

 

    5.1 Different List Item Markers

    --------------------------------

      list-style-type: none;

      list-style-type: disc;

      list-style-type: circle;

         list-style-type: square;

 

         list-style-type: upper-roman;

         list-style-type: lower-alpha; 

 

armenian : The marker is traditional Armenian numbering

 

decimal:      The marker is a number (1,2,3,4….)

 

decimal-leading-zero: The marker is a number padded by initial zeros                                                   (01, 02, 03, etc.)

 

georgian: The marker is traditional Georgian numbering (an, ban, gan,                                                                etc.)

 

lower-alpha: The marker is lower-alpha (a, b, c, d, e, etc.)

 

lower-greek: The marker is lower-greek (alpha, beta, gamma, etc.)

 

lower-latin: The marker is lower-latin (a, b, c, d, e, etc.)

 

lower-roman:        The marker is lower-roman (i, ii, iii, iv, v, etc.)

 

upper-alpha: The marker is upper-alpha (A, B, C, D, E, etc.)

 

upper-latin: The marker is upper-latin (A, B, C, D, E, etc.)

 

upper-roman:        The marker is upper-roman (I, II, III, IV, V, etc.)

    

     5.2 CSS list-style-image Property

     ----------------------------------

    

         list-style-image:url("/images/blueball.gif");
==========================================================================================
6.CSS BORDER Properties :

-----------------------

         6.1 Border Style:

      ----------------         

            border-style:none

            border-style:dotted

           border-style:dashed

            border-style:solid

            border-style:double

            border-style:groove

            border-style:ridge 

        

            border-left-style:

            border-right-style:

            border-top-style:

            border-bottom-style:

 

            border-style:dotted solid double dashed;

                      top border is dotted

                       right border is solid

                       bottom border is double

                      left border is dashed 

    

 

     6.2 Border Width:

     -----------------

 

            border-width:5px;

            border-width:medium;

            border-width:thick;

            border-width:thin; 

            border-width:length;

 

            border-left-width:

            border-right-width:

            border-top-width:

            border-bottom-width:

 

     6.3 Border Color:

     -----------------

 

            border-color:red;

              border-color:#98bf21;  

            border-color:rgb(255,0,0);

              

            border-left-color:

            border-right-color:

            border-top-color:

            border-bottom-color:       

      

      6.4 Border - Shorthand property

       -------------------------------

 

            border:5px solid red;

 

      6.5 Border - Radius Property     

      ------------------------------------ 

            border-radius:25px;

            

            box-shadow:5px 5px 5px #000000;
============================================================================================================

7.CSS Margin

------------

      

      7.1 Margin - Individual sides

      ----------------------------- 

        margin-top:100px;

         margin-bottom:100px;

         margin-right:50px;

         margin-left:50px;

 

      7.2 Margin - Shorthand property

      -------------------------------

 

       margin:25px 50px 75px 100px;

                  top margin is 25px

                  right margin is 50px

                  bottom margin is 75px

                  left margin is 100px 

 
============================================================================================================================================================================================================================================================================================
        

8.CSS Padding

-------------

 

      8.1 Padding - Individual sides

      ------------------------------

 

        padding-top:25px;

           padding-bottom:25px;

           padding-right:50px;

           padding-left:50px;

 

      8.2 Padding - Shorthand property

      --------------------------------

  

        padding:25px 50px 75px 100px;

                  top padding is 25px

                  right padding is 50px

                  bottom padding is 75px

                  left padding is 100px
============================================================================================================================================


<!DOCTYPE html>
<head>
<title>Welcome to My Webite</title>
<style type="text/css">
    .apdiv1
    {
        width:300px;
        height:360px;
        border:1px solid orange;
        font-size:18px;
        text-align:justify; 
        color:white;
       background-color:green;
      margin-left:100px;
      margin-top:100px;
      padding:10px;
      box-shadow:-5px -5px 5px gray,5px 5px 5px gray;
      text-shadow:5px 5px 5px black;
     border-radius:20px;
       position:absolute;
     } 
   .apdiv2
    {
        width:300px;
        height:360px;
        border:1px solid orange;
        font-size:18px;
        text-align:justify; 
        color:white;
       background-color:green;
      margin-left:500px;
      margin-top:200px;
      padding:10px;
      box-shadow:-5px -5px 5px gray,5px 5px 5px gray;
      text-shadow:5px 5px 5px black;
     border-radius:20px;
     position:absolute;
     } 
</style>
</head>
<body>

<div class="apdiv1">
Spring Framework is an open-source Java-based framework that provides a comprehensive infrastructure for developing Java applications. It was created by Rod Johnson in 2003 and is currently maintained by Pivotal Software, which is a subsidiary of VMware.The Spring Framework is designed to simplify the development of enterprise-level applications by providing a modular approach to building complex software. It includes various modules that can be used independently or in combination to build applications, such as Spring Core, Spring MVC, Spring Data, Spring Security, and many more.
</div>
<div class="apdiv2">
Spring Framework is an open-source Java-based framework that provides a comprehensive infrastructure for developing Java applications. It was created by Rod Johnson in 2003 and is currently maintained by Pivotal Software, which is a subsidiary of VMware.The Spring Framework is designed to simplify the development of enterprise-level applications by providing a modular approach to building complex software. It includes various modules that can be used independently or in combination to build applications, such as Spring Core, Spring MVC, Spring Data, Spring Security, and many more.
</div>

 

     </body>
</html>

 

============================================================================================================================================================================================================================================================================================
import java.io.*;

public class  ConvertIntoSwapCase{
    public static void main(String[] args) {
        try {
            // Open the input and output files
            FileInputStream inputFile = new FileInputStream("input.txt");
            FileOutputStream outputFile = new FileOutputStream("output.txt");

            // Read from the input file and write to the output file
            int data;
            while ((data = inputFile.read()) != -1) {
                // Convert the character to swap case
                char character = (char) data;
                if (Character.isUpperCase(character)) {
                    character = Character.toLowerCase(character);
                } else if (Character.isLowerCase(character)) {
                    character = Character.toUpperCase(character);
                }

                // Write the character to the output file
                outputFile.write((int) character);
            }

            // Close the input and output files
            inputFile.close();
            outputFile.close();

            System.out.println("File contents swapped successfully.");
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
======================================================================================================================================================================================================================


import java.io.*;

public class ConvertToUpperCase {
    public static void main(String[] args) {
        try {
            // Open input and output streams
            FileInputStream inputStream = new FileInputStream("input.txt");
            FileOutputStream outputStream = new FileOutputStream("output.txt");

            // Read input file character by character and convert to uppercase
            int c;
            while ((c = inputStream.read()) != -1) {
                char character = (char) c;
                char upperCaseCharacter = Character.toUpperCase(character);
                outputStream.write(upperCaseCharacter);
            }

            // Close input and output streams
            inputStream.close();
            outputStream.close();

            System.out.println("File converted to uppercase successfully.");

        } catch (IOException e) {
            System.out.println("Error while reading or writing file: " + e.getMessage());
        }
    }
}
===================================================================================================================================================================================================================
[11:26] Karunakar Eeede




Let's write a code to create Spring container:

ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

Note that we are supplying configuration metadata via applicationContext.xml file(XML-based configuration).

AnnotationConfigApplicationContext  context = new AnnotationConfigApplicationContext(AppConfig.class);

Note that we are supplying configuration metadata via AppConfig.class file.

The most used API that implements the BeanFactory is the XmlBeanFactory.

XmlBeanFactory factory = new XmlBeanFactory (new ClassPathResource("applicationContext.xml"));

Next, how to Retrieve bean from spring container?

How to Retrieve Bean from Spring Container?

Both BeanFactory and ApplicationContext interface provides getBean() method to retrieve bean from spring container.

ApplicationContext getBean() Example:

ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml"); 

HelloWorld obj = (HelloWorld) context.getBean("helloWorld");

BeanFactory getBean() Example:

XmlBeanFactory factory = new XmlBeanFactory (new ClassPathResource("beans.xml")); 

HelloWorld obj = (HelloWorld) factory.getBean("helloWorld");



================================================================================================================================================



[11:45] Karunakar Eeede




<dependency>

    <groupId>org.springframework</groupId>

    <artifactId>spring-context</artifactId>

    <version>6.0.7</version>

</dependency>



[12:04 PM] Karunakar Eeede
    public class HelloWorld {​​
    private String message;
    public void setMessage(String message) {​​
        this.message = message;
    }​​
    public void getMessage() {​​
        System.out.println("My Message : " + message);
    }​​
}​​
​[12:12 PM] Karunakar Eeede
    Clear Teams cache in Windows
If Teams is still running, right-click the Teams icon in the taskbar, and then select Quit.Open the Run dialog box by pressing the Windows logo key  +R.In the Run dialog box, enter %appdata%\Microsoft\Teams, and then select OK.Delete all files and folders in the %appdata%\Microsoft\Teams directory.Restart Teams.

=========================================================================================================================================================================================
​[12:15 PM] Karunakar Eeede
    <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
   
<bean id="helloWorld" class="com.SpringDemo.HellowWorld.HelloWorld">
  <property name="message" value="Hello World!" />
</bean>
</beans>
​[12:22 PM] Karunakar Eeede
    import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class Application {​​
    public static void main(String[] args) {​​
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        HelloWorld obj = (HelloWorld) context.getBean("helloWorld");
        obj.getMessage();
    }​​
}​​





https://mvnrepository.com/artifact/org.springframework/spring-context/6.0.7

Maven Repository: org.springframework » spring-context » 6.0.7



================================================================================================================================================
import java.util.Scanner;
 
public class Main{
    public static void main(String[] args) {
        boolean Primenum = true;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a positive integer: ");
        int number = sc.nextInt();
        if (number <= 1) {
            Primenum = false;
        } else {
            for (int i = 2; i <= number / 2; i++) {
                if (number % i == 0) {
                    Primenum = false;
                    break;
                }
            }
        }
 
        if (Primenum) {
            System.out.println(number + " is a prime number");
        } else {
            System.out.println(number + " is not a prime number");
        }
    }
}
===============================================================================================================================================================================================================================
[4:24 PM] Mallela Vinay Kumar  (Guest)
    

import java.util.PriorityQueue;publicclassPriorityQueueExample{​​​​​​​​publicstaticvoid main(String[] args){​​​​​​​​PriorityQueue<String> queue =newPriorityQueue<String>(15,newMyComparator());
        queue.add("Tyrion Lannister");
        queue.add("Daenerys Targaryen");
        queue.add("Arya Stark");
        queue.add("Petyr 'Littlefinger' Baelish");/*
         * What I am doing here is removing the highest
         * priority element from Queue and displaying it.
         * The priority I have set is based on the string
         * length. The logic for it is written in Comparator
         */while(queue.size()!=0){​​​​​​​​System.out.println(queue.poll());}​​​​​​​​}​​​​​​​​}​​​​​​​​



​[4:25 PM] Mallela Vinay Kumar  (Guest)
    

import java.util.Comparator;
publicclassMyComparatorimplementsComparator<String>{​​​​​​​​
@Overridepublicint compare(String x,String y){​​​​​​​​
return x.length()- y.length();
}
​​​​​​​​}​​​​​​​​


=========================================================================================================================


/**************************

                        
                        

write a java program to validate username and password
username should have only alphabets and length should be in  between 8 to 12
password sholud have numericals,alphabets, special characters first letter should must capital

***************************/
import java.util.*;
class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter your username");
        String username=sc.next();
        System.out.println("enter your password");
        String password=sc.next();
         if (username.matches("^[a-zA-Z]+$") && username.length()>=8 && username.length()<=12){
             System.out.println("username is taken by compliler");
         }
         else{
             System.out.println("username must have only alphabets and length must between in 8 to 12");
         }
         int alphacount=0,spcharcount=0,numcount=0;
         if(password.charAt(0)>='A' && password.charAt(0)<='Z'){
         for(int i=1;i<password.length();i++){
             char ch=password.charAt(i);
            if(ch>='a' && ch<='z' ){
                alphacount++;
            }
            else if(ch>='0' && ch<='9'){
                spcharcount++;
            }
            else{
                numcount++;
            }
         }
         if(alphacount>=1 && spcharcount>=1 && numcount>=1){
            System.out.println("password is taken by compliler"); 
         }
         else{
             System.out.println("your password must have one character, one number, one special character");
         }
         }
         else{
             System.out.println("your password must have first character capital");
         }
    }
    
}
=========================================================================================================================
[2:31 PM] Karunakar Eeede
    public class Employee {​​  
private int id;  
private String name;  
private String city;  
  
public int getId() {​​  
    return id;  
}​​  
public void setId(int id) {​​  
    this.id = id;  
}​​  
public String getName() {​​  
    return name;  
}​​  
public void setName(String name) {​​  
    this.name = name;  
}​​  
  
public String getCity() {​​  
    return city;  
}​​  
public void setCity(String city) {​​  
    this.city = city;  
}​​  
void display(){​​  
    System.out.println(id+" "+name+" "+city);  
}​​  
  
}​​  
=============================================================================================================================================
​[2:37 PM] Karunakar Eeede
    <bean id="obj" class="packagename..Employee">  
<property name="id">  
<value>20</value>  
</property>  
<property name="name">  
<value>Arun</value>  
</property>  
<property name="city">  
<value>ghaziabad</value>  
</property>  
  
</bean>  
​[2:52 PM] Karunakar Eeede
    <bean id="address1" class="com.packagename.Address">  
<property name="street" value="51,Lohianagar"></property>  
<property name="city" value="Ghaziabad"></property>  
<property name="state" value="UP"></property>  
<property name="country" value="India"></property>  
</bean>  
=============================================================================================================================================
​[3:08 PM] Karunakar Eeede
    public String toString(){​​  
    return street+" "+city+" "+state+" "+country;  
}​​  
=============================================================================================================================================

package helloworld;

public class Address {
	private String street;
	private String city,state,country;
	public String getStreet() {
		return street;
	}
	public void setStreet(String street) {
		this.street = street;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getState() {
		return state;
	}
	public void setState(String state) {
		this.state = state;
	}
	public String getCountry() {
		return country;
	}
	public void setCountry(String country) {
		this.country = country;
	}
	public String toString(){  
	    return street+" "+city+" "+state+" "+country;  
	}  
}



package helloworld;


public class Employees {
private int id;  
private String name;  
private String city;  
private Address Add;
public Address getAdd() {
	return Add;
}
public void setAdd(Address add) {
	Add = add;
}
public int getId() { 
return id;  
}
public void setId(int id) {  
this.id = id;  
} 
public String getName() {  
return name;  
} 
public void setName(String name) {  
this.name = name;  
}  

public String getCity() {  
return city;  
} 
public void setCity(String city) {
this.city = city;  
}  
void display(){ 
System.out.println(id+" "+name+" "+city+" "+Add);  
}  

}  

 





package helloworld;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class App {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("application.xml");
        Employees obj1 = (Employees)context.getBean("obj");
       obj1.display();
        Question q1=(Question)context.getBean("qu");
        q1.display();
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
<bean id="qu" class="helloworld.Question">
<property name="qid" value="1"></property>
<property name="qname" value="What is HTML?"></property>
<property name="answers">
	<list>
		<value>It's a hyper text markup language</value>
		<value>It's a Scripting language</value>
		<value>It is a programming language</value>
	</list>
</property>
</bean>
<bean id="add" class="helloworld.Address">
<property name="street" value="bhavani">
</property>
<property name="city" value="vij">
</property>
<property name="state" value="ap">
</property>
<property name="country" value="kolkata">
</property>
</bean> 

<bean id="obj" class="helloworld.Employees"> 

<property name="id">  
<value>20</value>  
</property>  
<property name="name">  
<value>Arun</value>  
</property>  
<property name="city">  
<value>ghaziabad</value>  
</property>  
  <property name="Add" ref="add">
</property>
</bean>  
</beans>
==========================================================================================================================

public class Student {
  int Stuno;
  String StuName;
  double StuAvg;
  test t;
  public Student(int Stuno,String StuName,double StuAvg,test t) {
	  super();
	  this.Stuno=Stuno;
	  this.StuName=StuName;
	  this.StuAvg=StuAvg;
	  this.t=t;
	  
  }
  public String toString() {
      return  Stuno + StuName + StuAvg + t.toString();
  }
}

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:p="http://www.springframework.org/schema/p"
  xsi:schemaLocation="
      http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/beans/spring-context.xsd">
        <bean class="Com.SpringDemo5.test" name="testc" > 
        <constructor-arg value="100" type="int"></constructor-arg> 
        </bean>
        <bean class="Com.SpringDemo5.Student" name="cons" >
        
          <constructor-arg value="30"></constructor-arg> 
        <constructor-arg value="nagendra"></constructor-arg>
         <constructor-arg value="65.5"></constructor-arg>
         <constructor-arg ref="testc" type="test"></constructor-arg>
        </bean> 
        </beans>


 package Com.SpringDemo5;

public class test {
	int d;
public test(int d) {
	      super();
	      this.d = d;
	}
}


 package Com.SpringDemo5;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App 
{
	public static void main(String[] args )
    {

    	 ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

         Student obj = (Student)context.getBean("cons");
         System.out.println(obj);
    }
}

============================================================================================================================
Autowiring feature of spring framework enables you to inject the object dependency implicitly. It internally uses setter or constructor injection.
Autowiring can't be used to inject primitive and string values. It works with reference only.
Advantage of Autowiring
It requires the less code because we don't need to write the code to inject the dependency explicitly.
Disadvantage of Autowiring
No control of programmer.
It can't be used for primitive and string values.
Autowiring Modes
There are many autowiring modes:
 


No.

Mode

Description


1)

no

It is the default autowiring mode. It means no autowiring bydefault.


2)

byName

The byName mode injects the object dependency according to name of the bean. In such case, property name and bean name must be same. It internally calls setter method.


3)

byType

The byType mode injects the object dependency according to type. So property name and bean name can be different. It internally calls setter method.


4)

constructor

The constructor mode injects the dependency by calling the constructor of the class. It calls the constructor having large number of parameters.


1. Autowiring ‘no’:
This is a default autowiring mode. It means
no
 autowiring.
 
<bean id="department" class="guru.springframework.autowiringdemo.Department">
  <property name="deptName" value="Information Technology" />
</bean>
<bean id="employee" class="guru.springframework.autowiringdemo.Employee"></bean>
2. Autowiring ‘byName’:
This option enables autowire based on bean names. Spring looks up the configuration file for a matching bean name. If found, this bean is injected in the property. However, if no such bean is found, an error is raised.
In this case, the name of the
department
bean is same as the
employee
bean’s property (
Department
), so Spring will be autowired to it via the setter method –
setDepartment(Department department)
.
 
<bean id="department" class="guru.springframework.autowiringdemo.Department">
  <property name="deptName" value="Information Technology" />
</bean>
<bean id="employee" class="guru.springframework.autowiringdemo.Employee" autowire="byName"></bean>
3. Autowiring ‘byType’:
This option enables the autowire based on bean type. It searches property’s class type in configuration file. It injects the property, if such bean is found, otherwise an error is raised.
In this case, the data type of the
department
bean is same as the data type of the
employee
bean’s property (
Department
object), therefore Spring will autowire it via the setter method –
setDepartment(Department department)
.
 
<bean id="department" class="guru.springframework.autowiringdemo.Department">
  <property name="deptName" value="Information Technology" />
</bean>
<bean id="employee" class="guru.springframework.autowiringdemo.Employee" autowire="byType"></bean> 

===============================================================================================================

BeanFactory factory = new XmlBeanFactory(new ClassPathResource("spring.xml"));
==============================================================================================================

Auto wiring

package helloworld;
import org.springframework.context.ApplicationContext;
import org.springframework.*;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App1 {

 public static void main(String[] args) {       
     ApplicationContext context = new ClassPathXmlApplicationContext("app4.xml");       
    
     
     Emp1 obj3= (Emp1)context.getBean("obj3");
     obj3.setId(168);
     obj3.setName("pavankalyan");
     obj3.setCity("vijayawada");
     
     obj3.display();
     
    
 }
}


package helloworld;

public class Emp1 {
private int id;
private String name;
private String city;
private Address Add;
private Question qa;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getCity() {
	return city;
}
public void setCity(String city) {
	this.city = city;
}
public Address getAdd() {
	return Add;
}
public void setAdd(Address add) {
	Add = add;
}
public Question getQa() {
	return qa;
}
public void setQa(Question qa) {
	this.qa = qa;
}
public void display() {
	System.out.println("EmployeeID : "+id);
	System.out.println("EmployeeName : "+name);
	System.out.println("EmployeeCity : "+city);
	System.out.println("Address : " +Add);
	qa.display();
}


}



<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
 <bean id="qu" class="helloworld.Question">
<property name="qid" value="1"></property>
<property name="qname" value="What is HTML?"></property>
<property name="answers">
	<list>
		<value>It's a hyper text markup language</value>
		<value>It's a Scripting language</value>
		<value>It is a programming language</value>
	</list>
</property>
</bean>
<bean id="add" class="helloworld.Address">
<property name="street" value="bhavani">
</property>
<property name="city" value="vij">
</property>
<property name="state" value="ap">
</property>
<property name="country" value="kolkata">
</property>
</bean>    
<bean id="obj3" class="helloworld.Emp1" autowire="byType">
 
<property name="id">
<value>16</value>
</property>
<property name="name">
<value>Pavankalyan</value>
</property>
<property name="city">
<value>vijayawada</value>
</property>


</bean>
</beans>


===================================================================================================================================
package SetterRe;
 
public class B {
int n;
 
public int getn() {
     return n;
}
 
public void setn(int n) {
     this.n = n;
}
}
package SetterRe;
 
public class A {
int m;
B b;
public int getm() {
     return m;
}
public void setm(int m) {
     this.m = m;
}
public B getb() {
     return b;
}
public void setb(B b) {
     this.b = b;
}
public A() {
     super();
     // TODO Auto-generated constructor stub
}
@Override
public String toString() {
     return "A [m=" + m + ", B=" + b + "]";
}
 
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:p="http://www.springframework.org/schema/p"
   xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/beans/spring-context.xsd">
        
       <bean class="SetterRe.B"name="br" >
       <property name="n"value="45" ></property>
        </bean>
        <bean class="SetterRe.A"name="ar">
        <property name="m"value="55" ></property>
        <property name="b">
        <ref bean="br"/></property>
        </bean>
 
    </beans>   
package SetterRe;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
import SetterLiCoRe.Emp;
 
public class ANBMain {
 
     public static void main(String[] args) {
           ApplicationContext ap=new ClassPathXmlApplicationContext("SetterRe/Reconfigure.xml");
           B b1= (B) ap.getBean("br");
           A a1= (A) ap.getBean("ar");
           System.out.println(b1.getn());
           System.out.println(a1.getm());
           System.out.println(a1.getb().getn());
 
     }
 
}
======================================================================================================
package SetterRe;
 
public class B {
int n;
 
public int getn() {
     return n;
}
 
public void setn(int n) {
     this.n = n;
}
}
package SetterRe;
 
public class A {
int m;
B b;
public int getm() {
     return m;
}
public void setm(int m) {
     this.m = m;
}
public B getb() {
     return b;
}
public void setb(B b) {
     this.b = b;
}
public A() {
     super();
     // TODO Auto-generated constructor stub
}
@Override
public String toString() {
     return "A [m=" + m + ", B=" + b + "]";
}
 
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:p="http://www.springframework.org/schema/p"
   xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/beans/spring-context.xsd">
        
       <bean class="SetterRe.B"name="br" >
       <property name="n"value="45" ></property>
        </bean>
        <bean class="SetterRe.A"name="ar">
        <property name="m"value="55" ></property>
        <property name="b">
        <ref bean="br"/></property>
        </bean>
 
    </beans>   
package SetterRe;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 
import SetterLiCoRe.Emp;
 
public class ANBMain {
 
     public static void main(String[] args) {
           ApplicationContext ap=new ClassPathXmlApplicationContext("SetterRe/Reconfigure.xml");
           B b1= (B) ap.getBean("br");
           A a1= (A) ap.getBean("ar");
           System.out.println(b1.getn());
           System.out.println(a1.getm());
           System.out.println(a1.getb().getn());
 
     }
 
}
=========================================================================================================
Algorithm:
QUICKSORT (array A, start, end)     1 if (start < end)    3 p = partition(A, start, end) 5 QUICKSORT (A, p + 1, end)   } {  2 { 4 QUICKSORT (A, start, p - 1)   6 }  
Partition Algorithm:
The partition algorithm rearranges the sub-arrays in a place.
PARTITION (array A, start, end)     1 pivot ? A[end]     3 for j ? start to end -1 {  5 then i ? i + 1     7  }}   9 return i+1 {  2 i ? start-1     4 do if (A[j] < pivot) {    6 swap A[i] with A[j]   8 swap A[i+1] with A[end]    }  

Suppose you are developing a simple calculator application in Java using Spring Framework. You have created a CalculatorService class that handles arithmetic operations, such as addition, subtraction, multiplication, and division. The CalculatorService class has a dependency on a MathService interface, which is responsible for performing the arithmetic operations.
You want to use Spring Framework to manage the dependencies in your application. You decide to use setter injection with autowiring to inject the MathService instance into the CalculatorService class.
Here's the question:
Define a MathService interface with methods to perform addition, subtraction, multiplication, and division operations.Define a MathServiceImpl class that implements the MathService interface and performs the arithmetic operations.Define a CalculatorService class with setter methods to inject the MathService instance and methods to perform arithmetic operations.Use Spring Framework annotations to configure the CalculatorService class for setter injection with autowiring.Write a sample client code that uses the CalculatorService class to perform arithmetic operations.
Hint: Use the @Autowired annotation to inject the MathService instance into the CalculatorService class.

<bean id="mathService" class="com.example.MathServiceImpl"/>
 
    <bean id="calculatorService" class="com.example.CalculatorService">
        <property name="mathService" ref="mathService"/>
    </bean>

public interface MathService {
    public double add(double a, double b);
    public double subtract(double a, double b);
    public double multiply(double a, double b);
    public double divide(double a, double b);
}
 
@Service
public class MathServiceImpl implements MathService {
 
    @Override
    public double add(double a, double b) {
        return a + b;
    }
 
    @Override
    public double subtract(double a, double b) {
        return a - b;
    }
 
    @Override
    public double multiply(double a, double b) {
        return a * b;
    }
 
    @Override
    public double divide(double a, double b) {
        if (b == 0) {
            throw new ArithmeticException("Cannot divide by zero!");
        }
        return a / b;
    }
 
}
 
@Service
public class CalculatorService {
 
    private MathService mathService;
 
    @Autowired
    public void setMathService(MathService mathService) {
        this.mathService = mathService;
    }
 
    public double add(double a, double b) {
        return mathService.add(a, b);
    }
 
    public double subtract(double a, double b) {
        return mathService.subtract(a, b);
    }
 
    public double multiply(double a, double b) {
        return mathService.multiply(a, b);
    }
 
    public double divide(double a, double b) {
        return mathService.divide(a, b);
    }
}
 
public class CalculatorClient {
 
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        CalculatorService calculatorService = context.getBean(CalculatorService.class);
 
        double a = 10.0, b = 5.0;
 
        System.out.println("Addition result: " + calculatorService.add(a, b));
        System.out.println("Subtraction result: " + calculatorService.subtract(a, b));
        System.out.println("Multiplication result: " + calculatorService.multiply(a, b));
        System.out.println("Division result: " + calculatorService.divide(a, b));
    }
 
}
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd">
 
    <context:component-scan base-package="com.example"/>
 
    <bean id="mathService" class="com.example.MathServiceImpl"/>
 
    <bean id="calculatorService" class="com.example.CalculatorService">
        <property name="mathService" ref="mathService"/>
    </bean>
 
</beans>
 ============================================================================================================================================================

Suppose you have a Spring application that manages a list of books for a small library. You have a BookService class that provides business logic for managing books, and you want to use Spring's autowiring feature to automatically inject a BookDAO dependency into BookService using setter injection.
Create a BookDAO interface with methods to retrieve and save book data.Implement the BookDAO interface with a MockBookDAO class that stores book data in memory.Create a BookService class with a private BookDAO property and a setter method for the BookDAO dependency.Use the @Autowired annotation on the setter method to enable autowiring for the BookDAO dependency.In your Spring configuration file, define the MockBookDAO bean and enable component scanning for the BookService class.Instantiate the BookService bean and use it to perform business logic on book data.
Now, here's your scenario-based question:
Suppose you have two implementations of the BookDAO interface - MockBookDAO and DatabaseBookDAO. How would you configure Spring to inject a specific implementation of BookDAO into BookService using autowiring with setter injection?




[2:40 PM] Karunakar Eeede
    public class Book {​​
    private String title;
    private String author;
    
    public Book(String title, String author) {​​
        this.title = title;
        this.author = author;
    }​​
    
    public String getTitle() {​​
        return title;
    }​​
    
    public String getAuthor() {​​
        return author;
    }​​
}​​
​[2:41 PM] 
      
      Ranjitha (Guest) was invited to the meeting.
      
    ​[2:42 PM] Karunakar Eeede
    public interface BookDAO {​​
    List<Book> getAllBooks();
    void saveBook(Book book);
}​​
​[2:43 PM] 
      Ranjitha (Guest) no longer has access to the chat.
    ​[2:43 PM] 
      
      Ranjitha (Guest) was invited to the meeting.
      
    ​[2:49 PM] 
      Jyothi Yenduri (Guest) no longer has access to the chat.
    ​[2:52 PM] 
      
      VJ (Guest) was invited to the meeting.
      
    ​[2:57 PM] Karunakar Eeede
    public class MockBookDAO implements BookDAO {​​
    private List<Book> books = new ArrayList<>();
    
    @Override
    public List<Book> getAllBooks() {​​
        return books;
    }​​
    
    @Override
    public void saveBook(Book book) {​​
        books.add(book);
    }​​
}​​
​[3:16 PM] Karunakar Eeede
    public class BookService {​​
    private BookDAO bookDAO;
    
    public void setBookDAO(BookDAO bookDAO) {​​
        this.bookDAO = bookDAO;
    }​​
    
    public void addBook(Book book) {​​
        bookDAO.saveBook(book);
    }​​
    
    public List<Book> getAllBooks() {​​
        return bookDAO.getAllBooks();
    }​​
}​​
===================================================================================================================




1. Write a JAVAprogram to find maximum between two numbers.
2. Write a JAVAprogram to find maximum between three numbers.
3. Write a JAVAprogram to check whether a number is negative, positive or zero.
4. Write a JAVAprogram to check whether a number is divisible by 5 and 11 or not.
5. Write a JAVAprogram to check whether a number is even or odd.
6. Write a JAVAprogram to check whether a year is leap year or not.
7. Write a JAVAprogram to check whether a character is alphabet or not.
8. Write a JAVAprogram to input any alphabet and check whether it is vowel or consonant.
9. Write a JAVAprogram to input any character and check whether it is alphabet, digit or special character.
10. Write a JAVAprogram to check whether a character is uppercase or lowercase alphabet.
11. Write a JAVAprogram to input week number and print week day.
12. Write a JAVAprogram to count total number of notes in given amount.
13. Write a JAVAprogram to input marks of five subjects Physics, Chemistry, Biology, Mathematics and Computer. Calculate percentage and grade according to following:
Percentage >= 90% : Grade A
Percentage >= 80% : Grade B
Percentage >= 70% : Grade C
Percentage >= 60% : Grade D
Percentage >= 40% : Grade E
Percentage < 40% : Grade F
14. Write a JAVAprogram to input basiJAVAsalary of an employee and calculate its Gross salary according to following:
BasiJAVASalary <= 10000 : HRA = 20%, DA = 80%
BasiJAVASalary <= 20000 : HRA = 25%, DA = 90%
BasiJAVASalary > 20000 : HRA = 30%, DA = 95%
15. Write a JAVAprogram to input electricity unit charges and calculate total electricity bill according to the given condition:
For first 50 units Rs. 0.50/unit
For next 100 units Rs. 0.75/unit
For next 100 units Rs. 1.20/unit
For unit above 250 Rs. 1.50/unit
An additional surcharge of 20% is added to the bill
16. Write a JAVAprogram to print day of week name using switch case.
17. Write a JAVAprogram to print all natural numbers from 1 to n. - using while loop
18. Write a JAVAprogram to print all natural numbers in reverse (from n to 1). - using while loop
19. Write a JAVAprogram to print all alphabets from a to z. - using while loop
20. Write a JAVAprogram to print all even numbers between 1 to 100. - using while loop
21. Write a JAVAprogram to print all odd number between 1 to 100.
22. Write a JAVAprogram to find sum of all natural numbers between 1 to n.
23. Write a JAVAprogram to find sum of all even numbers between 1 to n.
24. Write a JAVAprogram to find sum of all odd numbers between 1 to n.
25. Write a JAVAprogram to print multiplication table of any number.
26. Write a JAVAprogram to count number of digits in a number.
27. Write a JAVAprogram to find first and last digit of a number.
28. Write a JAVAprogram to find sum of first and last digit of a number.
29. Write a JAVAprogram to check whether a number is palindrome or not.
30. Write a JAVAprogram to calculate sum of digits of a number.
31. Write a JAVAprogram to calculate product of digits of a number.
32. Write a JAVAprogram to enter a number and print its reverse.
33. Write a JAVAprogram to find frequency of each digit in a given integer.
34. Write a JAVAprogram to enter a number and print it in words.
35. Write a JAVAprogram to print all ASCII character with their values.
36. Write a JAVAprogram to find power of a number using for loop.
37. Write a JAVAprogram to find all factors of a number.
38. Write a JAVAprogram to calculate factorial of a number.
39. Write a JAVAprogram to check whether a number is Prime number or not.
40. Write a JAVAprogram to print all Prime numbers between 1 to n.
41. Write a JAVAprogram to find sum of all prime numbers between 1 to n.
42. Write a JAVAprogram to find all prime factors of a number.
43. Write a JAVAprogram to check whether a number is Armstrong number or not.
44. Write a JAVAprogram to print all Armstrong numbers between 1 to n.
45. Write a JAVAprogram to check whether a number is Perfect number or not.
46. Write a JAVAprogram to print all Perfect numbers between 1 to n.
47. Write a JAVAprogram to check whether a number is Strong number or not.
48. Write a JAVAprogram to print all Strong numbers between 1 to n.
49. Write a JAVAprogram to print Fibonacci series up to n terms
50. Write a JAVAprogram to print all negative elements in an array.
51. Write a JAVAprogram to find second largest element in an array.
52. Write a JAVAprogram to find maximum and minimum element in an array. 
53. Write a JAVAprogram to count total number of even and odd elements in an array.
54. Write a JAVAprogram to count total number of negative elements in an array.
55. Write a JAVAprogram to copy all elements from an array to another array.
56. Write a JAVAprogram to delete an element from an array at specified position.
57. Write a JAVAprogram to count frequency of each element in an array.
58. Write a JAVAprogram to print all unique elements in the array.
59. Write a JAVAprogram to count total number of duplicate elements in an array.
60. Write a JAVAprogram to delete an element from an array at specified position.
61. Write a JAVAprogram to count frequency of each element in an array.
62. Write a JAVAprogram to print all unique elements in the array.
63. Write a JAVAprogram to count total number of duplicate elements in an array.
64. Write a JAVAprogram to find length of a string and compare and concatenate two strings.
65. Write a JAVAprogram to find total number of alphabets, digits or special character in a string.
66. Write a JAVAprogram to count total number of vowels and consonants in a string.
67. Write a JAVAprogram to count total number of words in a string.
68. Write a JAVAprogram to find reverse of a string.
69. Write a JAVAprogram to check whether a string is palindrome or not.
70. Write a JAVAprogram to find first occurrence of a character in a given string.
71. Write a JAVAprogram to find last occurrence of a character in a given string.
72. Write a JAVAprogram to search all occurrences of a character in given string.
73. Write a JAVAprogram to count occurrences of a character in given string.
74. Write a JAVAprogram to find highest frequency character in a string.
75. Write a JAVAprogram to find lowest frequency character in a string.
76. Write a JAVAprogram to count frequency of each character in a string
77. Write a JAVAprogram to create a file and write contents, save and close the file.
78. Write a JAVAprogram to read file contents and display on console.
79. WAP to read numbers from a file and write even, odd and prime numbers to separate file.
80. Write a JAVAprogram to copy contents from one file to another file.
81. Write a JAVAprogram to merge two file to third file.
82. Write a JAVAprogram to count characters, words and lines in a text file.
83. WAP to check whether a number is prime, Armstrong or perfect number using functions.
84. WAP to find all prime numbers between given interval using functions.
85. WAP to print all strong numbers between given interval using functions.
86. WAP to print all Armstrong numbers between given interval using functions.
87. WAP to print all perfect numbers between given interval using functions.
88. WAP to Print the Alternate Elements in an Array
89. WAP to Display the ATM Transaction
90. WAP to print reverse case of a given string
=================================================================================================

What is Java? 
What are Java features? 
Explain JDK, JRE and JVM? 
Explain public static void main(String args[]) in Java 
How does Java achieve platform independence? 
Why Java is not 100% Object-oriented? 
What are wrapper classes in Java? 
What are constructors in Java? 
What is singleton class in Java and how can we make a class singleton? 
What is the difference between Array list and vector in Java? 
What is the difference between equals() and == in Java? 
What are the differences between Heap and Stack Memory in Java? 
What platforms are supported by Java programming language? 
Explain Java Architectural Neutral. 
What is meant by an “object” in Java? 
What's the definition of “class” in Java? 
Explain encapsulation. 
What are the features of an interface? 
Why would you use a “package” in Java? 
Define JAR file and WAR file. 
What is a final class? 
What makes a HashSet different from a TreeSet? 
What are the differences between HashMap and HashTable in Java? 
Can you call a constructor of a class inside another constructor? 
Contiguous memory locations are usually used for storing actual values in an array but not in ArrayList. Explain. 
How is the creation of a String using new() different from that of a literal? 
What are the differences between Heap and Stack Memory in Java?  
What is a package in Java? List down various advantages of packages. 
 What are access modifiers in Java? 
What are the main concepts of OOPs in Java? 
 What is the difference between a local variable and an instance variable?  
  Differentiate between the constructors and methods in Java? 
  What is final keyword in Java?  
 What is final keyword in Java? 
What is the difference between this() and super() in Java? 
 What is Java String Pool?  
 What is constructor chaining in Java? 
 Why Java Strings are immutable in nature? 
Difference between ArrayList and HashSet in Java? 
Difference between List and Set in Java?  
Difference between ArrayList and Vector in Java 
Difference between ArrayList and LinkedList in Java? 
Difference between method overloading and overriding in Java 
Difference between StringBuilder and StringBuffer in Java? 
Difference between Polymorphism and Inheritance in Java? 
Can we override the static method in Java? 
Can we access the private method in Java? 
Difference between interface and abstract class in Java? 
Why doesn’t Java support multiple inheritances?  
 What is the difference between an array and an array list? 
What is a Map in Java?  
What is collection class in Java? List down its methods and interfaces. 
 What is Polymorphism? 
Difference between runtime polymorphism and compile time polymorphism.  
 What is abstraction in Java?  
 What is inheritance in Java? And explain types of inheritance.  
 What is the difference between abstract classes and interfaces? 
  Can you override a private or static method in Java? 
 What is a marker interface? 
What is object cloning in Java?  
What is a constructor overloading in Java?  
 What are the advantages of the Collection Framework in Java? 
What do you understand by Iterator in the Java Collection Framework? 
Differentiate between Comparable and Comparator. 
 Differentiate between Iterator, Enumeration and ListIterator. 
 Differentiate between HashMap and HashTable.  
 Explain the use of final keyword in variable, method and class.  
 What is the main objective of garbage collection?  
 Why is the character array preferred over string for storing confidential information? 
What do you need to consider when creating an exception in Java? 
Why is synchronization necessary? Explain with the help of a relevant example. 
Difference between wait and sleep in Java? 
Difference between notify and notifyAll in Java? 
When do you use Runnable vs Thread in Java? 
Difference between the throw and throws keyword in Java? 
 Difference between Checked and Unchecked Exception in Java? 
Difference between Error and Exception in Java? 
How can you handle Java exceptions?  
  Can you explain the Java thread lifecycle? 
 Difference between final, finally and finalize keywords in java. 
How to create a custom Exception?  
 What are the important methods of Java Exception Class? 
What are the differences between processes and threads? 
What is a finally block? Is there a case when finally will not execute? 
What is synchronization? 
Can we write multiple catch blocks under single try block?  
Differentiate between Queue and Stack. 
 
 
 
 
 
 
 
 
 
 
Synchronoss Questions – 06-09-2022 
difference between throw and throws.  
how would you handle exception. 
methods in string operations. 
 about Treemap and hashmap. 
about split method. 
substring with example.  
logical programs: 
count of words in given paragraph. 
pattern 
3 2 1 
3 2 
3. 
  
while in the middle of the last problem execution i got trouble with electricity. 
1) introduce yourself. 
2) your role in project. 
3) what is Treeset. 
4) syntax of treemap and how will you iterate  treemap using for each. 
5) what are methods of strings and what split, contains ,substring, charAt method will return. 
6) what is the difference between array list and array 
7) wap to print a string that concatenates other string's substrings. 
8) wap to print second largest element in an array. 
 
Interview questions: 
1) introduce yourself. 
2) your role in project. 
3) what is TreeMap 
4) syntax of treemap and how will you iterate  treemap using for each. 
5) what are methods of strings and what split, contains ,substring, charAt method will return. 
6) what is the difference between array list and array 
7) wap to print a string that concatenates other string's substrings. 
8)what is difference between array and array list 
9) wap to print second largest element in an array. 
 
1. Self introduction 
2. how to add elements in Hashmap 
3. how to get elements from hashmap using iterators 
4. explain about main method signature 
5. local vs static varaible.
=================================================================================================================
What is Java? 
What are Java features? 
Explain JDK, JRE and JVM? 
Explain public static void main(String args[]) in Java 
How does Java achieve platform independence? 
Why Java is not 100% Object-oriented? 
What are wrapper classes in Java? 
What are constructors in Java? 
What is singleton class in Java and how can we make a class singleton? 
What is the difference between Array list and vector in Java? 
What is the difference between equals() and == in Java? 
What are the differences between Heap and Stack Memory in Java? 
What platforms are supported by Java programming language? 
Explain Java Architectural Neutral. 
What is meant by an “object” in Java? 
What's the definition of “class” in Java? 
Explain encapsulation. 
What are the features of an interface? 
Why would you use a “package” in Java? 
Define JAR file and WAR file. 
What is a final class? 
What makes a HashSet different from a TreeSet? 
What are the differences between HashMap and HashTable in Java? 
Can you call a constructor of a class inside another constructor? 
Contiguous memory locations are usually used for storing actual values in an array but not in ArrayList. Explain. 
How is the creation of a String using new() different from that of a literal? 
What are the differences between Heap and Stack Memory in Java?  
What is a package in Java? List down various advantages of packages. 
 What are access modifiers in Java? 
What are the main concepts of OOPs in Java? 
 What is the difference between a local variable and an instance variable?  
  Differentiate between the constructors and methods in Java? 
  What is final keyword in Java?  
 What is final keyword in Java? 
What is the difference between this() and super() in Java? 
 What is Java String Pool?  
 What is constructor chaining in Java? 
 Why Java Strings are immutable in nature? 
Difference between ArrayList and HashSet in Java? 
Difference between List and Set in Java?  
Difference between ArrayList and Vector in Java 
Difference between ArrayList and LinkedList in Java? 
Difference between method overloading and overriding in Java 
Difference between StringBuilder and StringBuffer in Java? 
Difference between Polymorphism and Inheritance in Java? 
Can we override the static method in Java? 
Can we access the private method in Java? 
Difference between interface and abstract class in Java? 
Why doesn’t Java support multiple inheritances?  
 What is the difference between an array and an array list? 
What is a Map in Java?  
What is collection class in Java? List down its methods and interfaces. 
 What is Polymorphism? 
Difference between runtime polymorphism and compile time polymorphism.  
 What is abstraction in Java?  
 What is inheritance in Java? And explain types of inheritance.  
 What is the difference between abstract classes and interfaces? 
  Can you override a private or static method in Java? 
 What is a marker interface? 
What is object cloning in Java?  
What is a constructor overloading in Java?  
 What are the advantages of the Collection Framework in Java? 
What do you understand by Iterator in the Java Collection Framework? 
Differentiate between Comparable and Comparator. 
 Differentiate between Iterator, Enumeration and ListIterator. 
 Differentiate between HashMap and HashTable.  
 Explain the use of final keyword in variable, method and class.  
 What is the main objective of garbage collection?  
 Why is the character array preferred over string for storing confidential information? 
What do you need to consider when creating an exception in Java? 
Why is synchronization necessary? Explain with the help of a relevant example. 
Difference between wait and sleep in Java? 
Difference between notify and notifyAll in Java? 
When do you use Runnable vs Thread in Java? 
Difference between the throw and throws keyword in Java? 
 Difference between Checked and Unchecked Exception in Java? 
Difference between Error and Exception in Java? 
How can you handle Java exceptions?  
  Can you explain the Java thread lifecycle? 
 Difference between final, finally and finalize keywords in java. 
How to create a custom Exception?  
 What are the important methods of Java Exception Class? 
What are the differences between processes and threads? 
What is a finally block? Is there a case when finally will not execute? 
What is synchronization? 
Can we write multiple catch blocks under single try block?  
Differentiate between Queue and Stack. 
 
 
 
 
 
 
 
 
 
 
Synchronoss Questions – 06-09-2022 
difference between throw and throws.  
how would you handle exception. 
methods in string operations. 
 about Treemap and hashmap. 
about split method. 
substring with example.  
logical programs: 
count of words in given paragraph. 
pattern 
3 2 1 
3 2 
3. 
  
while in the middle of the last problem execution i got trouble with electricity. 
1) introduce yourself. 
2) your role in project. 
3) what is Treeset. 
4) syntax of treemap and how will you iterate  treemap using for each. 
5) what are methods of strings and what split, contains ,substring, charAt method will return. 
6) what is the difference between array list and array 
7) wap to print a string that concatenates other string's substrings. 
8) wap to print second largest element in an array. 
 
Interview questions: 
1) introduce yourself. 
2) your role in project. 
3) what is TreeMap 
4) syntax of treemap and how will you iterate  treemap using for each. 
5) what are methods of strings and what split, contains ,substring, charAt method will return. 
6) what is the difference between array list and array 
7) wap to print a string that concatenates other string's substrings. 
8)what is difference between array and array list 
9) wap to print second largest element in an array. 
 
1. Self introduction 
2. how to add elements in Hashmap 
3. how to get elements from hashmap using iterators 
4. explain about main method signature 
5. local vs static varaible. 

The main difference between System.err.println("enter number1"); and System.out.println(a+b); is in the output stream that they use.

System.err.println("enter number1"); prints the message "enter number1" to the standard error stream, which is typically used for printing error messages or debugging information. This message is printed to the console or terminal window as an error message, and it will be displayed in a different color or font from regular output.

On the other hand, System.out.println(a+b); prints the value of the expression a+b to the standard output stream, which is typically used for regular program output. The result of the addition operation will be printed to the console or terminal window as a regular message.

In summary, the difference between System.err and System.out is the intended use of the output stream. System.err is typically used for error messages or debugging information, while System.out is used for regular program output.





================================================================================================================


package helloworld;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;

public class appmathcomp{
public static void main(String[] args) {

AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
context.scan("helloworld" );
context. refresh() ;
mathcomponent ms = (mathcomponent)context.getBean(mathcomponent.class);
int result = ms.add1(1,2);
System.out.println("Addition of 1 and 2 =" + result);
context. close() ;
}
}


package helloworld;

import org.springframework.stereotype.Component;

@Component("mc")
public class mathcomponent {
public int add(int x,int y) {
	return x+y;
}
}
=======================================================================================================================
package SampleProgUsingAnnotations;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
        AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
        context.scan("SampleProgUsingAnnotations");
        context.refresh();
        MathComponent ms=(MathComponent)context.getBean("mc");
        
        int result=ms.add(1,2);
        System.out.println("Addition of 1 and 2: "+result);
        context.close();
    }
}



===================================================================================================================

[12:29 PM] Karunakar Eeede
    @Configuration 
This annotation is used on classes which define beans. @Configuration is an analog for XML configuration file – it is configuration using Java class. Java class annotated with @Configuration 
is a configuration by itself and will have methods to instantiate and configure the dependencies. 
@Bean 
 This annotation is used at the method level. @Bean annotation works with @Configuration to create Spring beans. As mentioned earlier, @Configuration will have methods to instantiate and configure dependencies. Such methods will be annotated with @Bean . The method annotated with this annotation works as bean ID and it creates and returns the actual bean. 



​
    @Configuration 
public class AppConfig {​​ 
@Bean 
public MyService myService() {​​ 
return new MyService(); 
}​​ 
 
@Bean 
public MyRepository myRepository() {​​ 
return new MyRepository(); 
}​​ 
}​​ 
 
public class MyService {​​ 
@Autowired
private MyRepository myRepository; 
 
public void setMyRepository(MyRepository myRepository) {​​ 
this.myRepository = myRepository; 
}​​ 
 
public void doService() {​​ 
myRepository.doSomething(); 
}​​ 
}​​ 
 
public class MyRepository {​​ 
public void doSomething() {​​ 
System.out.println("Doing something..."); 
}​​ 
}​​



package helloworld;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Appservice{
public static void main(String[] args){
AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
context.register(appconfig.class);
context.refresh();
MyService myService =context.getBean(MyService.class);
myService.doService();
context.close();
}
}
=======================================================================================================================




============================================================================================================================

[2:20 PM] Karunakar Eeede
    <dependency>
    <groupId>javax.validation</groupId>
    <artifactId>validation-api</artifactId>
    <version>2.0.1.Final</version>
</dependency>

​[2:23 PM] Karunakar Eeede

    import javax.validation.constraints.NotNull; 
 
public class MyBean {​​ 
@NotNull 
private String myProperty; 
 
public void setMyProperty(String myProperty) {​​ 
this.myProperty = myProperty; 
}​​ 
 
public String getMyProperty() {​​ 
return myProperty; 
}​​ 
}​​ 



<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd">
<bean id="myBean" class="SampleProgUsingAnnotations.MyBean">
<property name="myProperty" value="Hellow,World!"></property>
</bean>

</beans>
======================================================================================================================================
The @Qualifier annotation is used in Spring to resolve ambiguity when multiple beans of the same type are present in the application context. It can be used to specify a particular bean to be wired in a component, rather than relying on the default behavior of autowiring by type.  


package helloworld;

public interface Animal {
public void speak();
}

package helloworld;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
@Qualifier("dog")
public class Dog implements Animal{
 
	public void speak() {
		// TODO Auto-generated method stub
	System.out.println("bow bow");	
	}

}

package helloworld;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
@Qualifier("cat")
public class Cat implements Animal{
 
	public void speak() {
		// TODO Auto-generated method stub
	System.out.println("meow meow");	
	}

}


package helloworld;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class Zoo {
@Autowired
@Qualifier("dog")
private Animal dog;
@Autowired
@Qualifier("cat")
private Animal cat;
public void play() {
	System.out.println("Dog");
	dog.speak();
	System.out.println("cat");
	cat.speak();
}
}
package helloworld;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Appzoo {
public static void main(String args[]) {
	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
	context.scan("helloworld");
	context.refresh();
	Zoo zoo=context.getBean(Zoo.class);
	zoo.play();
	context.close();
}
}
=====================================================================================================================================================
package helloworld;



import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Appstudent {
public static void main(String args[]) {
	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
	context.scan("helloworld");
	context.refresh();
	 Student1 stud = context.getBean(Student1.class);
	 stud.display();
	context.close();
}
}

package helloworld;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
@Component
public class Student1 {
private int rollNo;
private String name;
private int age;

@Value("101")
public void setRollNo(int rollNo) {
	this.rollNo=rollNo;
}
@Value("pavan")
public void setName(String name) {
	this.name=name;
}
@Value("26")
public void setAge(int age) {
	this.age=age;
}

public void display() {
	System.out.println("Roll no" +rollNo);
	System.out.println("NAME " +name);
	System.out.println("Age" +age);
}


}
========================================================================================================
@PropertySources({
        @PropertySource("classpath:application.properties")
})
package ValueAnnotationProg;
 
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.PropertySources;
import org.springframework.stereotype.Component;
 
@Component
@PropertySources({ @PropertySource("classpath:application.properties") })
public class MyComponent {
 
    @Value("${my.property}")
    private String myProperty;
    
    
    public void doSomething() {
        System.out.println("My property value is: "+myProperty);
    }
}
============================================================================================================

my.property=HelloWorld!

package helloworld;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;


public class Appcomp {
public static void main(String[] args){
AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
context.scan("helloworld");
context.refresh();
MyComponent myComponent = context.getBean(MyComponent.class);
myComponent.doSomething();
context.close();

}
}


package helloworld;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.PropertySources;
import org.springframework.stereotype.Component;

@Component
@PropertySources({@PropertySource("classpath:application.properties")})
public class MyComponent {
@Value("${my.property}")
private String myProperty;
public void doSomething() {
	System.out.println("My property value is  " +myProperty);
}
}
========================================================================================================================================
@Service is a Spring annotation that is used to mark a class as a service component. It is part of the Spring Core Framework and is typically used to indicate that a class provides some business logic or application-specific functionality, and is part of the service layer in a Spring application architecture. 



package helloworld;

public interface MessageService {
String getMessage();
}


package helloworld;

import org.springframework.stereotype.Service;

@Service
public class EmailService implements MessageService{

	public String getMessage() {
		// TODO Auto-generated method stub
		return "this is an email message";
	}	
	
}


package helloworld;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Appservice1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
     context.scan("helloworld");
     context.refresh();
     MessageService message=context.getBean(MessageService.class);
     System.out.println(message.getMessage());
     context.close();
}
}
========================================================================================================================================================

@Repository is a Spring annotation that is used to mark a class as a repository component. It is part of the Spring Core Framework and is typically used to indicate that a class is responsible for database operations or accessing a data source, and is part of the persistence layer in a Spring application architecture. 


package helloworld;

import java.util.List;

public interface UserInterface {
List<String>getUsers();
}

package helloworld;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;
@Repository
public class UserRepositoryImpl implements UserInterface{

	public List<String> getUsers() {
		// TODO Auto-generated method stub
		List<String>users=new ArrayList<String>();
		users.add("pavan");
		users.add("kalyan");
		users.add("vinay");
		users.add("babu");
		users.add("kavya");
		
		return users;
	}

}


package helloworld;

import java.util.List;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Appuser {


public static void main(String args[]) {
	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
	context.scan("helloworld");
	context.refresh();
	UserRepositoryImpl userRepository=context.getBean(UserRepositoryImpl.class);
	List<String>users=userRepository.getUsers();
	for(String m:users) {
		System.out.println("users =>" +m);
	}
	context.close();
}
}
======================================================================================================================
In the Spring Framework, the @Service annotation is used to indicate that a particular class is a service component. A service component in Spring is typically a class that performs some business logic, such as interacting with a database, communicating with other systems, or processing data.

By marking a class with the @Service annotation, Spring will automatically register that class as a bean in the application context, making it available for injection into other components. This is part of Spring's dependency injection (DI) framework, which allows for easy wiring of components and promotes loose coupling between them.

In summary, the @Service annotation in Spring is used to identify a class as a service component and register it as a bean in the application context.

package helloworld;

import java.util.List;

public interface UserInterface {
List<String>getUsers();
}


package helloworld;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;
@Repository
public class UserRepositoryImpl implements UserInterface{

	public List<String> getUsers() {
		// TODO Auto-generated method stub
		List<String>users=new ArrayList<String>();
		users.add("pavan");
		users.add("kalyan");
		users.add("vinay");
		users.add("babu");
		users.add("kavya");
		
		return users;
	}

}


package helloworld;

import java.util.List;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Appuser {


public static void main(String args[]) {
	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();
	context.scan("helloworld");
	context.refresh();
	UserRepositoryImpl userRepository=context.getBean(UserRepositoryImpl.class);
	List<String>users=userRepository.getUsers();
	for(String m:users) {
		System.out.println("users =>" +m);
	}
	context.close();
}
}

==========================================================================================================================================

Spring JdbcTemplate is a powerful mechanism to connect to the database and execute SQL queries. It internally uses JDBC api, but eliminates a lot of problems of JDBC API. 
Problems of JDBC API 
The problems of JDBC API are as follows: 
We need to write a lot of code before and after executing the query, such as creating connection, statement, closing resultset, connection etc. 
We need to perform exception handling code on the database logic. 
We need to handle transaction. 
Repetition of all these codes from one to another database logic is a time consuming task. 
Advantage of Spring JdbcTemplate 
Spring JdbcTemplate eliminates all the above mentioned problems of JDBC API. It provides you methods to write the queries directly, so it saves a lot of work and time. 
Spring Jdbc Approaches 
Spring framework provides following approaches for JDBC database access: 
JdbcTemplate 
NamedParameterJdbcTemplate 
SimpleJdbcTemplate 
SimpleJdbcInsert and SimpleJdbcCall 
 
JdbcTemplate class 
It is the central class in the Spring JDBC support classes. It takes care of creation and release of resources such as creating and closing of connection object etc. So it will not lead to any problem if you forget to close the connection. 
It handles the exception and provides the informative exception messages by the help of excepion classes defined in the org.springframework.dao package. 
We can perform all the database operations by the help of JdbcTemplate class such as insertion, updation, deletion and retrieval of the data from the database. 
 
Let's see the methods of spring JdbcTemplate class. 
 


 
 
 
 
 
 
No. 

 
 
 
 
Method 

 
 
 
 
Description 


 
 
 
 
1) 

 
 
public int update(String query) 

 
 
is used to insert, update and delete records. 


 
 
 
 
2) 

 
 
public int update(String query,Object... args) 

 
 
is used to insert, update and delete records using PreparedStatement using given arguments. 


 
 
 
 
3) 

 
 
public void execute(String query) 

 
 
is used to execute DDL query. 


 
 
 
 
4) 

 
 
public T execute(String sql, PreparedStatementCallback action) 

 
 
executes the query by using PreparedStatement callback. 


 
 
 
 
5) 

 
 
public T query(String sql, ResultSetExtractor rse) 

 
 
is used to fetch records using ResultSetExtractor. 


 
 
 
 
6) 

 
 
public List query(String sql, RowMapper rse) 

 
 
is used to fetch records using RowMapper. 


==================================================================================================================================
create database stude;

CREATE TABLE Students(
   ID   INT NOT NULL AUTO_INCREMENT,
   NAME VARCHAR(20) NOT NULL,
   AGE  INT NOT NULL,
   PRIMARY KEY (ID)
);

SELECT * FROM `students1`


package project;

import javax.sql.DataSource;

public interface StudentDAO {
	public void setDataSource(DataSource ds);
	public void create(String name,Integer age);

}

package project;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;

public class StudentJDBCTemplate implements StudentDAO{
private DataSource dataSource;
private JdbcTemplate jdbcTemplateObject;
	public void setDataSource(DataSource dataSource) {
		// TODO Auto-generated method stub
		this.dataSource=dataSource;
		this.jdbcTemplateObject=new JdbcTemplate(dataSource);
	}
	public void create(String name, Integer age) {
		// TODO Auto-generated method stub
		String SQL= "insert into students1(name,age) values(?,?)";
		jdbcTemplateObject.update(SQL,name,age);
		System.out.println("created record name=" +name +" Age= " +age);
	}

}


package project;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
ApplicationContext context=new ClassPathXmlApplicationContext("ApplicationContext.xml");
StudentJDBCTemplate student=(StudentJDBCTemplate)context.getBean("StudentJDBCTemplate");
student.create("aryan", 23);
student.create("vinay", 23);
student.create("babu", 22);
    }
}






<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

xmlns:context="http://www.springframework.org/schema/context"

 xmlns:p="http://www.springframework.org/schema/p"

xsi:schemaLocation="
http://www.springframework.org/schema/beans

http://www.springframework.org/schema/beans/spring-beans.xsd

http://www.springframework.org/schema/context

http://www.springframework.org/schema/beans/spring-context.xsd">

 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
<property name="url" value="jdbc:mysql://localhost:3306/stude"/>
<property name="username" value="root"/>
<property name="password" value=""/>
 </bean>
<bean id="StudentJDBCTemplate" class="project.StudentJDBCTemplate">
 <property name="dataSource" ref="dataSource" />
</bean>
</beans>







============================================================================================================================================

Spring with ORM Frameworks: 
Spring provides API to easily integrate Spring with ORM frameworks such as Hibernate, JPA(Java Persistence API), JDO(Java Data Objects), Oracle Toplink and iBATIS.  
Advantage of ORM Frameworks with Spring 
There are a lot of advantage of Spring framework in respect to ORM frameworks. There are as follows: 
Less coding is required: By the help of Spring framework, you don't need to write extra codes before and after the actual database logic such as getting the connection, starting transaction, commiting transaction, closing connection etc.  
Easy to test: Spring's IoC approach makes it easy to test the application. 
Better exception handling: Spring framework provides its own API for exception handling with ORM framework. 
Integrated transaction management: By the help of Spring framework, we can wrap our mapping code with an explicit template wrapper class or AOP style method interceptor. 
================================================================================================================================



[4:41 PM] Karunakar Eeede
    You have been tasked with building a simple Product application for a small online store. The application should allow users to browse products, add products to a shopping cart, and place orders. As part of the application, you will need to implement a product management module that allows administrators to add, edit, and delete products from the store.
Requirements:
The application should use Spring Core and JDBC for data access.The product management module should allow administrators to add new products by entering a name, description, price, and image URL.The product management module should allow administrators to view existing products in a table.The product management module should allow administrators to edit existing products by clicking on them in the table and updating the name, description, price, and image URL.The product management module should allow administrators to delete products by selecting them from the table.
Task: Your task is to implement the product management module of the online store application using Spring Core and JDBC. You should use the following steps to complete the task:
​[4:42 PM] Karunakar Eeede
    
==================================================================================================================

[21:57, 4/13/2023] Sohail Bitlabs:
========================================================================================================
 package Anno;



import java.util.List;
import java.util.Scanner;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(AppConfig.class);
    	context.scan("Anno");
		//context.refresh();
    	StudentDAO student=(StudentDAO) context.getBean(StudentDAO.class);
    	
    	
    	System.out.println("--------------Records creation-------------");
    	Scanner sc=new Scanner(System.in);
    	do {
    		System.out.println("-----your operation-----");
    		System.out.println("[1]. Insert into database");
    		System.out.println("[2]. Retrive data from d…
[21:57, 4/13/2023] Sohail Bitlabs: 
========================================================================================================
package Anno;

import java.util.List;
import java.util.Scanner;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
@Repository
public class StudentJDBCTemplete  implements StudentDAO{
	private DataSource dataSource;
	private JdbcTemplate jdbcTemplateObject;
	Scanner sc = new Scanner(System.in);
@Autowired
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
		this.jdbcTemplateObject = new JdbcTemplate(dataSource);
	}
	
	public void create (String name,Integer age) {
		String SQL = "insert into students(name,age) values(?,?)";
		…
[21:58, 4/13/2023] Sohail Bitlabs: package Anno;

import java.util.List;

import javax.sql.DataSource;




public interface StudentDAO {
	public void setDataSource(DataSource ds);
	public void create(String name, Integer age);
	public List<Student> listStudents();
	public List<Student> SearchbyId();
	public void updatebyId();
	public void deletebyId();
	
	

}
[21:58, 4/13/2023] Sohail Bitlabs:
========================================================================================================
 package Anno;

public class Student {
	private Integer age;
	private String name;
	private Integer id;
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}

}
[21:58, 4/13/2023] Sohail Bitlabs:
========================================================================================================
 package Anno;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

@Configuration
public class AppConfig {
  @Bean
  public DataSource dataSource() {
	  
	  DriverManagerDataSource dataSource=new DriverManagerDataSource();
	  dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
	  dataSource.setUrl("jdbc:mysql://localhost:3306/student");
	  dataSource.setUsername("root");
	  dataSource.setPassword("");
	  return dataSource;
  }
  
}
[21:59, 4/13/2023] Sohail Bitlabs: 
========================================================================================================
package studatabase;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import java.util.Scanner;
import java.util.List;
/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {

    	ApplicationContext context = new ClassPathXmlApplicationContext("ApplicationContext.xml");
    	
    	StudentJDBCTemplete studentJDBCTemplate = (StudentJDBCTemplete)context.getBean("studentJDBCTemplete");
    	
    	System.out.println("--------------Records creation-------------");
    	Scanner sc=new Scanner(System.in);
    	do {
    		System.out.println("-----your operation-----");
    		System.out.println("[1]. Insert into database");
    		System.out.println("[2]. Retrive data from database");
    		System.out.println("[3]. Search By Id");
    		System.out.println("[4]. update by Id");
    		System.out.println("[5]. Delete by ID");
    		System.out.println("[0]. exit");
    		System.out.println("enter your option");
    		int n=sc.nextInt();
    		switch(n) {
    		case 1:
    			System.out.println("--------Records creation -----");
    			studentJDBCTemplate.create("karun", 60);
    	    	break;
    		
    		case 2:
    			System.out.println("-----Listing Multiple Records ----");
    			List<Student> students=studentJDBCTemplate.listStudents();
    			
    			for(Student record:students) {
    				System.out.println("ID : "+record.getId()+" ");
    				System.out.println("Name : "+record.getName()+" ");
    				System.out.println("Age : "+record.getAge()+" ");
    			}
    			break;
    		case 3:
    			
    			List<Student> students1=studentJDBCTemplate.SearchbyId();
    			if(!students1.isEmpty()) {
    			for(Student record:students1) {
    				System.out.println("ID : "+record.getId()+" ");
    				System.out.println("Name : "+record.getName()+" ");
    				System.out.println("Age : "+record.getAge()+" ");
    			}
    			}
    			else {
    				System.out.println("No Data in DataBase");
    			}
    			break;
    		case 4:
    			studentJDBCTemplate.updatebyId();
    			break;
    		case 5:
    			studentJDBCTemplate.deletebyId();
    			break;
    		case 0:
    			System.exit(0);
    			break;
    			default:
    				System.out.println("invalid  choice");
    		}
    	}while(true);
    	
    }
}

[21:59, 4/13/2023] Sohail Bitlabs:
========================================================================================================
 package studatabase;

public class Student {
	private Integer age;
	private String name;
	private Integer id;
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}

}
[21:59, 4/13/2023] Sohail Bitlabs: package studatabase;
import java.util.List;

import javax.sql.DataSource;


public interface StudentDAO {
	public void setDataSource(DataSource ds);
	public void create(String name, Integer age);
	public List<Student> listStudents();
	public List<Student> SearchbyId();
	public void updatebyId();
	public void deletebyId();
	
	

}
[22:00, 4/13/2023] Sohail Bitlabs:
========================================================================================================
 package studatabase;
import java.util.List;
import java.util.Scanner;
import javax.sql.DataSource;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

public class StudentJDBCTemplete  implements StudentDAO{
	private DataSource dataSource;
	private JdbcTemplate jdbcTemplateObject;
	Scanner sc = new Scanner(System.in);
	
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
		this.jdbcTemplateObject = new JdbcTemplate(dataSource);
	}
	
	public void create (String name,Integer age) {
		String SQL = "insert into students(name,age) values(?,?)";
		jdbcTemplateObject.update(SQL,name,age);
		System.out.println("Create Record Name =" + name +"Age=" + age);
	}
	public List<Student> listStudents(){
		String SQL="select * from students";
		List<Student> students=jdbcTemplateObject.query(SQL, new BeanPropertyRowMapper<Student>(Student.class));
		return students;
	}
	
	public List<Student> SearchbyId(){
		System.out.println("enter your search Id");
		int serid=sc.nextInt();
		String SQL="select * from students where id="+serid+"";
		List<Student> students=jdbcTemplateObject.query(SQL, new BeanPropertyRowMapper<Student>(Student.class));
		return students;
	}
	public void updatebyId() {
		System.out.println("enter your search Id");
		int serid1=sc.nextInt();
		System.out.println("enter updated age");
		int upage=sc.nextInt();
		String SQL="update students set age="+upage+"where id="+serid1+" ";
		jdbcTemplateObject.update(SQL);
		System.out.println("Updated succesfully");
		
	}
	public void deletebyId() {
		System.out.println("enter your search Id");
		int serid1=sc.nextInt();
		String SQL="delete from students where id="+serid1+" ";
		jdbcTemplateObject.update(SQL);
		System.out.println("deleted succesfully");
	}

}
========================================================================================================

[4:00 PM] Karunakar Eeede
    <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-entitymanager</artifactId>
    <version>5.6.15.Final</version>
</dependency>
    
    <!-- MySQL Connector -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.26</version>
    </dependency>
    <dependency>
    <groupId>javax.persistence</groupId>
    <artifactId>javax.persistence-api</artifactId>
    <version>2.2</version>
   </dependency>
​[4:00 PM] Karunakar Eeede
    persistence.xml
​[4:00 PM] Karunakar Eeede
    <persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd"
             version="2.2">
<persistence-unit name="demo" transaction-type="RESOURCE_LOCAL">
<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
    <class>com.SpringJPA.User</class>
    <properties>
        <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/student"/>
        <property name="javax.persistence.jdbc.user" value="root"/>
        <property name="javax.persistence.jdbc.password" value=""/>
        <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect"/>
        <property name="hibernate.hbm2ddl.auto" value="update"/>
    </properties>
</persistence-unit>
</persistence>
​[4:01 PM] Karunakar Eeede
    User.java
​[4:01 PM] Karunakar Eeede
    package com.SpringJPA;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
@Entity
@Table(name = "users")
class User {​​
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    public Long getId() {​​
        return id;
    }​​
    public void setId(Long id) {​​
        this.id = id;
    }​​
    public String getName() {​​
        return name;
    }​​
    public void setName(String name) {​​
        this.name = name;
    }​​
    public String getEmail() {​​
        return email;
    }​​
    public void setEmail(String email) {​​
        this.email = email;
    }​​
}​​
​[4:01 PM] Karunakar Eeede
    App.java
​[4:01 PM] Karunakar Eeede
    package com.SpringJPA;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import java.util.List;
public class App {​​
    public static void main(String[] args) 
    {​​
        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("demo");
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        // create a new user
        entityManager.getTransaction().begin();
        User user = new User();
        user.setName("arun");
        user.setEmail("arun@example.com");
        entityManager.persist(user);
        entityManager.getTransaction().commit();
        // fetch all users
        Query query = entityManager.createQuery("SELECT u FROM User u");
        List<User> users = query.getResultList();
        for (User u : users) {​​
            System.out.println(u.getName());
        }​​
        // fetch user by email
        Query queryByEmail = entityManager.createQuery("SELECT u FROM User u WHERE u.email = :email");
        queryByEmail.setParameter("email", "eedekarunakar@example.com");
        User userByEmail = (User) queryByEmail.getSingleResult();
        System.out.println("Name:"+userByEmail.getName());
        entityManager.close();
        entityManagerFactory.close();
    }​​
}​​
=========================================================================================

Assume you are building a Spring application for a library where users can search for books, borrow books, and return books. You need to implement the following CRUD operations using DAO and JPA ORM in Spring Framework:
Create a new book record in the databaseRetrieve a book record by its IDUpdate a book record's informationDelete a book record from the database
Can you write the DAO interface and implementation for these operations using Spring Framework and JPA ORM

package springbook;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
   ;

	public static void main( String[] args )
    {
 ApplicationContext  context=new AnnotationConfigApplicationContext(AppConfig.class);
 BookDao bookDao=context.getBean(BookDao.class);
 Book book =new Book();
 book.setTitle("the great history");
 book.setAuthor("aryanshetty");
 book.setGenre("libro");
 book.setBorrowed(false);
bookDao.create(book);
 Book retriveBook =bookDao.findById(1L); 
 System.out.println("retrived book " +retriveBook);
 retriveBook.setBorrowed(true);
 bookDao.delete(retriveBook);
 Book deletedBook =bookDao.findById(1L); 
 System.out.println("deleted book " +deletedBook);


    }
}

package springbook;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

public class AppConfig {
@Bean
public DataSource dataSource() {
	DriverManagerDataSource dataSource=new DriverManagerDataSource();
	dataSource.setDriverClassName("com.mysql.jdbc.Driver");
	dataSource.setUrl("jdbc:mysql://localhost:3306/libray");
	dataSource.setUsername("your-username");
	dataSource.setPassword("your-password");
	return dataSource;
	
}
}

package springbook;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;



@Entity
@Table(name="books")
public class Book {
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
private Long id;
private String title;
private String author;
private String genre;
private boolean borrowed;
public Long getId() {
	return id;
}
public void setId(Long id) {
	this.id = id;
}
public String getTitle() {
	return title;
}
public void setTitle(String title) {
	this.title = title;
}
public String getAuthor() {
	return author;
}
public void setAuthor(String author) {
	this.author = author;
}
public String getGenre() {
	return genre;
}
public void setGenre(String genre) {
	this.genre = genre;
}
public boolean isBorrowed() {
	return borrowed;
}
public void setBorrowed(boolean borrowed) {
	this.borrowed = borrowed;
}
}

package springbook;


public interface BookDao {
public Book create(Book book);
public Book findById(Long id);
public Book update(Book book);
public void delete(Book book);
}


package springbook;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.stereotype.Repository;

@Repository
@Transactional
public class BookDaoImpl implements BookDao{
	
@PersistenceContext
private EntityManager entityManager;

public Book create(Book book) {
	entityManager.persist(book);
	return book;
}

public Book findById(Long id) {
	return entityManager.find(Book.class, id);
}
public Book update(Book book) {
	return entityManager.merge(book);
}
public void delete(Book book) {
	entityManager.remove(entityManager.contains(book)?book:entityManager.merge(book));
}
}




<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>book</groupId>
  <artifactId>book</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>book</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
    <groupId>javax.validation</groupId>
    <artifactId>validation-api</artifactId>
    <version>2.0.1.Final</version>
</dependency>
   <dependency>

<groupId>org.springframework</groupId>

<artifactId>spring-context</artifactId>

<version>6.0.7</version>

</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.21</version>
    </dependency>
 <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>6.0.7</version>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.21</version>
    </dependency>
   <dependency>

<groupId>org.springframework</groupId>

<artifactId>spring-context</artifactId>

<version>6.0.7</version>

</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-entitymanager</artifactId>
    <version>5.6.15.Final</version>
</dependency>
    
    <!-- MySQL Connector -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.26</version>
    </dependency>
    <dependency>
    <groupId>javax.persistence</groupId>
    <artifactId>javax.persistence-api</artifactId>
    <version>2.2</version>
   </dependency>
 <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>6.0.7</version>
</dependency>
  </dependencies>
</project>


============================================================================================================================

    A Spring MVC is a Java framework which is used to build web applications. It follows the Model-View-Controller design pattern. It implements all the basic features of a core spring framework like Inversion of Control, Dependency Injection. 

​
    Model - A model contains the data of the application. A data can be a single object or a collection of objects. 
Controller - A controller contains the business logic of an application. Here, the @Controller annotation is used to mark the class as the controller. 
View - A view represents the provided information in a particular format. Generally, JSP+JSTL is used to create a view page. Although spring also supports other view technologies such as Apache Velocity, Thymeleaf and FreeMarker. 
​

    Advantages of Spring MVC Framework 
Let's see some of the advantages of Spring MVC Framework:- 
Separate roles - The Spring MVC separates each role, where the model object, controller, command object, view resolver, DispatcherServlet, validator, etc. can be fulfilled by a specialized object. 
Light-weight - It uses light-weight servlet container to develop and deploy your application. 
Powerful Configuration - It provides a robust configuration for both framework and application classes that includes easy referencing across contexts, such as from web controllers to business objects and validators. 
Rapid development - The Spring MVC facilitates fast and parallel development. 
Reusable business code - Instead of creating new objects, it allows us to use the existing business objects. 
Easy to test - In Spring, generally we create JavaBeans classes that enable you to inject test data using the setter methods. 
Flexible Mapping - It provides the specific annotations that easily redirect the page. 
============================================================================================================================
In the Spring MVC pattern, @Controller is an annotation that is used to indicate that a particular class is a controller in the MVC architecture.

A controller in Spring MVC handles the incoming HTTP requests and maps them to appropriate handler methods. These handler methods perform the required business logic and then return the appropriate view to render the response.

The @Controller annotation is used to mark a class as a controller in Spring MVC. When this annotation is used, the Spring framework will automatically detect and register the class as a controller, and the methods within the class can be mapped to request URLs using additional annotations such as @RequestMapping and others.

Additionally, the @Controller annotation is also used to enable the support of features like @ExceptionHandler, @InitBinder, and @ModelAttribute in Spring MVC controllers.

Overall, the @Controller annotation plays a crucial role in Spring MVC, as it helps in defining the controller layer and enables the framework to manage it more effectively.
=========================================================================================================================================
=====>homecontroller

package Springpackage;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class Hellocontroller {
@RequestMapping("/hello")
public String hello(Model model) {
	System.out.println("hello welcome");
	model.addAttribute("message","Hello world!");
	return "index";
	
}
}
=====>spring-servelet.jsp
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.1.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
<context:component-scan base-package="Springpackage" />
<mvc:annotation-driven />
<bean
class="org.springframework.web.servlet.view.InternalResourceViewResolver" name="viewResolver">
<property name="prefix" value="/WEB-INF/views/" />
<property name="suffix" value=".jsp" />
</bean>
</beans>

===>web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                                 http://xmlnsjcp.org/xml/ns/javaee/web-app_4_0.xsd"
           version="4.0">
<display-name>Spring MVC Application</display-name> 
<!-- Map the DispatcherServelet to handle all requests --> 
<servlet>
<servlet-name>spring</servlet-name>
<servlet-class>org.springframework.web.servelet.DispatcherServelet</servlet-class>
</servlet> 
<servlet-mapping>
<servlet-name>spring</servlet-name>
<url-pattern>/</url-pattern>
</servlet-mapping>        
 </web-app> 
                     
=====>index.jsp

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ age isELIgnored="false" %>
<html>
<head><title>Hello world</title></head>
<body><h1>Hello</h1>
<h2>${message}</h2>
</body>
</html>

====>pomxml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com</groupId>
  <artifactId>Spring</artifactId>
  
  <version>0.0.1-SNAPSHOT</version>
  <name>Spring Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
   <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>6.0.7</version>
    </dependency>
    <dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-core</artifactId>
<version>6.0.7</version>
</dependency>
<dependency>
<groupId>javax.servlet</groupId>
<artifactId>javax.servlet-api</artifactId>
<version>3.0.1</version>
<scope>provided</scope>
</dependency>
<dependency>
<groupId>org.springframework</groupId>
<artifactId>spring-webmvc</artifactId>
<version>6.0.7</version>
</dependency>
<dependency>
<groupId>javax.servlet</groupId>
<artifactId>jstl</artifactId>
<version>1.2</version>
</dependency>
  </dependencies>
  <build>
    <finalName>Spring</finalName>
  </build>
</project>

===============================================================================================================================

package springmvc.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import springmvc.Model.User;
import springmvc.service.UserService;

@Controller
public class ContactController {

	@Autowired
	private UserService service;
	
	@RequestMapping("/register")
	public String showFom() {
		
		return "contact";
	}
	
	@RequestMapping("/insert")
	public String saveUser(@ModelAttribute User user, Model model) {
		this.service.insetUser(user);
		return "index1";
	}
	@RequestMapping("/update1")
	public String updateUser(@ModelAttribute User user, Model model) {
		this.service.updateUser(user);
		return "index1";
	}
	@RequestMapping("/update/{id}")
	public String saveUser(@PathVariable("id") int id, Model model) {
    User u=this.service.getUserById(id);
    
    model.addAttribute("user",u);
		return "updateForm";
	}
	@RequestMapping("/getAll")
	public String getAllUsers(Model model){
		List<User> list=this.service.getAllUsers();
		model.addAttribute("list", list);
		return "index1";
	}
	@RequestMapping("/delete/{id}")
	public String delete(@PathVariable("id") int id, Model model){
	
		this.service.delete(id);
		return "index1";
	}
}

===============
package springmvc.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.Model;
import java.util.List;
import java.util.ArrayList;
import org.springframework.web.servlet.ModelAndView;
@Controller
public class HomeCtroller {

	@RequestMapping(path="/home",method=RequestMethod.GET)
	public String home(Model model) {
		System.out.println("This is home url");
		model.addAttribute("name","karun");
		model.addAttribute("id",101);
		List<String> names=new ArrayList<String>();
		names.add("Raj");
		names.add("Arun");
		names.add("Karthik");
		model.addAttribute("list", names);		
		return "index";
	}
	
	@RequestMapping("/welcome")
	public String welcome() {
		System.out.println("This is welcome url");
		return "welcome";
	}
	@RequestMapping("/help")
	public ModelAndView help() {
		ModelAndView obj=new ModelAndView();
		obj.addObject("name", "Puja");
		obj.addObject("id", 102);
		
		obj.setViewName("help");
		return obj;
	}
}
===================
package springmvc.Model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class User {

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int id;
	private String email;
	private String username;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	private String password;
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	@Override
	public String toString() {
		return "User [email=" + email + ", username=" + username + ", password=" + password + "]";
	}
	
	
}
===================
package springmvc.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import springmvc.Model.User;
import springmvc.userDao.userDao;

@Service
public class UserService {

	@Autowired
	private userDao dao;

	public void insetUser(User user) {
		this.dao.insertUser(user);
	}

	public List<User> getAllUsers() {
		List<User> list = this.dao.getAllUsers();
		return list;
	}

	public void delete(int id) {
		this.dao.delete(id);
	}

	public User getUserById(int id) {

		User u = this.dao.getUserById(id);
		return u;
	}
public void updateUser(User user) {
		
		this.dao.updateUser(user);
	}
}
==============
package springmvc.userDao;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import springmvc.Model.User;

@Repository
public class userDao {

	private JdbcTemplate jdbcTemplate;
	
	@Autowired
    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }
	
	public void insertUser(User user) {
		
		String sql = "INSERT INTO user (username, email, password) VALUES (?, ?, ?)";
		jdbcTemplate.update(sql, user.getUsername(), user.getEmail(), user.getPassword());
	}
	
	public void updateUser(User user) {
		
		String sql = "UPDATE user SET username = ?, email = ?, password = ? WHERE id = ?";
		jdbcTemplate.update(sql, user.getUsername(), user.getEmail(), user.getPassword(), user.getId());
	}
	
	public List<User> getAllUsers(){
		
		String sql = "SELECT * FROM user";
		List<User> users = jdbcTemplate.query(sql, new UserRowMapper());
		return users;
	}
	
    public User getUserById(int id){
		
    	String sql = "SELECT * FROM user WHERE id = ?";
		User user = jdbcTemplate.queryForObject(sql, new Object[]{id}, new UserRowMapper());
		return user;
	}
	
	public void delete(int id) {
		
		String sql = "DELETE FROM user WHERE id = ?";
		jdbcTemplate.update(sql, id);
	}
}
==========
package springmvc.userDao;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import springmvc.Model.User;

public class UserRowMapper implements RowMapper<User>{

	public User mapRow(ResultSet rs, int rowNum) throws SQLException {
		
		User user = new User();
		user.setId(rs.getInt("id"));
		user.setUsername(rs.getString("username"));
		user.setEmail(rs.getString("email"));
		user.setPassword(rs.getString("password"));
		return user;
	}
}
===============
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<context:component-scan
		base-package="springmvc" />
	<tx:annotation-driven/>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		name="viewResolver">

		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />

	</bean>

	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/userdb" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>
	<bean name="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>springmvc.Model.User</value>
			</list>
		</property>
	</bean>

	<bean name="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean name="hibernateTemplate"
		class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


</beans>
============
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>Archetype Created Web Application</display-name>
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

	</servlet>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
</web-app>

===================
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.bitlabs</groupId>
	<artifactId>springmvc</artifactId>
	
	<version>0.0.1-SNAPSHOT</version>
	<name>springmvc Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<dependencies>
			<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>5.2.3.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>5.2.13.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/jstl/jstl -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.4.32.Final</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.47</version>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
	</dependencies>
	<build>
		<finalName>springmvc</finalName>
	</build>
</project>
======================================================================================================================================
package com.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import com.controller.*;
import com.model.User;
import com.service.UserService;

 
@Controller
public class ContactController {
 
    @Autowired
    private UserService service;
    
    @RequestMapping("/register")
    public String showFom() {
        
        return "contact";
    }
    
    @RequestMapping("/insert")
    public String saveUser(@ModelAttribute User user, Model model) {
        this.service.insetUser(user);
        return "index";
    }
    @RequestMapping("/update1")
    public String updateUser(@ModelAttribute User user, Model model) {
        this.service.updateUser(user);
        return "index";
    }
    @RequestMapping("/update/{id}")
    public String saveUser(@PathVariable("id") int id, Model model) {
    User u=this.service.getUserById(id);
    
    model.addAttribute("user",u);
        return "updateForm";
    }
    @RequestMapping("/getAll")
    public String getAllUsers(Model model){
        List<User> list=this.service.getAllUsers();
        model.addAttribute("list", list);
        return "index";
    }
    @RequestMapping("/delete/{id}")
    public String delete(@PathVariable("id") int id, Model model){
    
        this.service.delete(id);
        return "index";
    }
}
 
package com.model;


import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class User {
@Id
@GeneratedValue(strategy=GenerationType.AUTO)
private int id;
private String email;
private String username;
public int getId() {
    return id;
}
public void setId(int id) {
    this.id = id;
}
private String password;
public String getEmail() {
    return email;
}
public void setEmail(String email) {
    this.email = email;
}
public String getUsername() {
    return username;
}
public void setUsername(String username) {
    this.username = username;
}
public String getPassword() {
    return password;
}
public void setPassword(String password) {
    this.password = password;
}
@Override
public String toString() {
    return "User [email=" + email + ", username=" + username + ", password=" + password + "]";
}


}


package com.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.model.User;
import com.service.*;
import com.service.userDao.userDao;
 
@Service
public class UserService {
 
    @Autowired
    private userDao dao;
 
    public void insetUser(User user) {
        this.dao.insertUser(user);
    }
 
    public List<User> getAllUsers() {
        List<User> list = this.dao.getAllUsers();
        return list;
    }
 
    public void delete(int id) {
        this.dao.delete(id);
    }
 
    public User getUserById(int id) {
 
        User u = this.dao.getUserById(id);
        return u;
    }
public void updateUser(User user) {
        
        this.dao.updateUser(user);
    }
}
 ===================
package com.userDao;

import java.util.List;

import javax.transaction.Transactional;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.stereotype.Repository;
 
import com.userDao.Model.User;
 
@Repository
public class userDao {
 
    @Autowired
    private HibernateTemplate hibernateTemplate;
    
    @Transactional
    public void insertUser(User user) {
        
        this.hibernateTemplate.save(user);
    }
    @Transactional
    public void updateUser(User user) {
        
        this.hibernateTemplate.update(user);
    }
    
    public List<User> getAllUsers(){
        
        List<User> list=this.hibernateTemplate.loadAll(User.class);
        return list;
    }
    public User getUserById(int id){
        
        User u=this.hibernateTemplate.get(User.class, id);
        return u;
    }
    @Transactional
    public void delete(int id) {
        User u=this.hibernateTemplate.get(User.class, id);
        this.hibernateTemplate.delete(u);
    }
}
 ==========================
contact jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
 
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
 
    <title>Hello, world!</title>
  </head>
  <body>
  <div class="container mt-5">
    <h4 class="text-center">Registration Form</h4>
    <form action="insert" method="post">
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email" name="email">
    
  </div>
  <div class="form-group">
    <label for="user name">User Name</label>
    <input type="username" class="form-control" id="username"  placeholder="Enter User Name" name="username">
    
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" name="password">
  </div>
  
  <button type="submit" class="btn btn-primary">Submit</button>
</form>
    
    </div>
    
    
 
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
  </body>
</html>
=========
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@page isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!doctype html>
<html lang="en">
<head>
<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport"
    content="width=device-width, initial-scale=1, shrink-to-fit=no">
 
<!-- Bootstrap CSS -->
<link rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous">
 
<title>Hello, world!</title>
</head>
<body>
    <div class="container mt-5">
        <h4 class="text-center">Update your details</h4>
        <form action="${pageContext.request.contextPath}/update1" method="post">
 
            <div class="form-group">
            <label for="id">User Id</label> 
             <input type="text" class="form-control" name="id" value="${user.id}">
 
            </div>
            <div class="form-group">
                <label for="exampleInputEmail1">Email address</label> <input
                    type="email" class="form-control" id="exampleInputEmail1"
                    aria-describedby="emailHelp" placeholder="Enter email" name="email"
                    value="${user.email}">
 
            </div>
            <div class="form-group">
                <label for="user name">User Name</label> <input type="username"
                    class="form-control" id="username" placeholder="Enter User Name"
                    name="username" value="${user.username }">
 
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Password</label> <input
                    type="password" class="form-control" id="exampleInputPassword1"
                    placeholder="Password" name="password" value="${user.password }">
            </div>
 
            <button type="submit" class="btn btn-primary">Update</button>
        </form>
 
    </div>
 
 
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
</body>
</html>
====================
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 
    <context:component-scan
        base-package="springmvc" />
<tx:annotation-driven/>
 
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        name="viewResolver">
 
        <property name="prefix" value="/WEB-INF/views/" />
<property name="suffix" value=".jsp" />
 
    </bean>
 
    <bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property name="driverClassName" value="com.mysql.jdbc.Driver" />
<property name="url" value="jdbc:mysql://localhost:3306/userdb" />
<property name="username" value="root" />
<property name="password" value="" />
</bean>
<bean name="sessionFactory"
        class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
<property name="dataSource" ref="dataSource" />
<property name="hibernateProperties">
<props>
<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
<prop key="hibernate.show_sql">true</prop>
<prop key="hibernate.format_sql">true</prop>
<prop key="hibernate.hbm2ddl.auto">update</prop>
</props>
</property>
<property name="annotatedClasses">
<list>
<value>springmvc.Model.User</value>
</list>
</property>
</bean>
 
    <bean name="transactionManager"
        class="org.springframework.orm.hibernate5.HibernateTransactionManager">
<property name="sessionFactory" ref="sessionFactory" />
</bean>
 
    <bean name="hibernateTemplate"
        class="org.springframework.orm.hibernate5.HibernateTemplate">
<property name="sessionFactory" ref="sessionFactory" />
</bean>
 
</beans>
===================
<!DOCTYPE web-app PUBLIC
"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
"http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
    <display-name>Archetype Created Web Application</display-name>
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    </servlet>
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
   
</web-app>
=================

    <beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <context:component-scan
        base-package="springmvc" />
<tx:annotation-driven/>
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        name="viewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
<property name="suffix" value=".jsp" />
    </bean>
    <bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property name="driverClassName" value="com.mysql.jdbc.Driver" />
<property name="url" value="jdbc:mysql://localhost:3306/userdb" />
<property name="username" value="root" />
<property name="password" value="" />
</bean>
<bean name="sessionFactory"
        class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
<property name="dataSource" ref="dataSource" />
<property name="hibernateProperties">
<props>
<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
<prop key="hibernate.show_sql">true</prop>
<prop key="hibernate.format_sql">true</prop>
<prop key="hibernate.hbm2ddl.auto">update</prop>
</props>
</property>
<property name="annotatedClasses">
<list>
<value>springmvc.Model.User</value>
</list>
</property>
</bean>
    <bean name="transactionManager"
        class="org.springframework.orm.hibernate5.HibernateTransactionManager">
<property name="sessionFactory" ref="sessionFactory" />
</bean>
    <bean name="hibernateTemplate"
        class="org.springframework.orm.hibernate5.HibernateTemplate">
<property name="sessionFactory" ref="sessionFactory" />
</bean>

</beans>
​[12:23 PM] 
      Mallela Vinay Kumar (Guest) no longer has access to the chat.
    ​[12:23 PM] 
      
      Mallela Vinay Kumar (Guest) was invited to the meeting.
      
    ​[12:24 PM] Karunakar Eeede
    <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    <%@page isELIgnored="false" %>
    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!doctype html>
<html lang="en">
<head>
<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport"
    content="width=device-width, initial-scale=1, shrink-to-fit=no">
<!-- Bootstrap CSS -->
<link rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous">
<title>Hello, world!</title>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Below Is User List</h1>
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">id</th>
                    <th scope="col">Email</th>
                    <th scope="col">Username</th>
                    <th scope="col">Password</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach items="${​​list}​​" var="u">
                    <tr>
                        <th scope="row">${​​u.id}​​</th>
                        <td>${​​u.email}​​</td>
                        <td>${​​u.username}​​</td>
                        <td>${​​u.password}​​</td>
                        <td>
                        <a href="delete/${​​u.id}​​" class="btn btn-danger">delete</a>
                        <a href="update/${​​u.id}​​" class="btn btn-primary">update</a>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
        <div class="container text-center">
<a href="contact.jsp" class="btn btn-primary">Add user</a>
</div>
    </div>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
</body>
</html>
=====================
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>S</groupId>
  <artifactId>SPRINGMVCProgs1</artifactId>
  
  <version>0.0.1-SNAPSHOT</version>
  <name>SPRINGMVCProgs1 Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
   
    <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>5.2.13.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/jstl/jstl -->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.32.Final</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.47</version>
        </dependency>
        
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>


  </dependencies>
  <build>
    <finalName>SPRINGMVCProgs1</finalName>
  </build>
</project>
====================================================================================================================================
package project;

import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
ApplicationContext context=new ClassPathXmlApplicationContext("ApplicationContext.xml");
StudentJDBCTemplate student=(StudentJDBCTemplate)context.getBean("StudentJDBCTemplate");
student.create("aryan", 23);
student.create("vinay", 23);
student.create("babu", 22);
System.out.println(".....listing multiple Recorgs.......");
List<Student>students=student.listStudents();
for(Student record:students) {
	System.out.print("ID => " +record.getId());
	System.out.print(",name => " +record.getName());
	System.out.println(",Age => " +record.getAge());
	
}
System.out.println("---------Searching record by ID--------");
Student student2 = student.getStudentByID(1);
System.out.println("ID:" + student2.getId());
System.out.println("Name:" + student2.getName());
System.out.println("Age:" + student2.getAge());


System.out.println("---------Updating record--------");
student.setName("Rajesh");
student.setAge(26);
student.updateStudent(student);
System.out.println("Record updated successfully!");
System.out.println("Updated details:");
System.out.println("ID:" + student.getId());
System.out.println("Name:" + student.getName());
System.out.println("Age:" + student.getAge());


System.out.println("---------Deleting record--------");
int deletedRecords = students.deleteStudentByID(3);
if(deletedRecords > 0) {
    System.out.println("Record with ID 3 deleted successfully!");
}
else {
    System.out.println("Record with ID 3 not found or could not be deleted.");
    }
}
    }

==================
package project;

public class Student {
	 private Integer age;
     private String name;
     private Integer id;
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
}
==========================================================================================================
package project;

import java.util.List;

import javax.sql.DataSource;

public interface StudentDAO {
	public void setDataSource(DataSource ds);
	public void create(String name,Integer age);
	public List<Student> listStudents() ;
	public void delete(Integer id);
	public void update(Integer id,Integer age);
	public Student getStudent(Integer id);
	
}
=========================================================================================================
package project;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

public class StudentJDBCTemplate implements StudentDAO{
private DataSource dataSource;
private Student Stud;
private JdbcTemplate jdbcTemplateObject;
	public void setDataSource(DataSource dataSource) {
		// TODO Auto-generated method stub
		this.dataSource=dataSource;
		this.jdbcTemplateObject=new JdbcTemplate(dataSource);
	}
	public void create(String name, Integer age) {
		// TODO Auto-generated method stub
		String SQL= "insert into students1(name,age) values(?,?)";
		jdbcTemplateObject.update(SQL,name,age);
		System.out.println("created record name=" +name +" Age= " +age);
	}
  public  List<Student>listStudents(){
	  String SQL="select * from students1";
	  List<Student>students=jdbcTemplateObject.query(SQL, new BeanPropertyRowMapper<Student>(Student.class));
	return students;
	  
  }
  public Student getStudentByID(int ID) {
	 	String SQL = "SELECT * FROM students WHERE ID = ?";
	     @SuppressWarnings("deprecation")
			Student student = jdbcTemplateObject.queryForObject(SQL, new Object[]{ID}, new BeanPropertyRowMapper<Student>(Student.class));
	     return student;
	 }

	
	 public int deleteStudentByID(int ID) {
		 String SQL = "DELETE FROM students WHERE ID = ?";
	     jdbcTemplateObject.update(SQL, ID);
	     System.out.println("Deleted Record with ID = "+ID);;
	     return ID;
	}
	public void updateStudent(Student student) {
		// TODO Auto-generated method stub
		 String SQL = "UPDATE students SET NAME = ?, AGE = ? WHERE ID = ?";
	     jdbcTemplateObject.update(SQL, Stud.getName(), Stud.getAge(), Stud.getId());
	     System.out.println("Updated Record with ID = " + Stud.getId());
		
	}
	
	
}






















=========================================================================================================================================
You've been hired by a small e-commerce startup to build a web application for their online store. The application should allow customers to browse products, add them to their shopping cart, and checkout. Additionally, the application should allow administrators to manage products, orders, and customer information.
Your task is to design and implement this web application using Spring Framework MVC, JDBC, and JPA.
Some of the specific requirements for the application include:
Customers should be able to browse products by category and search for products by name or description.Customers should be able to add products to their shopping cart, view their cart, and remove products from their cart.Customers should be able to create an account and log in to view their order history.Administrators should be able to manage products, including adding, editing, and deleting products.Administrators should be able to view and manage orders, including marking them as shipped or cancelled.Administrators should be able to view and manage customer information, including viewing order history and editing customer details.
Your solution should use the following technologies:
Spring Framework MVC to handle HTTP requests and responses and manage the application's controllers, views, and models.JDBC to communicate with the application's database and execute SQL queries.JPA to provide an object-relational mapping layer between the application's Java objects and the database.


<dependencies>
    <!-- Spring Framework -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.3.14</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>5.3.14</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>5.3.14</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-web</artifactId>
        <version>5.5.2</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-config</artifactId>
        <version>5.5.2</version>
    </dependency>
    <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-taglibs</artifactId>
        <version>5.5.2</version>
    </dependency>
 
    <!-- JSP -->
    <dependency>
        <groupId>javax.servlet.jsp</groupId>
        <artifactId>jsp-api</artifactId>
        <version>2.2</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>
 
    <!-- MySQL Connector -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.26</version>
    </dependency>
 
    <!-- Hibernate -->
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>5.5.7.Final</version>
    </dependency>
    <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <version>5.5.7.Final</version>
    </dependency>
 
    <!-- Commons -->
    <dependency>
        <groupId>commons-dbcp</groupId>
        <artifactId>commons-dbcp</artifactId>
        <version>1.4</version>
    </dependency>
    <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>1.15</version>
    </dependency>
</dependencies>
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to our online store</title>
</head>
<body>
    <h1>Welcome to our online store</h1>
    <p>Thank you for visiting our website. We offer a wide range of products at affordable prices. Browse our categories and find what you need.</p>
    <p>If you have any questions or need assistance, please don't hesitate to contact us.</p>
    <a href="products">Shop now</a>
</body>
</html>



[2:44 PM] Karunakar Eeede
    import java.util.ArrayList;
import java.util.List;
public class Cart {​​
    private List<CartItem> items;
    private double total;
    public Cart() {​​
        items = new ArrayList<>();
        total = 0;
    }​​
    public void addItem(CartItem item) {​​
        items.add(item);
        total += item.getSubtotal();
    }​​
    public void removeItem(int index) {​​
        CartItem removedItem = items.remove(index);
        total -= removedItem.getSubtotal();
    }​​
    public List<CartItem> getItems() {​​
        return items;
    }​​
    public double getTotal() {​​
        return total;
    }​​
    public void clear() {​​
        items.clear();
        total = 0;
    }​​
}​​
​[2:48 PM] Karunakar Eeede
    <dependency>
    <groupId>org.springframework.data</groupId>
    <artifactId>spring-data-jpa</artifactId>
    <version>3.0.5</version>
</dependency>


@Repository
public interface CartItemRepository extends JpaRepository<CartItem, Long> {
    
    List<CartItem> findByProduct(Product product);
    
    List<CartItem> findByCustomer(Customer customer);
    
    void deleteByCustomer(Customer customer);
    
}

@Controller
@RequestMapping("/cart")
@SessionAttributes("cart")
public class CartController {
 
    @Autowired
    private ProductService productService;
    
    @Autowired
    private CartService cartService;
    
    @ModelAttribute("cart")
    public Cart initCart() {
        return new Cart();
    }
    
    @GetMapping
    public String showCart(Model model, @ModelAttribute("cart") Cart cart) {
        model.addAttribute("cart", cart);
        return "cart";
    }
    
    @PostMapping("/add/{productId}")
    public String addToCart(@PathVariable Long productId, @RequestParam("quantity") int quantity, Model model, @ModelAttribute("cart") Cart cart) {
        Product product = productService.getProductById(productId);
        cartService.addProductToCart(cart, product, quantity);
        model.addAttribute("cart", cart);
        return "redirect:/cart";
    }
    
    @PostMapping("/remove/{productId}")
    public String removeFromCart(@PathVariable Long productId, Model model, @ModelAttribute("cart") Cart cart) {
        cartService.removeProductFromCart(cart, productId);
        model.addAttribute("cart", cart);
        return "redirect:/cart";
    }
    
    @PostMapping("/clear")
    public String clearCart(Model model, @ModelAttribute("cart") Cart cart) {
        cartService.clearCart(cart);
        model.addAttribute("cart", cart);
        return "redirect:/cart";
    }
}



@Controller
@RequestMapping("/cart")
@SessionAttributes("cart")
public class CartController {
 
    @Autowired
    private ProductService productService;
    
    @Autowired
    private CartService cartService;
    
    @ModelAttribute("cart")
    public Cart initCart() {
        return new Cart();
    }
    
    @GetMapping
    public String showCart(Model model, @ModelAttribute("cart") Cart cart) {
        model.addAttribute("cart", cart);
        return "cart";
    }
    
    @PostMapping("/add/{productId}")
    public String addToCart(@PathVariable Long productId, @RequestParam("quantity") int quantity, Model model, @ModelAttribute("cart") Cart cart) {
        Product product = productService.getProductById(productId);
        cartService.addProductToCart(cart, product, quantity);
        model.addAttribute("cart", cart);
        return "redirect:/cart";
    }
    
    @PostMapping("/remove/{productId}")
    public String removeFromCart(@PathVariable Long productId, Model model, @ModelAttribute("cart") Cart cart) {
        cartService.removeProductFromCart(cart, productId);
        model.addAttribute("cart", cart);
        return "redirect:/cart";
    }
    
    @PostMapping("/clear")
    public String clearCart(Model model, @ModelAttribute("cart") Cart cart) {
        cartService.clearCart(cart);
        model.addAttribute("cart", cart);
        return "redirect:/cart";
    }
}


@Controller
public class CartController {
 
    @Autowired
    private ProductRepository productRepository;
 
    @Autowired
    private Cart cart;
 
    @RequestMapping(value = "/cart", method = RequestMethod.GET)
    public ModelAndView cart() {
        ModelAndView modelAndView = new ModelAndView("cart");
        modelAndView.addObject("cart", cart);
        return modelAndView;
    }
 
    @RequestMapping(value = "/cart/add/{productId}", method = RequestMethod.GET)
    public String add(@PathVariable int productId) {
        Product product = productRepository.findById(productId).get();
        cart.add(product);
        return "redirect:/cart";
    }
 
    @RequestMapping(value = "/cart/remove/{productId}", method = RequestMethod.GET)
    public String remove(@PathVariable int productId) {
        Product product = productRepository.findById(productId).get();
        cart.remove(product);
        return "redirect:/cart";
    }
}




@Controller
public class CartController {
 
    @Autowired
    private CartService cartService;
 
    @RequestMapping(value = "/cart", method = RequestMethod.GET)
    public ModelAndView cart() {
        ModelAndView modelAndView = new ModelAndView("cart");
        modelAndView.addObject("cart", cartService.getCart());
        return modelAndView;
    }
 
    @RequestMapping(value = "/cart/add/{productId}", method = RequestMethod.GET)
    public String add(@PathVariable int productId) {
        cartService.addProduct(productId);
        return "redirect:/cart";
    }
 
    @RequestMapping(value = "/cart/remove/{productId}", method = RequestMethod.GET)
    public String remove(@PathVariable int productId) {
        cartService.removeProduct(productId);
        return "redirect:/cart";
    }
}



@GetMapping("/order-history")
public String getOrderHistory(Model model, Principal principal) {
    // Get the currently logged in customer
    Customer customer = customerService.getCustomerByEmail(principal.getName());
 
    // Get the list of orders for the customer
    List<Order> orders = orderService.getOrdersByCustomer(customer);
 
    // Add the orders to the model
    model.addAttribute("orders", orders);
 
    return "order_history";
}
=====================================================================================================

In short, Spring Boot is the combination of Spring Framework and Embedded Servers.
In Spring Boot, there is no requirement for XML configuration (deployment descriptor). It uses convention over configuration software design paradigm that means it decreases the effort of the developer.
We can use Spring STS IDE or Spring Initializer to develop Spring Boot Java applications.
Why should we use Spring Boot Framework?
We should use Spring Boot Framework because:
The dependency injection approach is used in Spring Boot.It contains powerful database transaction management capabilities.It simplifies integration with other Java frameworks like JPA/Hibernate ORM, Struts, etc.It reduces the cost and development time of the application.
Along with the Spring Boot Framework, many other Spring sister projects help to build applications addressing modern business needs. There are the following Spring sister projects are as follows:
Spring Data: It simplifies data access from the relational and NoSQL databases.Spring Batch: It provides powerful batch processing.Spring Security: It is a security framework that provides robust security to applications.Spring Social: It supports integration with social networking like LinkedIn.Spring Integration: It is an implementation of Enterprise Integration Patterns. It facilitates integration with other enterprise applications using lightweight messaging and declarative adapters.
Advantages of Spring Boot
It creates stand-alone Spring applications that can be started using Java -jar.It tests web applications easily with the help of different Embedded HTTP servers such as Tomcat, Jetty, etc. We don't need to deploy WAR files.It provides opinionated 'starter' POMs to simplify our Maven configuration.It provides production-ready features such as metrics, health checks, and externalized configuration.There is no requirement for XML configuration.It offers a CLI tool for developing and testing the Spring Boot application.It offers the number of plug-ins.It also minimizes writing multiple boilerplate codes (the code that has to be included in many places with little or no alteration), XML configuration, and annotations.It increases productivity and reduces development time.
Limitations of Spring Boot
Spring Boot can use dependencies that are not going to be used in the application. These dependencies increase the size of the application.

Spring: Spring Framework is the most popular application development framework of Java. The main feature of the Spring Framework is dependency Injection or Inversion of Control (IoC). With the help of Spring Framework, we can develop a loosely coupled application. It is better to use if application type or characteristics are purely defined.
Spring Boot: Spring Boot is a module of Spring Framework. It allows us to build a stand-alone application with minimal or zero configurations. It is better to use if we want to develop a simple Spring-based application or RESTful services.



Spring Boot Architecture
Spring Boot is a module of the Spring Framework. It is used to create stand-alone, production-grade Spring Based Applications with minimum efforts. It is developed on top of the core Spring Framework.
Spring Boot follows a layered architecture in which each layer communicates with the layer directly below or above (hierarchical structure) it.
Before understanding the Spring Boot Architecture, we must know the different layers and classes present in it. There are four layers in Spring Boot are as follows:
Presentation LayerBusiness LayerPersistence LayerDatabase Layer
 
Presentation Layer: The presentation layer handles the HTTP requests, translates the JSON parameter to object, and authenticates the request and transfer it to the business layer. In short, it consists of views i.e., frontend part.
Business Layer: The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. It also performs authorization and validation.
Persistence Layer: The persistence layer contains all the storage logic and translates business objects from and to database rows.
Database Layer: In the database layer, CRUD (create, retrieve, update, delete) operations are performed.



======================================================================================================================================

package com.example.Springdemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringdemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringdemoApplication.class, args);
		System.out.println("hello world");
	}

}
============================================================================
package com.controller;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@SpringBootApplication
public class HelloWorldApplication {
@RequestMapping("/")
@ResponseBody
String home() {
	return "hello this is pavankalyan";
}
public static void main(String[] args) {
	SpringApplication.run(HelloWorldApplication.class,args);
}
}
=============================================================================




































































